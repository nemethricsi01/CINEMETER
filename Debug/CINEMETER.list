
CINEMETER.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005374  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000080dc  08005514  08005514  00015514  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800d5f0  0800d5f0  00020084  2**0
                  CONTENTS
  4 .ARM          00000008  0800d5f0  0800d5f0  0001d5f0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800d5f8  0800d5f8  00020084  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800d5f8  0800d5f8  0001d5f8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800d5fc  0800d5fc  0001d5fc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000084  20000000  0800d600  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000071c  20000084  0800d684  00020084  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200007a0  0800d684  000207a0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020084  2**0
                  CONTENTS, READONLY
 12 .debug_info   00013d65  00000000  00000000  000200b4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000255e  00000000  00000000  00033e19  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001220  00000000  00000000  00036378  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001148  00000000  00000000  00037598  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000032d9  00000000  00000000  000386e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001490f  00000000  00000000  0003b9b9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00094691  00000000  00000000  000502c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000e4959  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005174  00000000  00000000  000e49ac  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000084 	.word	0x20000084
 80001bc:	00000000 	.word	0x00000000
 80001c0:	080054fc 	.word	0x080054fc

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000088 	.word	0x20000088
 80001dc:	080054fc 	.word	0x080054fc

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_uldivmod>:
 8000290:	b953      	cbnz	r3, 80002a8 <__aeabi_uldivmod+0x18>
 8000292:	b94a      	cbnz	r2, 80002a8 <__aeabi_uldivmod+0x18>
 8000294:	2900      	cmp	r1, #0
 8000296:	bf08      	it	eq
 8000298:	2800      	cmpeq	r0, #0
 800029a:	bf1c      	itt	ne
 800029c:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80002a0:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80002a4:	f000 b974 	b.w	8000590 <__aeabi_idiv0>
 80002a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002b0:	f000 f806 	bl	80002c0 <__udivmoddi4>
 80002b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002bc:	b004      	add	sp, #16
 80002be:	4770      	bx	lr

080002c0 <__udivmoddi4>:
 80002c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002c4:	9d08      	ldr	r5, [sp, #32]
 80002c6:	4604      	mov	r4, r0
 80002c8:	468e      	mov	lr, r1
 80002ca:	2b00      	cmp	r3, #0
 80002cc:	d14d      	bne.n	800036a <__udivmoddi4+0xaa>
 80002ce:	428a      	cmp	r2, r1
 80002d0:	4694      	mov	ip, r2
 80002d2:	d969      	bls.n	80003a8 <__udivmoddi4+0xe8>
 80002d4:	fab2 f282 	clz	r2, r2
 80002d8:	b152      	cbz	r2, 80002f0 <__udivmoddi4+0x30>
 80002da:	fa01 f302 	lsl.w	r3, r1, r2
 80002de:	f1c2 0120 	rsb	r1, r2, #32
 80002e2:	fa20 f101 	lsr.w	r1, r0, r1
 80002e6:	fa0c fc02 	lsl.w	ip, ip, r2
 80002ea:	ea41 0e03 	orr.w	lr, r1, r3
 80002ee:	4094      	lsls	r4, r2
 80002f0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002f4:	0c21      	lsrs	r1, r4, #16
 80002f6:	fbbe f6f8 	udiv	r6, lr, r8
 80002fa:	fa1f f78c 	uxth.w	r7, ip
 80002fe:	fb08 e316 	mls	r3, r8, r6, lr
 8000302:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000306:	fb06 f107 	mul.w	r1, r6, r7
 800030a:	4299      	cmp	r1, r3
 800030c:	d90a      	bls.n	8000324 <__udivmoddi4+0x64>
 800030e:	eb1c 0303 	adds.w	r3, ip, r3
 8000312:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000316:	f080 811f 	bcs.w	8000558 <__udivmoddi4+0x298>
 800031a:	4299      	cmp	r1, r3
 800031c:	f240 811c 	bls.w	8000558 <__udivmoddi4+0x298>
 8000320:	3e02      	subs	r6, #2
 8000322:	4463      	add	r3, ip
 8000324:	1a5b      	subs	r3, r3, r1
 8000326:	b2a4      	uxth	r4, r4
 8000328:	fbb3 f0f8 	udiv	r0, r3, r8
 800032c:	fb08 3310 	mls	r3, r8, r0, r3
 8000330:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000334:	fb00 f707 	mul.w	r7, r0, r7
 8000338:	42a7      	cmp	r7, r4
 800033a:	d90a      	bls.n	8000352 <__udivmoddi4+0x92>
 800033c:	eb1c 0404 	adds.w	r4, ip, r4
 8000340:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000344:	f080 810a 	bcs.w	800055c <__udivmoddi4+0x29c>
 8000348:	42a7      	cmp	r7, r4
 800034a:	f240 8107 	bls.w	800055c <__udivmoddi4+0x29c>
 800034e:	4464      	add	r4, ip
 8000350:	3802      	subs	r0, #2
 8000352:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000356:	1be4      	subs	r4, r4, r7
 8000358:	2600      	movs	r6, #0
 800035a:	b11d      	cbz	r5, 8000364 <__udivmoddi4+0xa4>
 800035c:	40d4      	lsrs	r4, r2
 800035e:	2300      	movs	r3, #0
 8000360:	e9c5 4300 	strd	r4, r3, [r5]
 8000364:	4631      	mov	r1, r6
 8000366:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800036a:	428b      	cmp	r3, r1
 800036c:	d909      	bls.n	8000382 <__udivmoddi4+0xc2>
 800036e:	2d00      	cmp	r5, #0
 8000370:	f000 80ef 	beq.w	8000552 <__udivmoddi4+0x292>
 8000374:	2600      	movs	r6, #0
 8000376:	e9c5 0100 	strd	r0, r1, [r5]
 800037a:	4630      	mov	r0, r6
 800037c:	4631      	mov	r1, r6
 800037e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000382:	fab3 f683 	clz	r6, r3
 8000386:	2e00      	cmp	r6, #0
 8000388:	d14a      	bne.n	8000420 <__udivmoddi4+0x160>
 800038a:	428b      	cmp	r3, r1
 800038c:	d302      	bcc.n	8000394 <__udivmoddi4+0xd4>
 800038e:	4282      	cmp	r2, r0
 8000390:	f200 80f9 	bhi.w	8000586 <__udivmoddi4+0x2c6>
 8000394:	1a84      	subs	r4, r0, r2
 8000396:	eb61 0303 	sbc.w	r3, r1, r3
 800039a:	2001      	movs	r0, #1
 800039c:	469e      	mov	lr, r3
 800039e:	2d00      	cmp	r5, #0
 80003a0:	d0e0      	beq.n	8000364 <__udivmoddi4+0xa4>
 80003a2:	e9c5 4e00 	strd	r4, lr, [r5]
 80003a6:	e7dd      	b.n	8000364 <__udivmoddi4+0xa4>
 80003a8:	b902      	cbnz	r2, 80003ac <__udivmoddi4+0xec>
 80003aa:	deff      	udf	#255	; 0xff
 80003ac:	fab2 f282 	clz	r2, r2
 80003b0:	2a00      	cmp	r2, #0
 80003b2:	f040 8092 	bne.w	80004da <__udivmoddi4+0x21a>
 80003b6:	eba1 010c 	sub.w	r1, r1, ip
 80003ba:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003be:	fa1f fe8c 	uxth.w	lr, ip
 80003c2:	2601      	movs	r6, #1
 80003c4:	0c20      	lsrs	r0, r4, #16
 80003c6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003ca:	fb07 1113 	mls	r1, r7, r3, r1
 80003ce:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003d2:	fb0e f003 	mul.w	r0, lr, r3
 80003d6:	4288      	cmp	r0, r1
 80003d8:	d908      	bls.n	80003ec <__udivmoddi4+0x12c>
 80003da:	eb1c 0101 	adds.w	r1, ip, r1
 80003de:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 80003e2:	d202      	bcs.n	80003ea <__udivmoddi4+0x12a>
 80003e4:	4288      	cmp	r0, r1
 80003e6:	f200 80cb 	bhi.w	8000580 <__udivmoddi4+0x2c0>
 80003ea:	4643      	mov	r3, r8
 80003ec:	1a09      	subs	r1, r1, r0
 80003ee:	b2a4      	uxth	r4, r4
 80003f0:	fbb1 f0f7 	udiv	r0, r1, r7
 80003f4:	fb07 1110 	mls	r1, r7, r0, r1
 80003f8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80003fc:	fb0e fe00 	mul.w	lr, lr, r0
 8000400:	45a6      	cmp	lr, r4
 8000402:	d908      	bls.n	8000416 <__udivmoddi4+0x156>
 8000404:	eb1c 0404 	adds.w	r4, ip, r4
 8000408:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 800040c:	d202      	bcs.n	8000414 <__udivmoddi4+0x154>
 800040e:	45a6      	cmp	lr, r4
 8000410:	f200 80bb 	bhi.w	800058a <__udivmoddi4+0x2ca>
 8000414:	4608      	mov	r0, r1
 8000416:	eba4 040e 	sub.w	r4, r4, lr
 800041a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800041e:	e79c      	b.n	800035a <__udivmoddi4+0x9a>
 8000420:	f1c6 0720 	rsb	r7, r6, #32
 8000424:	40b3      	lsls	r3, r6
 8000426:	fa22 fc07 	lsr.w	ip, r2, r7
 800042a:	ea4c 0c03 	orr.w	ip, ip, r3
 800042e:	fa20 f407 	lsr.w	r4, r0, r7
 8000432:	fa01 f306 	lsl.w	r3, r1, r6
 8000436:	431c      	orrs	r4, r3
 8000438:	40f9      	lsrs	r1, r7
 800043a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800043e:	fa00 f306 	lsl.w	r3, r0, r6
 8000442:	fbb1 f8f9 	udiv	r8, r1, r9
 8000446:	0c20      	lsrs	r0, r4, #16
 8000448:	fa1f fe8c 	uxth.w	lr, ip
 800044c:	fb09 1118 	mls	r1, r9, r8, r1
 8000450:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000454:	fb08 f00e 	mul.w	r0, r8, lr
 8000458:	4288      	cmp	r0, r1
 800045a:	fa02 f206 	lsl.w	r2, r2, r6
 800045e:	d90b      	bls.n	8000478 <__udivmoddi4+0x1b8>
 8000460:	eb1c 0101 	adds.w	r1, ip, r1
 8000464:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000468:	f080 8088 	bcs.w	800057c <__udivmoddi4+0x2bc>
 800046c:	4288      	cmp	r0, r1
 800046e:	f240 8085 	bls.w	800057c <__udivmoddi4+0x2bc>
 8000472:	f1a8 0802 	sub.w	r8, r8, #2
 8000476:	4461      	add	r1, ip
 8000478:	1a09      	subs	r1, r1, r0
 800047a:	b2a4      	uxth	r4, r4
 800047c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000480:	fb09 1110 	mls	r1, r9, r0, r1
 8000484:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000488:	fb00 fe0e 	mul.w	lr, r0, lr
 800048c:	458e      	cmp	lr, r1
 800048e:	d908      	bls.n	80004a2 <__udivmoddi4+0x1e2>
 8000490:	eb1c 0101 	adds.w	r1, ip, r1
 8000494:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 8000498:	d26c      	bcs.n	8000574 <__udivmoddi4+0x2b4>
 800049a:	458e      	cmp	lr, r1
 800049c:	d96a      	bls.n	8000574 <__udivmoddi4+0x2b4>
 800049e:	3802      	subs	r0, #2
 80004a0:	4461      	add	r1, ip
 80004a2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80004a6:	fba0 9402 	umull	r9, r4, r0, r2
 80004aa:	eba1 010e 	sub.w	r1, r1, lr
 80004ae:	42a1      	cmp	r1, r4
 80004b0:	46c8      	mov	r8, r9
 80004b2:	46a6      	mov	lr, r4
 80004b4:	d356      	bcc.n	8000564 <__udivmoddi4+0x2a4>
 80004b6:	d053      	beq.n	8000560 <__udivmoddi4+0x2a0>
 80004b8:	b15d      	cbz	r5, 80004d2 <__udivmoddi4+0x212>
 80004ba:	ebb3 0208 	subs.w	r2, r3, r8
 80004be:	eb61 010e 	sbc.w	r1, r1, lr
 80004c2:	fa01 f707 	lsl.w	r7, r1, r7
 80004c6:	fa22 f306 	lsr.w	r3, r2, r6
 80004ca:	40f1      	lsrs	r1, r6
 80004cc:	431f      	orrs	r7, r3
 80004ce:	e9c5 7100 	strd	r7, r1, [r5]
 80004d2:	2600      	movs	r6, #0
 80004d4:	4631      	mov	r1, r6
 80004d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004da:	f1c2 0320 	rsb	r3, r2, #32
 80004de:	40d8      	lsrs	r0, r3
 80004e0:	fa0c fc02 	lsl.w	ip, ip, r2
 80004e4:	fa21 f303 	lsr.w	r3, r1, r3
 80004e8:	4091      	lsls	r1, r2
 80004ea:	4301      	orrs	r1, r0
 80004ec:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004f0:	fa1f fe8c 	uxth.w	lr, ip
 80004f4:	fbb3 f0f7 	udiv	r0, r3, r7
 80004f8:	fb07 3610 	mls	r6, r7, r0, r3
 80004fc:	0c0b      	lsrs	r3, r1, #16
 80004fe:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000502:	fb00 f60e 	mul.w	r6, r0, lr
 8000506:	429e      	cmp	r6, r3
 8000508:	fa04 f402 	lsl.w	r4, r4, r2
 800050c:	d908      	bls.n	8000520 <__udivmoddi4+0x260>
 800050e:	eb1c 0303 	adds.w	r3, ip, r3
 8000512:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000516:	d22f      	bcs.n	8000578 <__udivmoddi4+0x2b8>
 8000518:	429e      	cmp	r6, r3
 800051a:	d92d      	bls.n	8000578 <__udivmoddi4+0x2b8>
 800051c:	3802      	subs	r0, #2
 800051e:	4463      	add	r3, ip
 8000520:	1b9b      	subs	r3, r3, r6
 8000522:	b289      	uxth	r1, r1
 8000524:	fbb3 f6f7 	udiv	r6, r3, r7
 8000528:	fb07 3316 	mls	r3, r7, r6, r3
 800052c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000530:	fb06 f30e 	mul.w	r3, r6, lr
 8000534:	428b      	cmp	r3, r1
 8000536:	d908      	bls.n	800054a <__udivmoddi4+0x28a>
 8000538:	eb1c 0101 	adds.w	r1, ip, r1
 800053c:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 8000540:	d216      	bcs.n	8000570 <__udivmoddi4+0x2b0>
 8000542:	428b      	cmp	r3, r1
 8000544:	d914      	bls.n	8000570 <__udivmoddi4+0x2b0>
 8000546:	3e02      	subs	r6, #2
 8000548:	4461      	add	r1, ip
 800054a:	1ac9      	subs	r1, r1, r3
 800054c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000550:	e738      	b.n	80003c4 <__udivmoddi4+0x104>
 8000552:	462e      	mov	r6, r5
 8000554:	4628      	mov	r0, r5
 8000556:	e705      	b.n	8000364 <__udivmoddi4+0xa4>
 8000558:	4606      	mov	r6, r0
 800055a:	e6e3      	b.n	8000324 <__udivmoddi4+0x64>
 800055c:	4618      	mov	r0, r3
 800055e:	e6f8      	b.n	8000352 <__udivmoddi4+0x92>
 8000560:	454b      	cmp	r3, r9
 8000562:	d2a9      	bcs.n	80004b8 <__udivmoddi4+0x1f8>
 8000564:	ebb9 0802 	subs.w	r8, r9, r2
 8000568:	eb64 0e0c 	sbc.w	lr, r4, ip
 800056c:	3801      	subs	r0, #1
 800056e:	e7a3      	b.n	80004b8 <__udivmoddi4+0x1f8>
 8000570:	4646      	mov	r6, r8
 8000572:	e7ea      	b.n	800054a <__udivmoddi4+0x28a>
 8000574:	4620      	mov	r0, r4
 8000576:	e794      	b.n	80004a2 <__udivmoddi4+0x1e2>
 8000578:	4640      	mov	r0, r8
 800057a:	e7d1      	b.n	8000520 <__udivmoddi4+0x260>
 800057c:	46d0      	mov	r8, sl
 800057e:	e77b      	b.n	8000478 <__udivmoddi4+0x1b8>
 8000580:	3b02      	subs	r3, #2
 8000582:	4461      	add	r1, ip
 8000584:	e732      	b.n	80003ec <__udivmoddi4+0x12c>
 8000586:	4630      	mov	r0, r6
 8000588:	e709      	b.n	800039e <__udivmoddi4+0xde>
 800058a:	4464      	add	r4, ip
 800058c:	3802      	subs	r0, #2
 800058e:	e742      	b.n	8000416 <__udivmoddi4+0x156>

08000590 <__aeabi_idiv0>:
 8000590:	4770      	bx	lr
 8000592:	bf00      	nop

08000594 <TOF_InitStruct>:
#include "VL53L1X.h"
#include "VL53L1X_api.h"

VL53L1X* active_sensor;

void TOF_InitStruct(VL53L1X* const sensor, I2C_HandleTypeDef* hi2c, uint8_t address, GPIO_TypeDef* xshut_port, uint16_t xshut_pin) {
 8000594:	b480      	push	{r7}
 8000596:	b085      	sub	sp, #20
 8000598:	af00      	add	r7, sp, #0
 800059a:	60f8      	str	r0, [r7, #12]
 800059c:	60b9      	str	r1, [r7, #8]
 800059e:	603b      	str	r3, [r7, #0]
 80005a0:	4613      	mov	r3, r2
 80005a2:	71fb      	strb	r3, [r7, #7]
	sensor->hi2c = hi2c;
 80005a4:	68fb      	ldr	r3, [r7, #12]
 80005a6:	68ba      	ldr	r2, [r7, #8]
 80005a8:	601a      	str	r2, [r3, #0]
	sensor->address = address;
 80005aa:	68fb      	ldr	r3, [r7, #12]
 80005ac:	79fa      	ldrb	r2, [r7, #7]
 80005ae:	711a      	strb	r2, [r3, #4]

	sensor->xshut_port = xshut_port;
 80005b0:	68fb      	ldr	r3, [r7, #12]
 80005b2:	683a      	ldr	r2, [r7, #0]
 80005b4:	609a      	str	r2, [r3, #8]
	sensor->xshut_pin = xshut_pin;
 80005b6:	68fb      	ldr	r3, [r7, #12]
 80005b8:	8b3a      	ldrh	r2, [r7, #24]
 80005ba:	819a      	strh	r2, [r3, #12]
}
 80005bc:	bf00      	nop
 80005be:	3714      	adds	r7, #20
 80005c0:	46bd      	mov	sp, r7
 80005c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005c6:	4770      	bx	lr

080005c8 <TOF_TurnOn>:

void TOF_TurnOn(VL53L1X* const sensor) {
 80005c8:	b580      	push	{r7, lr}
 80005ca:	b082      	sub	sp, #8
 80005cc:	af00      	add	r7, sp, #0
 80005ce:	6078      	str	r0, [r7, #4]
	active_sensor = sensor;
 80005d0:	4a07      	ldr	r2, [pc, #28]	; (80005f0 <TOF_TurnOn+0x28>)
 80005d2:	687b      	ldr	r3, [r7, #4]
 80005d4:	6013      	str	r3, [r2, #0]
	HAL_GPIO_WritePin(sensor->xshut_port, sensor->xshut_pin, GPIO_PIN_SET);
 80005d6:	687b      	ldr	r3, [r7, #4]
 80005d8:	6898      	ldr	r0, [r3, #8]
 80005da:	687b      	ldr	r3, [r7, #4]
 80005dc:	899b      	ldrh	r3, [r3, #12]
 80005de:	2201      	movs	r2, #1
 80005e0:	4619      	mov	r1, r3
 80005e2:	f001 ffd7 	bl	8002594 <HAL_GPIO_WritePin>
}
 80005e6:	bf00      	nop
 80005e8:	3708      	adds	r7, #8
 80005ea:	46bd      	mov	sp, r7
 80005ec:	bd80      	pop	{r7, pc}
 80005ee:	bf00      	nop
 80005f0:	200000a0 	.word	0x200000a0

080005f4 <TOF_TurnOff>:

void TOF_TurnOff(VL53L1X* const sensor) {
 80005f4:	b580      	push	{r7, lr}
 80005f6:	b082      	sub	sp, #8
 80005f8:	af00      	add	r7, sp, #0
 80005fa:	6078      	str	r0, [r7, #4]
	active_sensor = sensor;
 80005fc:	4a07      	ldr	r2, [pc, #28]	; (800061c <TOF_TurnOff+0x28>)
 80005fe:	687b      	ldr	r3, [r7, #4]
 8000600:	6013      	str	r3, [r2, #0]
	HAL_GPIO_WritePin(sensor->xshut_port, sensor->xshut_pin, GPIO_PIN_RESET);
 8000602:	687b      	ldr	r3, [r7, #4]
 8000604:	6898      	ldr	r0, [r3, #8]
 8000606:	687b      	ldr	r3, [r7, #4]
 8000608:	899b      	ldrh	r3, [r3, #12]
 800060a:	2200      	movs	r2, #0
 800060c:	4619      	mov	r1, r3
 800060e:	f001 ffc1 	bl	8002594 <HAL_GPIO_WritePin>
}
 8000612:	bf00      	nop
 8000614:	3708      	adds	r7, #8
 8000616:	46bd      	mov	sp, r7
 8000618:	bd80      	pop	{r7, pc}
 800061a:	bf00      	nop
 800061c:	200000a0 	.word	0x200000a0

08000620 <TOF_BootMultipleSensors>:

void TOF_BootMultipleSensors(VL53L1X** const sensors, uint8_t count) {
 8000620:	b580      	push	{r7, lr}
 8000622:	b084      	sub	sp, #16
 8000624:	af00      	add	r7, sp, #0
 8000626:	6078      	str	r0, [r7, #4]
 8000628:	460b      	mov	r3, r1
 800062a:	70fb      	strb	r3, [r7, #3]
	for (uint8_t n = 0; n < count; n++) {
 800062c:	2300      	movs	r3, #0
 800062e:	73fb      	strb	r3, [r7, #15]
 8000630:	e00a      	b.n	8000648 <TOF_BootMultipleSensors+0x28>
		TOF_TurnOff(sensors[n]);
 8000632:	7bfb      	ldrb	r3, [r7, #15]
 8000634:	009b      	lsls	r3, r3, #2
 8000636:	687a      	ldr	r2, [r7, #4]
 8000638:	4413      	add	r3, r2
 800063a:	681b      	ldr	r3, [r3, #0]
 800063c:	4618      	mov	r0, r3
 800063e:	f7ff ffd9 	bl	80005f4 <TOF_TurnOff>
	for (uint8_t n = 0; n < count; n++) {
 8000642:	7bfb      	ldrb	r3, [r7, #15]
 8000644:	3301      	adds	r3, #1
 8000646:	73fb      	strb	r3, [r7, #15]
 8000648:	7bfa      	ldrb	r2, [r7, #15]
 800064a:	78fb      	ldrb	r3, [r7, #3]
 800064c:	429a      	cmp	r2, r3
 800064e:	d3f0      	bcc.n	8000632 <TOF_BootMultipleSensors+0x12>
	}

	for (uint8_t n = 0; n < count; n++) {
 8000650:	2300      	movs	r3, #0
 8000652:	73bb      	strb	r3, [r7, #14]
 8000654:	e00a      	b.n	800066c <TOF_BootMultipleSensors+0x4c>
		TOF_BootSensor(sensors[n]);
 8000656:	7bbb      	ldrb	r3, [r7, #14]
 8000658:	009b      	lsls	r3, r3, #2
 800065a:	687a      	ldr	r2, [r7, #4]
 800065c:	4413      	add	r3, r2
 800065e:	681b      	ldr	r3, [r3, #0]
 8000660:	4618      	mov	r0, r3
 8000662:	f000 f80d 	bl	8000680 <TOF_BootSensor>
	for (uint8_t n = 0; n < count; n++) {
 8000666:	7bbb      	ldrb	r3, [r7, #14]
 8000668:	3301      	adds	r3, #1
 800066a:	73bb      	strb	r3, [r7, #14]
 800066c:	7bba      	ldrb	r2, [r7, #14]
 800066e:	78fb      	ldrb	r3, [r7, #3]
 8000670:	429a      	cmp	r2, r3
 8000672:	d3f0      	bcc.n	8000656 <TOF_BootMultipleSensors+0x36>
	}
}
 8000674:	bf00      	nop
 8000676:	bf00      	nop
 8000678:	3710      	adds	r7, #16
 800067a:	46bd      	mov	sp, r7
 800067c:	bd80      	pop	{r7, pc}
	...

08000680 <TOF_BootSensor>:

void TOF_BootSensor(VL53L1X* const sensor) {
 8000680:	b580      	push	{r7, lr}
 8000682:	b084      	sub	sp, #16
 8000684:	af00      	add	r7, sp, #0
 8000686:	6078      	str	r0, [r7, #4]
	active_sensor = sensor;
 8000688:	4a21      	ldr	r2, [pc, #132]	; (8000710 <TOF_BootSensor+0x90>)
 800068a:	687b      	ldr	r3, [r7, #4]
 800068c:	6013      	str	r3, [r2, #0]
	TOF_TurnOn(sensor);
 800068e:	6878      	ldr	r0, [r7, #4]
 8000690:	f7ff ff9a 	bl	80005c8 <TOF_TurnOn>
    HAL_Delay(2); // Sometimes this is too fast and line can't settle
 8000694:	2002      	movs	r0, #2
 8000696:	f001 fcef 	bl	8002078 <HAL_Delay>

	// Assume sensor wasn't initialised and is using default address
	uint8_t correct_address = sensor->address;
 800069a:	687b      	ldr	r3, [r7, #4]
 800069c:	791b      	ldrb	r3, [r3, #4]
 800069e:	73fb      	strb	r3, [r7, #15]
	sensor->address = 0x52 >> 1;
 80006a0:	687b      	ldr	r3, [r7, #4]
 80006a2:	2229      	movs	r2, #41	; 0x29
 80006a4:	711a      	strb	r2, [r3, #4]

	// Set new address to sensor if necessary
	uint16_t id = 0;
 80006a6:	2300      	movs	r3, #0
 80006a8:	81bb      	strh	r3, [r7, #12]
	if (VL53L1X_GetSensorId(sensor->address, &id) == 0) {
 80006aa:	687b      	ldr	r3, [r7, #4]
 80006ac:	791b      	ldrb	r3, [r3, #4]
 80006ae:	b29b      	uxth	r3, r3
 80006b0:	f107 020c 	add.w	r2, r7, #12
 80006b4:	4611      	mov	r1, r2
 80006b6:	4618      	mov	r0, r3
 80006b8:	f000 f95d 	bl	8000976 <VL53L1X_GetSensorId>
 80006bc:	4603      	mov	r3, r0
 80006be:	2b00      	cmp	r3, #0
 80006c0:	d107      	bne.n	80006d2 <TOF_BootSensor+0x52>
		VL53L1X_SetI2CAddress(sensor->address, correct_address);
 80006c2:	687b      	ldr	r3, [r7, #4]
 80006c4:	791b      	ldrb	r3, [r3, #4]
 80006c6:	b29b      	uxth	r3, r3
 80006c8:	7bfa      	ldrb	r2, [r7, #15]
 80006ca:	4611      	mov	r1, r2
 80006cc:	4618      	mov	r0, r3
 80006ce:	f000 f821 	bl	8000714 <VL53L1X_SetI2CAddress>
	}

	// Initialise sensor
	sensor->address = correct_address;
 80006d2:	687b      	ldr	r3, [r7, #4]
 80006d4:	7bfa      	ldrb	r2, [r7, #15]
 80006d6:	711a      	strb	r2, [r3, #4]
	if (VL53L1X_GetSensorId(sensor->address, &id) == 0) {
 80006d8:	687b      	ldr	r3, [r7, #4]
 80006da:	791b      	ldrb	r3, [r3, #4]
 80006dc:	b29b      	uxth	r3, r3
 80006de:	f107 020c 	add.w	r2, r7, #12
 80006e2:	4611      	mov	r1, r2
 80006e4:	4618      	mov	r0, r3
 80006e6:	f000 f946 	bl	8000976 <VL53L1X_GetSensorId>
 80006ea:	4603      	mov	r3, r0
 80006ec:	2b00      	cmp	r3, #0
 80006ee:	d10b      	bne.n	8000708 <TOF_BootSensor+0x88>
		VL53L1X_SensorInit(sensor->address);
 80006f0:	687b      	ldr	r3, [r7, #4]
 80006f2:	791b      	ldrb	r3, [r3, #4]
 80006f4:	b29b      	uxth	r3, r3
 80006f6:	4618      	mov	r0, r3
 80006f8:	f000 f828 	bl	800074c <VL53L1X_SensorInit>
		VL53L1X_StartRanging(sensor->address);
 80006fc:	687b      	ldr	r3, [r7, #4]
 80006fe:	791b      	ldrb	r3, [r3, #4]
 8000700:	b29b      	uxth	r3, r3
 8000702:	4618      	mov	r0, r3
 8000704:	f000 f8d0 	bl	80008a8 <VL53L1X_StartRanging>
	} else {
	    // Initialization failed
	}
}
 8000708:	bf00      	nop
 800070a:	3710      	adds	r7, #16
 800070c:	46bd      	mov	sp, r7
 800070e:	bd80      	pop	{r7, pc}
 8000710:	200000a0 	.word	0x200000a0

08000714 <VL53L1X_SetI2CAddress>:
	pVersion->revision = VL53L1X_IMPLEMENTATION_VER_REVISION;
	return Status;
}

VL53L1X_ERROR VL53L1X_SetI2CAddress(uint16_t dev, uint8_t new_address)
{
 8000714:	b580      	push	{r7, lr}
 8000716:	b084      	sub	sp, #16
 8000718:	af00      	add	r7, sp, #0
 800071a:	4603      	mov	r3, r0
 800071c:	460a      	mov	r2, r1
 800071e:	80fb      	strh	r3, [r7, #6]
 8000720:	4613      	mov	r3, r2
 8000722:	717b      	strb	r3, [r7, #5]
	VL53L1X_ERROR status = 0;
 8000724:	2300      	movs	r3, #0
 8000726:	73fb      	strb	r3, [r7, #15]

	status |= VL53L1_WrByte(dev, VL53L1_I2C_SLAVE__DEVICE_ADDRESS, new_address);
 8000728:	797a      	ldrb	r2, [r7, #5]
 800072a:	88fb      	ldrh	r3, [r7, #6]
 800072c:	2101      	movs	r1, #1
 800072e:	4618      	mov	r0, r3
 8000730:	f000 fe6a 	bl	8001408 <VL53L1_WrByte>
 8000734:	4603      	mov	r3, r0
 8000736:	461a      	mov	r2, r3
 8000738:	7bfb      	ldrb	r3, [r7, #15]
 800073a:	4313      	orrs	r3, r2
 800073c:	73fb      	strb	r3, [r7, #15]
	return status;
 800073e:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8000742:	4618      	mov	r0, r3
 8000744:	3710      	adds	r7, #16
 8000746:	46bd      	mov	sp, r7
 8000748:	bd80      	pop	{r7, pc}
	...

0800074c <VL53L1X_SensorInit>:

VL53L1X_ERROR VL53L1X_SensorInit(uint16_t dev)
{
 800074c:	b580      	push	{r7, lr}
 800074e:	b084      	sub	sp, #16
 8000750:	af00      	add	r7, sp, #0
 8000752:	4603      	mov	r3, r0
 8000754:	80fb      	strh	r3, [r7, #6]
	VL53L1X_ERROR status = 0;
 8000756:	2300      	movs	r3, #0
 8000758:	73fb      	strb	r3, [r7, #15]
	uint8_t Addr = 0x00, tmp;
 800075a:	2300      	movs	r3, #0
 800075c:	73bb      	strb	r3, [r7, #14]

	for (Addr = 0x2D; Addr <= 0x87; Addr++){
 800075e:	232d      	movs	r3, #45	; 0x2d
 8000760:	73bb      	strb	r3, [r7, #14]
 8000762:	e011      	b.n	8000788 <VL53L1X_SensorInit+0x3c>
		status |= VL53L1_WrByte(dev, Addr, VL51L1X_DEFAULT_CONFIGURATION[Addr - 0x2D]);
 8000764:	7bbb      	ldrb	r3, [r7, #14]
 8000766:	b299      	uxth	r1, r3
 8000768:	7bbb      	ldrb	r3, [r7, #14]
 800076a:	3b2d      	subs	r3, #45	; 0x2d
 800076c:	4a2c      	ldr	r2, [pc, #176]	; (8000820 <VL53L1X_SensorInit+0xd4>)
 800076e:	5cd2      	ldrb	r2, [r2, r3]
 8000770:	88fb      	ldrh	r3, [r7, #6]
 8000772:	4618      	mov	r0, r3
 8000774:	f000 fe48 	bl	8001408 <VL53L1_WrByte>
 8000778:	4603      	mov	r3, r0
 800077a:	461a      	mov	r2, r3
 800077c:	7bfb      	ldrb	r3, [r7, #15]
 800077e:	4313      	orrs	r3, r2
 8000780:	73fb      	strb	r3, [r7, #15]
	for (Addr = 0x2D; Addr <= 0x87; Addr++){
 8000782:	7bbb      	ldrb	r3, [r7, #14]
 8000784:	3301      	adds	r3, #1
 8000786:	73bb      	strb	r3, [r7, #14]
 8000788:	7bbb      	ldrb	r3, [r7, #14]
 800078a:	2b87      	cmp	r3, #135	; 0x87
 800078c:	d9ea      	bls.n	8000764 <VL53L1X_SensorInit+0x18>
	}
	status |= VL53L1X_StartRanging(dev);
 800078e:	88fb      	ldrh	r3, [r7, #6]
 8000790:	4618      	mov	r0, r3
 8000792:	f000 f889 	bl	80008a8 <VL53L1X_StartRanging>
 8000796:	4603      	mov	r3, r0
 8000798:	461a      	mov	r2, r3
 800079a:	7bfb      	ldrb	r3, [r7, #15]
 800079c:	4313      	orrs	r3, r2
 800079e:	73fb      	strb	r3, [r7, #15]
	tmp  = 0;
 80007a0:	2300      	movs	r3, #0
 80007a2:	737b      	strb	r3, [r7, #13]
	while(tmp==0){
 80007a4:	e00b      	b.n	80007be <VL53L1X_SensorInit+0x72>
			status |= VL53L1X_CheckForDataReady(dev, &tmp);
 80007a6:	f107 020d 	add.w	r2, r7, #13
 80007aa:	88fb      	ldrh	r3, [r7, #6]
 80007ac:	4611      	mov	r1, r2
 80007ae:	4618      	mov	r0, r3
 80007b0:	f000 f8aa 	bl	8000908 <VL53L1X_CheckForDataReady>
 80007b4:	4603      	mov	r3, r0
 80007b6:	461a      	mov	r2, r3
 80007b8:	7bfb      	ldrb	r3, [r7, #15]
 80007ba:	4313      	orrs	r3, r2
 80007bc:	73fb      	strb	r3, [r7, #15]
	while(tmp==0){
 80007be:	7b7b      	ldrb	r3, [r7, #13]
 80007c0:	2b00      	cmp	r3, #0
 80007c2:	d0f0      	beq.n	80007a6 <VL53L1X_SensorInit+0x5a>
	}
	status |= VL53L1X_ClearInterrupt(dev);
 80007c4:	88fb      	ldrh	r3, [r7, #6]
 80007c6:	4618      	mov	r0, r3
 80007c8:	f000 f82c 	bl	8000824 <VL53L1X_ClearInterrupt>
 80007cc:	4603      	mov	r3, r0
 80007ce:	461a      	mov	r2, r3
 80007d0:	7bfb      	ldrb	r3, [r7, #15]
 80007d2:	4313      	orrs	r3, r2
 80007d4:	73fb      	strb	r3, [r7, #15]
	status |= VL53L1X_StopRanging(dev);
 80007d6:	88fb      	ldrh	r3, [r7, #6]
 80007d8:	4618      	mov	r0, r3
 80007da:	f000 f87d 	bl	80008d8 <VL53L1X_StopRanging>
 80007de:	4603      	mov	r3, r0
 80007e0:	461a      	mov	r2, r3
 80007e2:	7bfb      	ldrb	r3, [r7, #15]
 80007e4:	4313      	orrs	r3, r2
 80007e6:	73fb      	strb	r3, [r7, #15]
	status |= VL53L1_WrByte(dev, VL53L1_VHV_CONFIG__TIMEOUT_MACROP_LOOP_BOUND, 0x09); /* two bounds VHV */
 80007e8:	88fb      	ldrh	r3, [r7, #6]
 80007ea:	2209      	movs	r2, #9
 80007ec:	2108      	movs	r1, #8
 80007ee:	4618      	mov	r0, r3
 80007f0:	f000 fe0a 	bl	8001408 <VL53L1_WrByte>
 80007f4:	4603      	mov	r3, r0
 80007f6:	461a      	mov	r2, r3
 80007f8:	7bfb      	ldrb	r3, [r7, #15]
 80007fa:	4313      	orrs	r3, r2
 80007fc:	73fb      	strb	r3, [r7, #15]
	status |= VL53L1_WrByte(dev, 0x0B, 0); /* start VHV from the previous temperature */
 80007fe:	88fb      	ldrh	r3, [r7, #6]
 8000800:	2200      	movs	r2, #0
 8000802:	210b      	movs	r1, #11
 8000804:	4618      	mov	r0, r3
 8000806:	f000 fdff 	bl	8001408 <VL53L1_WrByte>
 800080a:	4603      	mov	r3, r0
 800080c:	461a      	mov	r2, r3
 800080e:	7bfb      	ldrb	r3, [r7, #15]
 8000810:	4313      	orrs	r3, r2
 8000812:	73fb      	strb	r3, [r7, #15]
	return status;
 8000814:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8000818:	4618      	mov	r0, r3
 800081a:	3710      	adds	r7, #16
 800081c:	46bd      	mov	sp, r7
 800081e:	bd80      	pop	{r7, pc}
 8000820:	080055dc 	.word	0x080055dc

08000824 <VL53L1X_ClearInterrupt>:

VL53L1X_ERROR VL53L1X_ClearInterrupt(uint16_t dev)
{
 8000824:	b580      	push	{r7, lr}
 8000826:	b084      	sub	sp, #16
 8000828:	af00      	add	r7, sp, #0
 800082a:	4603      	mov	r3, r0
 800082c:	80fb      	strh	r3, [r7, #6]
	VL53L1X_ERROR status = 0;
 800082e:	2300      	movs	r3, #0
 8000830:	73fb      	strb	r3, [r7, #15]

	status |= VL53L1_WrByte(dev, SYSTEM__INTERRUPT_CLEAR, 0x01);
 8000832:	88fb      	ldrh	r3, [r7, #6]
 8000834:	2201      	movs	r2, #1
 8000836:	2186      	movs	r1, #134	; 0x86
 8000838:	4618      	mov	r0, r3
 800083a:	f000 fde5 	bl	8001408 <VL53L1_WrByte>
 800083e:	4603      	mov	r3, r0
 8000840:	461a      	mov	r2, r3
 8000842:	7bfb      	ldrb	r3, [r7, #15]
 8000844:	4313      	orrs	r3, r2
 8000846:	73fb      	strb	r3, [r7, #15]
	return status;
 8000848:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800084c:	4618      	mov	r0, r3
 800084e:	3710      	adds	r7, #16
 8000850:	46bd      	mov	sp, r7
 8000852:	bd80      	pop	{r7, pc}

08000854 <VL53L1X_GetInterruptPolarity>:
	status |= VL53L1_WrByte(dev, GPIO_HV_MUX__CTRL, Temp | (!(NewPolarity & 1)) << 4);
	return status;
}

VL53L1X_ERROR VL53L1X_GetInterruptPolarity(uint16_t dev, uint8_t *pInterruptPolarity)
{
 8000854:	b580      	push	{r7, lr}
 8000856:	b084      	sub	sp, #16
 8000858:	af00      	add	r7, sp, #0
 800085a:	4603      	mov	r3, r0
 800085c:	6039      	str	r1, [r7, #0]
 800085e:	80fb      	strh	r3, [r7, #6]
	uint8_t Temp;
	VL53L1X_ERROR status = 0;
 8000860:	2300      	movs	r3, #0
 8000862:	73fb      	strb	r3, [r7, #15]

	status |= VL53L1_RdByte(dev, GPIO_HV_MUX__CTRL, &Temp);
 8000864:	f107 020e 	add.w	r2, r7, #14
 8000868:	88fb      	ldrh	r3, [r7, #6]
 800086a:	2130      	movs	r1, #48	; 0x30
 800086c:	4618      	mov	r0, r3
 800086e:	f000 fdf7 	bl	8001460 <VL53L1_RdByte>
 8000872:	4603      	mov	r3, r0
 8000874:	461a      	mov	r2, r3
 8000876:	7bfb      	ldrb	r3, [r7, #15]
 8000878:	4313      	orrs	r3, r2
 800087a:	73fb      	strb	r3, [r7, #15]
	Temp = Temp & 0x10;
 800087c:	7bbb      	ldrb	r3, [r7, #14]
 800087e:	f003 0310 	and.w	r3, r3, #16
 8000882:	b2db      	uxtb	r3, r3
 8000884:	73bb      	strb	r3, [r7, #14]
	*pInterruptPolarity = !(Temp>>4);
 8000886:	7bbb      	ldrb	r3, [r7, #14]
 8000888:	091b      	lsrs	r3, r3, #4
 800088a:	b2db      	uxtb	r3, r3
 800088c:	2b00      	cmp	r3, #0
 800088e:	bf0c      	ite	eq
 8000890:	2301      	moveq	r3, #1
 8000892:	2300      	movne	r3, #0
 8000894:	b2db      	uxtb	r3, r3
 8000896:	461a      	mov	r2, r3
 8000898:	683b      	ldr	r3, [r7, #0]
 800089a:	701a      	strb	r2, [r3, #0]
	return status;
 800089c:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80008a0:	4618      	mov	r0, r3
 80008a2:	3710      	adds	r7, #16
 80008a4:	46bd      	mov	sp, r7
 80008a6:	bd80      	pop	{r7, pc}

080008a8 <VL53L1X_StartRanging>:

VL53L1X_ERROR VL53L1X_StartRanging(uint16_t dev)
{
 80008a8:	b580      	push	{r7, lr}
 80008aa:	b084      	sub	sp, #16
 80008ac:	af00      	add	r7, sp, #0
 80008ae:	4603      	mov	r3, r0
 80008b0:	80fb      	strh	r3, [r7, #6]
	VL53L1X_ERROR status = 0;
 80008b2:	2300      	movs	r3, #0
 80008b4:	73fb      	strb	r3, [r7, #15]

	status |= VL53L1_WrByte(dev, SYSTEM__MODE_START, 0x40);	/* Enable VL53L1X */
 80008b6:	88fb      	ldrh	r3, [r7, #6]
 80008b8:	2240      	movs	r2, #64	; 0x40
 80008ba:	2187      	movs	r1, #135	; 0x87
 80008bc:	4618      	mov	r0, r3
 80008be:	f000 fda3 	bl	8001408 <VL53L1_WrByte>
 80008c2:	4603      	mov	r3, r0
 80008c4:	461a      	mov	r2, r3
 80008c6:	7bfb      	ldrb	r3, [r7, #15]
 80008c8:	4313      	orrs	r3, r2
 80008ca:	73fb      	strb	r3, [r7, #15]
	return status;
 80008cc:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80008d0:	4618      	mov	r0, r3
 80008d2:	3710      	adds	r7, #16
 80008d4:	46bd      	mov	sp, r7
 80008d6:	bd80      	pop	{r7, pc}

080008d8 <VL53L1X_StopRanging>:

VL53L1X_ERROR VL53L1X_StopRanging(uint16_t dev)
{
 80008d8:	b580      	push	{r7, lr}
 80008da:	b084      	sub	sp, #16
 80008dc:	af00      	add	r7, sp, #0
 80008de:	4603      	mov	r3, r0
 80008e0:	80fb      	strh	r3, [r7, #6]
	VL53L1X_ERROR status = 0;
 80008e2:	2300      	movs	r3, #0
 80008e4:	73fb      	strb	r3, [r7, #15]

	status |= VL53L1_WrByte(dev, SYSTEM__MODE_START, 0x00);	/* Disable VL53L1X */
 80008e6:	88fb      	ldrh	r3, [r7, #6]
 80008e8:	2200      	movs	r2, #0
 80008ea:	2187      	movs	r1, #135	; 0x87
 80008ec:	4618      	mov	r0, r3
 80008ee:	f000 fd8b 	bl	8001408 <VL53L1_WrByte>
 80008f2:	4603      	mov	r3, r0
 80008f4:	461a      	mov	r2, r3
 80008f6:	7bfb      	ldrb	r3, [r7, #15]
 80008f8:	4313      	orrs	r3, r2
 80008fa:	73fb      	strb	r3, [r7, #15]
	return status;
 80008fc:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8000900:	4618      	mov	r0, r3
 8000902:	3710      	adds	r7, #16
 8000904:	46bd      	mov	sp, r7
 8000906:	bd80      	pop	{r7, pc}

08000908 <VL53L1X_CheckForDataReady>:

VL53L1X_ERROR VL53L1X_CheckForDataReady(uint16_t dev, uint8_t *isDataReady)
{
 8000908:	b580      	push	{r7, lr}
 800090a:	b084      	sub	sp, #16
 800090c:	af00      	add	r7, sp, #0
 800090e:	4603      	mov	r3, r0
 8000910:	6039      	str	r1, [r7, #0]
 8000912:	80fb      	strh	r3, [r7, #6]
	uint8_t Temp;
	uint8_t IntPol;
	VL53L1X_ERROR status = 0;
 8000914:	2300      	movs	r3, #0
 8000916:	73fb      	strb	r3, [r7, #15]

	status |= VL53L1X_GetInterruptPolarity(dev, &IntPol);
 8000918:	f107 020d 	add.w	r2, r7, #13
 800091c:	88fb      	ldrh	r3, [r7, #6]
 800091e:	4611      	mov	r1, r2
 8000920:	4618      	mov	r0, r3
 8000922:	f7ff ff97 	bl	8000854 <VL53L1X_GetInterruptPolarity>
 8000926:	4603      	mov	r3, r0
 8000928:	461a      	mov	r2, r3
 800092a:	7bfb      	ldrb	r3, [r7, #15]
 800092c:	4313      	orrs	r3, r2
 800092e:	73fb      	strb	r3, [r7, #15]
	status |= VL53L1_RdByte(dev, GPIO__TIO_HV_STATUS, &Temp);
 8000930:	f107 020e 	add.w	r2, r7, #14
 8000934:	88fb      	ldrh	r3, [r7, #6]
 8000936:	2131      	movs	r1, #49	; 0x31
 8000938:	4618      	mov	r0, r3
 800093a:	f000 fd91 	bl	8001460 <VL53L1_RdByte>
 800093e:	4603      	mov	r3, r0
 8000940:	461a      	mov	r2, r3
 8000942:	7bfb      	ldrb	r3, [r7, #15]
 8000944:	4313      	orrs	r3, r2
 8000946:	73fb      	strb	r3, [r7, #15]
	/* Read in the register to check if a new value is available */
	if (status == 0){
 8000948:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800094c:	2b00      	cmp	r3, #0
 800094e:	d10c      	bne.n	800096a <VL53L1X_CheckForDataReady+0x62>
		if ((Temp & 1) == IntPol)
 8000950:	7bbb      	ldrb	r3, [r7, #14]
 8000952:	f003 0301 	and.w	r3, r3, #1
 8000956:	7b7a      	ldrb	r2, [r7, #13]
 8000958:	4293      	cmp	r3, r2
 800095a:	d103      	bne.n	8000964 <VL53L1X_CheckForDataReady+0x5c>
			*isDataReady = 1;
 800095c:	683b      	ldr	r3, [r7, #0]
 800095e:	2201      	movs	r2, #1
 8000960:	701a      	strb	r2, [r3, #0]
 8000962:	e002      	b.n	800096a <VL53L1X_CheckForDataReady+0x62>
		else
			*isDataReady = 0;
 8000964:	683b      	ldr	r3, [r7, #0]
 8000966:	2200      	movs	r2, #0
 8000968:	701a      	strb	r2, [r3, #0]
	}
	return status;
 800096a:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800096e:	4618      	mov	r0, r3
 8000970:	3710      	adds	r7, #16
 8000972:	46bd      	mov	sp, r7
 8000974:	bd80      	pop	{r7, pc}

08000976 <VL53L1X_GetSensorId>:
	*state = tmp;
	return status;
}

VL53L1X_ERROR VL53L1X_GetSensorId(uint16_t dev, uint16_t *sensorId)
{
 8000976:	b580      	push	{r7, lr}
 8000978:	b084      	sub	sp, #16
 800097a:	af00      	add	r7, sp, #0
 800097c:	4603      	mov	r3, r0
 800097e:	6039      	str	r1, [r7, #0]
 8000980:	80fb      	strh	r3, [r7, #6]
	VL53L1X_ERROR status = 0;
 8000982:	2300      	movs	r3, #0
 8000984:	73fb      	strb	r3, [r7, #15]
	uint16_t tmp = 0;
 8000986:	2300      	movs	r3, #0
 8000988:	81bb      	strh	r3, [r7, #12]

	status |= VL53L1_RdWord(dev, VL53L1_IDENTIFICATION__MODEL_ID, &tmp);
 800098a:	f107 020c 	add.w	r2, r7, #12
 800098e:	88fb      	ldrh	r3, [r7, #6]
 8000990:	f240 110f 	movw	r1, #271	; 0x10f
 8000994:	4618      	mov	r0, r3
 8000996:	f000 fd9b 	bl	80014d0 <VL53L1_RdWord>
 800099a:	4603      	mov	r3, r0
 800099c:	461a      	mov	r2, r3
 800099e:	7bfb      	ldrb	r3, [r7, #15]
 80009a0:	4313      	orrs	r3, r2
 80009a2:	73fb      	strb	r3, [r7, #15]
	*sensorId = tmp;
 80009a4:	89ba      	ldrh	r2, [r7, #12]
 80009a6:	683b      	ldr	r3, [r7, #0]
 80009a8:	801a      	strh	r2, [r3, #0]
	return status;
 80009aa:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80009ae:	4618      	mov	r0, r3
 80009b0:	3710      	adds	r7, #16
 80009b2:	46bd      	mov	sp, r7
 80009b4:	bd80      	pop	{r7, pc}
	...

080009b8 <update_display>:
      }
    }
  }
}

void update_display() {
 80009b8:	b580      	push	{r7, lr}
 80009ba:	b084      	sub	sp, #16
 80009bc:	af00      	add	r7, sp, #0
  ssd1306_Fill(Black);
 80009be:	2000      	movs	r0, #0
 80009c0:	f000 fe94 	bl	80016ec <ssd1306_Fill>
  if (state == STATE_MENU) {
 80009c4:	4b33      	ldr	r3, [pc, #204]	; (8000a94 <update_display+0xdc>)
 80009c6:	781b      	ldrb	r3, [r3, #0]
 80009c8:	2b01      	cmp	r3, #1
 80009ca:	d137      	bne.n	8000a3c <update_display+0x84>
    for (int i = 0; i < sizeof(settings) / sizeof(settings[0]); i++) {
 80009cc:	2300      	movs	r3, #0
 80009ce:	60fb      	str	r3, [r7, #12]
 80009d0:	e030      	b.n	8000a34 <update_display+0x7c>
      ssd1306_SetCursor(2, 10 + 12 * i);
 80009d2:	68fb      	ldr	r3, [r7, #12]
 80009d4:	b2db      	uxtb	r3, r3
 80009d6:	461a      	mov	r2, r3
 80009d8:	0052      	lsls	r2, r2, #1
 80009da:	4413      	add	r3, r2
 80009dc:	009b      	lsls	r3, r3, #2
 80009de:	b2db      	uxtb	r3, r3
 80009e0:	330a      	adds	r3, #10
 80009e2:	b2db      	uxtb	r3, r3
 80009e4:	4619      	mov	r1, r3
 80009e6:	2002      	movs	r0, #2
 80009e8:	f000 ffce 	bl	8001988 <ssd1306_SetCursor>
      if (i == setting_index) {
 80009ec:	4b2a      	ldr	r3, [pc, #168]	; (8000a98 <update_display+0xe0>)
 80009ee:	681b      	ldr	r3, [r3, #0]
 80009f0:	68fa      	ldr	r2, [r7, #12]
 80009f2:	429a      	cmp	r2, r3
 80009f4:	d105      	bne.n	8000a02 <update_display+0x4a>
        ssd1306_WriteString(">", Font_7x10, White);
 80009f6:	4a29      	ldr	r2, [pc, #164]	; (8000a9c <update_display+0xe4>)
 80009f8:	2301      	movs	r3, #1
 80009fa:	ca06      	ldmia	r2, {r1, r2}
 80009fc:	4828      	ldr	r0, [pc, #160]	; (8000aa0 <update_display+0xe8>)
 80009fe:	f000 ff9d 	bl	800193c <ssd1306_WriteString>
      }
      ssd1306_SetCursor(20, 10 + 12 * i);
 8000a02:	68fb      	ldr	r3, [r7, #12]
 8000a04:	b2db      	uxtb	r3, r3
 8000a06:	461a      	mov	r2, r3
 8000a08:	0052      	lsls	r2, r2, #1
 8000a0a:	4413      	add	r3, r2
 8000a0c:	009b      	lsls	r3, r3, #2
 8000a0e:	b2db      	uxtb	r3, r3
 8000a10:	330a      	adds	r3, #10
 8000a12:	b2db      	uxtb	r3, r3
 8000a14:	4619      	mov	r1, r3
 8000a16:	2014      	movs	r0, #20
 8000a18:	f000 ffb6 	bl	8001988 <ssd1306_SetCursor>
      ssd1306_WriteString(settings[i], Font_7x10, White);
 8000a1c:	4a21      	ldr	r2, [pc, #132]	; (8000aa4 <update_display+0xec>)
 8000a1e:	68fb      	ldr	r3, [r7, #12]
 8000a20:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8000a24:	4a1d      	ldr	r2, [pc, #116]	; (8000a9c <update_display+0xe4>)
 8000a26:	2301      	movs	r3, #1
 8000a28:	ca06      	ldmia	r2, {r1, r2}
 8000a2a:	f000 ff87 	bl	800193c <ssd1306_WriteString>
    for (int i = 0; i < sizeof(settings) / sizeof(settings[0]); i++) {
 8000a2e:	68fb      	ldr	r3, [r7, #12]
 8000a30:	3301      	adds	r3, #1
 8000a32:	60fb      	str	r3, [r7, #12]
 8000a34:	68fb      	ldr	r3, [r7, #12]
 8000a36:	2b02      	cmp	r3, #2
 8000a38:	d9cb      	bls.n	80009d2 <update_display+0x1a>
 8000a3a:	e025      	b.n	8000a88 <update_display+0xd0>
    }
  } else if (state == STATE_SETTING) {
 8000a3c:	4b15      	ldr	r3, [pc, #84]	; (8000a94 <update_display+0xdc>)
 8000a3e:	781b      	ldrb	r3, [r3, #0]
 8000a40:	2b02      	cmp	r3, #2
 8000a42:	d121      	bne.n	8000a88 <update_display+0xd0>
    ssd1306_SetCursor(2, 10);
 8000a44:	210a      	movs	r1, #10
 8000a46:	2002      	movs	r0, #2
 8000a48:	f000 ff9e 	bl	8001988 <ssd1306_SetCursor>
    ssd1306_WriteString(settings[setting_index], Font_7x10, White);
 8000a4c:	4b12      	ldr	r3, [pc, #72]	; (8000a98 <update_display+0xe0>)
 8000a4e:	681b      	ldr	r3, [r3, #0]
 8000a50:	4a14      	ldr	r2, [pc, #80]	; (8000aa4 <update_display+0xec>)
 8000a52:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8000a56:	4a11      	ldr	r2, [pc, #68]	; (8000a9c <update_display+0xe4>)
 8000a58:	2301      	movs	r3, #1
 8000a5a:	ca06      	ldmia	r2, {r1, r2}
 8000a5c:	f000 ff6e 	bl	800193c <ssd1306_WriteString>
    ssd1306_SetCursor(2, 22);
 8000a60:	2116      	movs	r1, #22
 8000a62:	2002      	movs	r0, #2
 8000a64:	f000 ff90 	bl	8001988 <ssd1306_SetCursor>
    char buf[10];
    sprintf(buf, "%d", settings_values[setting_index]);
 8000a68:	4b0b      	ldr	r3, [pc, #44]	; (8000a98 <update_display+0xe0>)
 8000a6a:	681b      	ldr	r3, [r3, #0]
 8000a6c:	4a0e      	ldr	r2, [pc, #56]	; (8000aa8 <update_display+0xf0>)
 8000a6e:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000a72:	463b      	mov	r3, r7
 8000a74:	490d      	ldr	r1, [pc, #52]	; (8000aac <update_display+0xf4>)
 8000a76:	4618      	mov	r0, r3
 8000a78:	f004 f8d2 	bl	8004c20 <siprintf>
    ssd1306_WriteString(buf, Font_7x10, White);
 8000a7c:	4a07      	ldr	r2, [pc, #28]	; (8000a9c <update_display+0xe4>)
 8000a7e:	4638      	mov	r0, r7
 8000a80:	2301      	movs	r3, #1
 8000a82:	ca06      	ldmia	r2, {r1, r2}
 8000a84:	f000 ff5a 	bl	800193c <ssd1306_WriteString>
  }
  ssd1306_UpdateScreen();
 8000a88:	f000 fe54 	bl	8001734 <ssd1306_UpdateScreen>
}
 8000a8c:	bf00      	nop
 8000a8e:	3710      	adds	r7, #16
 8000a90:	46bd      	mov	sp, r7
 8000a92:	bd80      	pop	{r7, pc}
 8000a94:	2000026e 	.word	0x2000026e
 8000a98:	20000270 	.word	0x20000270
 8000a9c:	20000010 	.word	0x20000010
 8000aa0:	08005538 	.word	0x08005538
 8000aa4:	20000000 	.word	0x20000000
 8000aa8:	20000274 	.word	0x20000274
 8000aac:	0800553c 	.word	0x0800553c

08000ab0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000ab0:	b580      	push	{r7, lr}
 8000ab2:	b084      	sub	sp, #16
 8000ab4:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000ab6:	f001 fa6d 	bl	8001f94 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000aba:	f000 f8b9 	bl	8000c30 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000abe:	f000 f9fd 	bl	8000ebc <MX_GPIO_Init>
  MX_SPI2_Init();
 8000ac2:	f000 f94d 	bl	8000d60 <MX_SPI2_Init>
  MX_USART2_UART_Init();
 8000ac6:	f000 f9a5 	bl	8000e14 <MX_USART2_UART_Init>
  MX_USART6_UART_Init();
 8000aca:	f000 f9cd 	bl	8000e68 <MX_USART6_UART_Init>
  MX_I2C3_Init();
 8000ace:	f000 f919 	bl	8000d04 <MX_I2C3_Init>
  MX_TIM10_Init();
 8000ad2:	f000 f97b 	bl	8000dcc <MX_TIM10_Init>
  /* USER CODE BEGIN 2 */
//    uint32_t uint_offset = (uint32_t)offset;
//    int numofwords = (strlen(offset)/4)+((strlen(offset)%4)!=0);
	HAL_TIM_Base_Start(&htim10);
 8000ad6:	4845      	ldr	r0, [pc, #276]	; (8000bec <main+0x13c>)
 8000ad8:	f003 fbcc 	bl	8004274 <HAL_TIM_Base_Start>
	/* USER CODE END 2 */
	timer_val = __HAL_TIM_GET_COUNTER(&htim10);
 8000adc:	4b43      	ldr	r3, [pc, #268]	; (8000bec <main+0x13c>)
 8000ade:	681b      	ldr	r3, [r3, #0]
 8000ae0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000ae2:	b29a      	uxth	r2, r3
 8000ae4:	4b42      	ldr	r3, [pc, #264]	; (8000bf0 <main+0x140>)
 8000ae6:	801a      	strh	r2, [r3, #0]

	sprintf(rs232_1, "|0  60\r\n");
 8000ae8:	4942      	ldr	r1, [pc, #264]	; (8000bf4 <main+0x144>)
 8000aea:	4843      	ldr	r0, [pc, #268]	; (8000bf8 <main+0x148>)
 8000aec:	f004 f898 	bl	8004c20 <siprintf>

	sprintf(rs232_2, "|1 187\r\n");
 8000af0:	4942      	ldr	r1, [pc, #264]	; (8000bfc <main+0x14c>)
 8000af2:	4843      	ldr	r0, [pc, #268]	; (8000c00 <main+0x150>)
 8000af4:	f004 f894 	bl	8004c20 <siprintf>
//	sprintf(rs232_2, "|1 021\r\n");

	HAL_Delay(100);
 8000af8:	2064      	movs	r0, #100	; 0x64
 8000afa:	f001 fabd 	bl	8002078 <HAL_Delay>
	HAL_UART_Transmit(&huart2, (uint8_t*) rs232_1, strlen(rs232_1),
 8000afe:	483e      	ldr	r0, [pc, #248]	; (8000bf8 <main+0x148>)
 8000b00:	f7ff fb6e 	bl	80001e0 <strlen>
 8000b04:	4603      	mov	r3, r0
 8000b06:	b29a      	uxth	r2, r3
 8000b08:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000b0c:	493a      	ldr	r1, [pc, #232]	; (8000bf8 <main+0x148>)
 8000b0e:	483d      	ldr	r0, [pc, #244]	; (8000c04 <main+0x154>)
 8000b10:	f003 fcd7 	bl	80044c2 <HAL_UART_Transmit>
	HAL_MAX_DELAY);
	HAL_Delay(100);
 8000b14:	2064      	movs	r0, #100	; 0x64
 8000b16:	f001 faaf 	bl	8002078 <HAL_Delay>
	HAL_UART_Transmit(&huart2, (uint8_t*) rs232_2, strlen(rs232_2),
 8000b1a:	4839      	ldr	r0, [pc, #228]	; (8000c00 <main+0x150>)
 8000b1c:	f7ff fb60 	bl	80001e0 <strlen>
 8000b20:	4603      	mov	r3, r0
 8000b22:	b29a      	uxth	r2, r3
 8000b24:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000b28:	4935      	ldr	r1, [pc, #212]	; (8000c00 <main+0x150>)
 8000b2a:	4836      	ldr	r0, [pc, #216]	; (8000c04 <main+0x154>)
 8000b2c:	f003 fcc9 	bl	80044c2 <HAL_UART_Transmit>
	HAL_MAX_DELAY);

	ssd1306_Init();
 8000b30:	f000 fd72 	bl	8001618 <ssd1306_Init>
	ssd1306_WriteCommand(0xC0);
 8000b34:	20c0      	movs	r0, #192	; 0xc0
 8000b36:	f000 fd3d 	bl	80015b4 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0xA0);
 8000b3a:	20a0      	movs	r0, #160	; 0xa0
 8000b3c:	f000 fd3a 	bl	80015b4 <ssd1306_WriteCommand>
	LogoAnimation();
 8000b40:	f000 ffc6 	bl	8001ad0 <LogoAnimation>

	TOF_InitStruct(&sensor1, &hi2c3, 0x32, XSHUT_GPIO_Port, XSHUT_GPIO_Pin);
 8000b44:	2308      	movs	r3, #8
 8000b46:	9300      	str	r3, [sp, #0]
 8000b48:	4b2f      	ldr	r3, [pc, #188]	; (8000c08 <main+0x158>)
 8000b4a:	2232      	movs	r2, #50	; 0x32
 8000b4c:	492f      	ldr	r1, [pc, #188]	; (8000c0c <main+0x15c>)
 8000b4e:	4830      	ldr	r0, [pc, #192]	; (8000c10 <main+0x160>)
 8000b50:	f7ff fd20 	bl	8000594 <TOF_InitStruct>
	TOF_InitStruct(&sensor2, &hi2c3, 0x52, XSHUT2_GPIO_Port, XSHUT2_GPIO_Pin);
 8000b54:	2309      	movs	r3, #9
 8000b56:	9300      	str	r3, [sp, #0]
 8000b58:	4b2b      	ldr	r3, [pc, #172]	; (8000c08 <main+0x158>)
 8000b5a:	2252      	movs	r2, #82	; 0x52
 8000b5c:	492b      	ldr	r1, [pc, #172]	; (8000c0c <main+0x15c>)
 8000b5e:	482d      	ldr	r0, [pc, #180]	; (8000c14 <main+0x164>)
 8000b60:	f7ff fd18 	bl	8000594 <TOF_InitStruct>

	VL53L1X* sensors[] = {&sensor1, &sensor2};
 8000b64:	4a2c      	ldr	r2, [pc, #176]	; (8000c18 <main+0x168>)
 8000b66:	463b      	mov	r3, r7
 8000b68:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000b6c:	e883 0003 	stmia.w	r3, {r0, r1}
	TOF_BootMultipleSensors(sensors, 2);
 8000b70:	463b      	mov	r3, r7
 8000b72:	2102      	movs	r1, #2
 8000b74:	4618      	mov	r0, r3
 8000b76:	f7ff fd53 	bl	8000620 <TOF_BootMultipleSensors>
	/* USER CODE END 2 */

	/* Infinite loop */
	/* USER CODE BEGIN WHILE */

	temp_d = 0;
 8000b7a:	4b28      	ldr	r3, [pc, #160]	; (8000c1c <main+0x16c>)
 8000b7c:	2200      	movs	r2, #0
 8000b7e:	801a      	strh	r2, [r3, #0]
	prev_button_state = button_state;
 8000b80:	4b27      	ldr	r3, [pc, #156]	; (8000c20 <main+0x170>)
 8000b82:	781a      	ldrb	r2, [r3, #0]
 8000b84:	4b27      	ldr	r3, [pc, #156]	; (8000c24 <main+0x174>)
 8000b86:	701a      	strb	r2, [r3, #0]
//		process_distance();
//		print_distance();
//		read_data_VL53L1();
//		Offset_write_to_flash(offset);

		if (event == EVENT_BUTTON_SHORT_PRESS) {
 8000b88:	4b27      	ldr	r3, [pc, #156]	; (8000c28 <main+0x178>)
 8000b8a:	781b      	ldrb	r3, [r3, #0]
 8000b8c:	2b01      	cmp	r3, #1
 8000b8e:	d11c      	bne.n	8000bca <main+0x11a>
		      if (state == STATE_IDLE) {
 8000b90:	4b26      	ldr	r3, [pc, #152]	; (8000c2c <main+0x17c>)
 8000b92:	781b      	ldrb	r3, [r3, #0]
 8000b94:	2b00      	cmp	r3, #0
 8000b96:	d103      	bne.n	8000ba0 <main+0xf0>
		        state = STATE_MENU;
 8000b98:	4b24      	ldr	r3, [pc, #144]	; (8000c2c <main+0x17c>)
 8000b9a:	2201      	movs	r2, #1
 8000b9c:	701a      	strb	r2, [r3, #0]
 8000b9e:	e00e      	b.n	8000bbe <main+0x10e>
		      } else if (state == STATE_MENU) {
 8000ba0:	4b22      	ldr	r3, [pc, #136]	; (8000c2c <main+0x17c>)
 8000ba2:	781b      	ldrb	r3, [r3, #0]
 8000ba4:	2b01      	cmp	r3, #1
 8000ba6:	d103      	bne.n	8000bb0 <main+0x100>
		        state = STATE_SETTING;
 8000ba8:	4b20      	ldr	r3, [pc, #128]	; (8000c2c <main+0x17c>)
 8000baa:	2202      	movs	r2, #2
 8000bac:	701a      	strb	r2, [r3, #0]
 8000bae:	e006      	b.n	8000bbe <main+0x10e>
		      } else if (state == STATE_SETTING) {
 8000bb0:	4b1e      	ldr	r3, [pc, #120]	; (8000c2c <main+0x17c>)
 8000bb2:	781b      	ldrb	r3, [r3, #0]
 8000bb4:	2b02      	cmp	r3, #2
 8000bb6:	d102      	bne.n	8000bbe <main+0x10e>
		        state = STATE_MENU;
 8000bb8:	4b1c      	ldr	r3, [pc, #112]	; (8000c2c <main+0x17c>)
 8000bba:	2201      	movs	r2, #1
 8000bbc:	701a      	strb	r2, [r3, #0]
		      }
		      update_display();
 8000bbe:	f7ff fefb 	bl	80009b8 <update_display>
		      event = EVENT_NONE;
 8000bc2:	4b19      	ldr	r3, [pc, #100]	; (8000c28 <main+0x178>)
 8000bc4:	2200      	movs	r2, #0
 8000bc6:	701a      	strb	r2, [r3, #0]
 8000bc8:	e7de      	b.n	8000b88 <main+0xd8>
		    } else if (event == EVENT_BUTTON_LONG_PRESS) {
 8000bca:	4b17      	ldr	r3, [pc, #92]	; (8000c28 <main+0x178>)
 8000bcc:	781b      	ldrb	r3, [r3, #0]
 8000bce:	2b02      	cmp	r3, #2
 8000bd0:	d1da      	bne.n	8000b88 <main+0xd8>
		      if (state == STATE_MENU) {
 8000bd2:	4b16      	ldr	r3, [pc, #88]	; (8000c2c <main+0x17c>)
 8000bd4:	781b      	ldrb	r3, [r3, #0]
 8000bd6:	2b01      	cmp	r3, #1
 8000bd8:	d102      	bne.n	8000be0 <main+0x130>
		        state = STATE_IDLE;
 8000bda:	4b14      	ldr	r3, [pc, #80]	; (8000c2c <main+0x17c>)
 8000bdc:	2200      	movs	r2, #0
 8000bde:	701a      	strb	r2, [r3, #0]
		      }
		      update_display();
 8000be0:	f7ff feea 	bl	80009b8 <update_display>
		      event = EVENT_NONE;
 8000be4:	4b10      	ldr	r3, [pc, #64]	; (8000c28 <main+0x178>)
 8000be6:	2200      	movs	r2, #0
 8000be8:	701a      	strb	r2, [r3, #0]
		if (event == EVENT_BUTTON_SHORT_PRESS) {
 8000bea:	e7cd      	b.n	8000b88 <main+0xd8>
 8000bec:	20000170 	.word	0x20000170
 8000bf0:	2000026a 	.word	0x2000026a
 8000bf4:	080055bc 	.word	0x080055bc
 8000bf8:	20000240 	.word	0x20000240
 8000bfc:	080055c8 	.word	0x080055c8
 8000c00:	20000254 	.word	0x20000254
 8000c04:	200001b8 	.word	0x200001b8
 8000c08:	40020400 	.word	0x40020400
 8000c0c:	200000c4 	.word	0x200000c4
 8000c10:	200000a4 	.word	0x200000a4
 8000c14:	200000b4 	.word	0x200000b4
 8000c18:	080055d4 	.word	0x080055d4
 8000c1c:	20000268 	.word	0x20000268
 8000c20:	2000026c 	.word	0x2000026c
 8000c24:	2000026d 	.word	0x2000026d
 8000c28:	2000026f 	.word	0x2000026f
 8000c2c:	2000026e 	.word	0x2000026e

08000c30 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000c30:	b580      	push	{r7, lr}
 8000c32:	b094      	sub	sp, #80	; 0x50
 8000c34:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000c36:	f107 0320 	add.w	r3, r7, #32
 8000c3a:	2230      	movs	r2, #48	; 0x30
 8000c3c:	2100      	movs	r1, #0
 8000c3e:	4618      	mov	r0, r3
 8000c40:	f003 ffe6 	bl	8004c10 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000c44:	f107 030c 	add.w	r3, r7, #12
 8000c48:	2200      	movs	r2, #0
 8000c4a:	601a      	str	r2, [r3, #0]
 8000c4c:	605a      	str	r2, [r3, #4]
 8000c4e:	609a      	str	r2, [r3, #8]
 8000c50:	60da      	str	r2, [r3, #12]
 8000c52:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000c54:	2300      	movs	r3, #0
 8000c56:	60bb      	str	r3, [r7, #8]
 8000c58:	4b28      	ldr	r3, [pc, #160]	; (8000cfc <SystemClock_Config+0xcc>)
 8000c5a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c5c:	4a27      	ldr	r2, [pc, #156]	; (8000cfc <SystemClock_Config+0xcc>)
 8000c5e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000c62:	6413      	str	r3, [r2, #64]	; 0x40
 8000c64:	4b25      	ldr	r3, [pc, #148]	; (8000cfc <SystemClock_Config+0xcc>)
 8000c66:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c68:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000c6c:	60bb      	str	r3, [r7, #8]
 8000c6e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8000c70:	2300      	movs	r3, #0
 8000c72:	607b      	str	r3, [r7, #4]
 8000c74:	4b22      	ldr	r3, [pc, #136]	; (8000d00 <SystemClock_Config+0xd0>)
 8000c76:	681b      	ldr	r3, [r3, #0]
 8000c78:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000c7c:	4a20      	ldr	r2, [pc, #128]	; (8000d00 <SystemClock_Config+0xd0>)
 8000c7e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000c82:	6013      	str	r3, [r2, #0]
 8000c84:	4b1e      	ldr	r3, [pc, #120]	; (8000d00 <SystemClock_Config+0xd0>)
 8000c86:	681b      	ldr	r3, [r3, #0]
 8000c88:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000c8c:	607b      	str	r3, [r7, #4]
 8000c8e:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000c90:	2302      	movs	r3, #2
 8000c92:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000c94:	2301      	movs	r3, #1
 8000c96:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000c98:	2310      	movs	r3, #16
 8000c9a:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000c9c:	2302      	movs	r3, #2
 8000c9e:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000ca0:	2300      	movs	r3, #0
 8000ca2:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000ca4:	2308      	movs	r3, #8
 8000ca6:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 84;
 8000ca8:	2354      	movs	r3, #84	; 0x54
 8000caa:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000cac:	2302      	movs	r3, #2
 8000cae:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000cb0:	2304      	movs	r3, #4
 8000cb2:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000cb4:	f107 0320 	add.w	r3, r7, #32
 8000cb8:	4618      	mov	r0, r3
 8000cba:	f002 fdab 	bl	8003814 <HAL_RCC_OscConfig>
 8000cbe:	4603      	mov	r3, r0
 8000cc0:	2b00      	cmp	r3, #0
 8000cc2:	d001      	beq.n	8000cc8 <SystemClock_Config+0x98>
  {
    Error_Handler();
 8000cc4:	f000 f988 	bl	8000fd8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000cc8:	230f      	movs	r3, #15
 8000cca:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000ccc:	2302      	movs	r3, #2
 8000cce:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000cd0:	2300      	movs	r3, #0
 8000cd2:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000cd4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000cd8:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000cda:	2300      	movs	r3, #0
 8000cdc:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000cde:	f107 030c 	add.w	r3, r7, #12
 8000ce2:	2102      	movs	r1, #2
 8000ce4:	4618      	mov	r0, r3
 8000ce6:	f003 f80d 	bl	8003d04 <HAL_RCC_ClockConfig>
 8000cea:	4603      	mov	r3, r0
 8000cec:	2b00      	cmp	r3, #0
 8000cee:	d001      	beq.n	8000cf4 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8000cf0:	f000 f972 	bl	8000fd8 <Error_Handler>
  }
}
 8000cf4:	bf00      	nop
 8000cf6:	3750      	adds	r7, #80	; 0x50
 8000cf8:	46bd      	mov	sp, r7
 8000cfa:	bd80      	pop	{r7, pc}
 8000cfc:	40023800 	.word	0x40023800
 8000d00:	40007000 	.word	0x40007000

08000d04 <MX_I2C3_Init>:
  * @brief I2C3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C3_Init(void)
{
 8000d04:	b580      	push	{r7, lr}
 8000d06:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 8000d08:	4b12      	ldr	r3, [pc, #72]	; (8000d54 <MX_I2C3_Init+0x50>)
 8000d0a:	4a13      	ldr	r2, [pc, #76]	; (8000d58 <MX_I2C3_Init+0x54>)
 8000d0c:	601a      	str	r2, [r3, #0]
  hi2c3.Init.ClockSpeed = 400000;
 8000d0e:	4b11      	ldr	r3, [pc, #68]	; (8000d54 <MX_I2C3_Init+0x50>)
 8000d10:	4a12      	ldr	r2, [pc, #72]	; (8000d5c <MX_I2C3_Init+0x58>)
 8000d12:	605a      	str	r2, [r3, #4]
  hi2c3.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000d14:	4b0f      	ldr	r3, [pc, #60]	; (8000d54 <MX_I2C3_Init+0x50>)
 8000d16:	2200      	movs	r2, #0
 8000d18:	609a      	str	r2, [r3, #8]
  hi2c3.Init.OwnAddress1 = 0;
 8000d1a:	4b0e      	ldr	r3, [pc, #56]	; (8000d54 <MX_I2C3_Init+0x50>)
 8000d1c:	2200      	movs	r2, #0
 8000d1e:	60da      	str	r2, [r3, #12]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000d20:	4b0c      	ldr	r3, [pc, #48]	; (8000d54 <MX_I2C3_Init+0x50>)
 8000d22:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000d26:	611a      	str	r2, [r3, #16]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000d28:	4b0a      	ldr	r3, [pc, #40]	; (8000d54 <MX_I2C3_Init+0x50>)
 8000d2a:	2200      	movs	r2, #0
 8000d2c:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2 = 0;
 8000d2e:	4b09      	ldr	r3, [pc, #36]	; (8000d54 <MX_I2C3_Init+0x50>)
 8000d30:	2200      	movs	r2, #0
 8000d32:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000d34:	4b07      	ldr	r3, [pc, #28]	; (8000d54 <MX_I2C3_Init+0x50>)
 8000d36:	2200      	movs	r2, #0
 8000d38:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000d3a:	4b06      	ldr	r3, [pc, #24]	; (8000d54 <MX_I2C3_Init+0x50>)
 8000d3c:	2200      	movs	r2, #0
 8000d3e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 8000d40:	4804      	ldr	r0, [pc, #16]	; (8000d54 <MX_I2C3_Init+0x50>)
 8000d42:	f001 fc41 	bl	80025c8 <HAL_I2C_Init>
 8000d46:	4603      	mov	r3, r0
 8000d48:	2b00      	cmp	r3, #0
 8000d4a:	d001      	beq.n	8000d50 <MX_I2C3_Init+0x4c>
  {
    Error_Handler();
 8000d4c:	f000 f944 	bl	8000fd8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 8000d50:	bf00      	nop
 8000d52:	bd80      	pop	{r7, pc}
 8000d54:	200000c4 	.word	0x200000c4
 8000d58:	40005c00 	.word	0x40005c00
 8000d5c:	00061a80 	.word	0x00061a80

08000d60 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8000d60:	b580      	push	{r7, lr}
 8000d62:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8000d64:	4b17      	ldr	r3, [pc, #92]	; (8000dc4 <MX_SPI2_Init+0x64>)
 8000d66:	4a18      	ldr	r2, [pc, #96]	; (8000dc8 <MX_SPI2_Init+0x68>)
 8000d68:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8000d6a:	4b16      	ldr	r3, [pc, #88]	; (8000dc4 <MX_SPI2_Init+0x64>)
 8000d6c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000d70:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8000d72:	4b14      	ldr	r3, [pc, #80]	; (8000dc4 <MX_SPI2_Init+0x64>)
 8000d74:	2200      	movs	r2, #0
 8000d76:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8000d78:	4b12      	ldr	r3, [pc, #72]	; (8000dc4 <MX_SPI2_Init+0x64>)
 8000d7a:	2200      	movs	r2, #0
 8000d7c:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000d7e:	4b11      	ldr	r3, [pc, #68]	; (8000dc4 <MX_SPI2_Init+0x64>)
 8000d80:	2200      	movs	r2, #0
 8000d82:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000d84:	4b0f      	ldr	r3, [pc, #60]	; (8000dc4 <MX_SPI2_Init+0x64>)
 8000d86:	2200      	movs	r2, #0
 8000d88:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8000d8a:	4b0e      	ldr	r3, [pc, #56]	; (8000dc4 <MX_SPI2_Init+0x64>)
 8000d8c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000d90:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8000d92:	4b0c      	ldr	r3, [pc, #48]	; (8000dc4 <MX_SPI2_Init+0x64>)
 8000d94:	2218      	movs	r2, #24
 8000d96:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000d98:	4b0a      	ldr	r3, [pc, #40]	; (8000dc4 <MX_SPI2_Init+0x64>)
 8000d9a:	2200      	movs	r2, #0
 8000d9c:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8000d9e:	4b09      	ldr	r3, [pc, #36]	; (8000dc4 <MX_SPI2_Init+0x64>)
 8000da0:	2200      	movs	r2, #0
 8000da2:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000da4:	4b07      	ldr	r3, [pc, #28]	; (8000dc4 <MX_SPI2_Init+0x64>)
 8000da6:	2200      	movs	r2, #0
 8000da8:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 8000daa:	4b06      	ldr	r3, [pc, #24]	; (8000dc4 <MX_SPI2_Init+0x64>)
 8000dac:	220a      	movs	r2, #10
 8000dae:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8000db0:	4804      	ldr	r0, [pc, #16]	; (8000dc4 <MX_SPI2_Init+0x64>)
 8000db2:	f003 f987 	bl	80040c4 <HAL_SPI_Init>
 8000db6:	4603      	mov	r3, r0
 8000db8:	2b00      	cmp	r3, #0
 8000dba:	d001      	beq.n	8000dc0 <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 8000dbc:	f000 f90c 	bl	8000fd8 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8000dc0:	bf00      	nop
 8000dc2:	bd80      	pop	{r7, pc}
 8000dc4:	20000118 	.word	0x20000118
 8000dc8:	40003800 	.word	0x40003800

08000dcc <MX_TIM10_Init>:
  * @brief TIM10 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM10_Init(void)
{
 8000dcc:	b580      	push	{r7, lr}
 8000dce:	af00      	add	r7, sp, #0
  /* USER CODE END TIM10_Init 0 */

  /* USER CODE BEGIN TIM10_Init 1 */

  /* USER CODE END TIM10_Init 1 */
  htim10.Instance = TIM10;
 8000dd0:	4b0e      	ldr	r3, [pc, #56]	; (8000e0c <MX_TIM10_Init+0x40>)
 8000dd2:	4a0f      	ldr	r2, [pc, #60]	; (8000e10 <MX_TIM10_Init+0x44>)
 8000dd4:	601a      	str	r2, [r3, #0]
  htim10.Init.Prescaler = 8000-1;
 8000dd6:	4b0d      	ldr	r3, [pc, #52]	; (8000e0c <MX_TIM10_Init+0x40>)
 8000dd8:	f641 723f 	movw	r2, #7999	; 0x1f3f
 8000ddc:	605a      	str	r2, [r3, #4]
  htim10.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000dde:	4b0b      	ldr	r3, [pc, #44]	; (8000e0c <MX_TIM10_Init+0x40>)
 8000de0:	2200      	movs	r2, #0
 8000de2:	609a      	str	r2, [r3, #8]
  htim10.Init.Period = 65535;
 8000de4:	4b09      	ldr	r3, [pc, #36]	; (8000e0c <MX_TIM10_Init+0x40>)
 8000de6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000dea:	60da      	str	r2, [r3, #12]
  htim10.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000dec:	4b07      	ldr	r3, [pc, #28]	; (8000e0c <MX_TIM10_Init+0x40>)
 8000dee:	2200      	movs	r2, #0
 8000df0:	611a      	str	r2, [r3, #16]
  htim10.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000df2:	4b06      	ldr	r3, [pc, #24]	; (8000e0c <MX_TIM10_Init+0x40>)
 8000df4:	2200      	movs	r2, #0
 8000df6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim10) != HAL_OK)
 8000df8:	4804      	ldr	r0, [pc, #16]	; (8000e0c <MX_TIM10_Init+0x40>)
 8000dfa:	f003 f9ec 	bl	80041d6 <HAL_TIM_Base_Init>
 8000dfe:	4603      	mov	r3, r0
 8000e00:	2b00      	cmp	r3, #0
 8000e02:	d001      	beq.n	8000e08 <MX_TIM10_Init+0x3c>
  {
    Error_Handler();
 8000e04:	f000 f8e8 	bl	8000fd8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM10_Init 2 */

  /* USER CODE END TIM10_Init 2 */

}
 8000e08:	bf00      	nop
 8000e0a:	bd80      	pop	{r7, pc}
 8000e0c:	20000170 	.word	0x20000170
 8000e10:	40014400 	.word	0x40014400

08000e14 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000e14:	b580      	push	{r7, lr}
 8000e16:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000e18:	4b11      	ldr	r3, [pc, #68]	; (8000e60 <MX_USART2_UART_Init+0x4c>)
 8000e1a:	4a12      	ldr	r2, [pc, #72]	; (8000e64 <MX_USART2_UART_Init+0x50>)
 8000e1c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000e1e:	4b10      	ldr	r3, [pc, #64]	; (8000e60 <MX_USART2_UART_Init+0x4c>)
 8000e20:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000e24:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000e26:	4b0e      	ldr	r3, [pc, #56]	; (8000e60 <MX_USART2_UART_Init+0x4c>)
 8000e28:	2200      	movs	r2, #0
 8000e2a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000e2c:	4b0c      	ldr	r3, [pc, #48]	; (8000e60 <MX_USART2_UART_Init+0x4c>)
 8000e2e:	2200      	movs	r2, #0
 8000e30:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000e32:	4b0b      	ldr	r3, [pc, #44]	; (8000e60 <MX_USART2_UART_Init+0x4c>)
 8000e34:	2200      	movs	r2, #0
 8000e36:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000e38:	4b09      	ldr	r3, [pc, #36]	; (8000e60 <MX_USART2_UART_Init+0x4c>)
 8000e3a:	220c      	movs	r2, #12
 8000e3c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_CTS;
 8000e3e:	4b08      	ldr	r3, [pc, #32]	; (8000e60 <MX_USART2_UART_Init+0x4c>)
 8000e40:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000e44:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000e46:	4b06      	ldr	r3, [pc, #24]	; (8000e60 <MX_USART2_UART_Init+0x4c>)
 8000e48:	2200      	movs	r2, #0
 8000e4a:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000e4c:	4804      	ldr	r0, [pc, #16]	; (8000e60 <MX_USART2_UART_Init+0x4c>)
 8000e4e:	f003 faeb 	bl	8004428 <HAL_UART_Init>
 8000e52:	4603      	mov	r3, r0
 8000e54:	2b00      	cmp	r3, #0
 8000e56:	d001      	beq.n	8000e5c <MX_USART2_UART_Init+0x48>
  {
    Error_Handler();
 8000e58:	f000 f8be 	bl	8000fd8 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000e5c:	bf00      	nop
 8000e5e:	bd80      	pop	{r7, pc}
 8000e60:	200001b8 	.word	0x200001b8
 8000e64:	40004400 	.word	0x40004400

08000e68 <MX_USART6_UART_Init>:
  * @brief USART6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART6_UART_Init(void)
{
 8000e68:	b580      	push	{r7, lr}
 8000e6a:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 8000e6c:	4b11      	ldr	r3, [pc, #68]	; (8000eb4 <MX_USART6_UART_Init+0x4c>)
 8000e6e:	4a12      	ldr	r2, [pc, #72]	; (8000eb8 <MX_USART6_UART_Init+0x50>)
 8000e70:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 115200;
 8000e72:	4b10      	ldr	r3, [pc, #64]	; (8000eb4 <MX_USART6_UART_Init+0x4c>)
 8000e74:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000e78:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 8000e7a:	4b0e      	ldr	r3, [pc, #56]	; (8000eb4 <MX_USART6_UART_Init+0x4c>)
 8000e7c:	2200      	movs	r2, #0
 8000e7e:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 8000e80:	4b0c      	ldr	r3, [pc, #48]	; (8000eb4 <MX_USART6_UART_Init+0x4c>)
 8000e82:	2200      	movs	r2, #0
 8000e84:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 8000e86:	4b0b      	ldr	r3, [pc, #44]	; (8000eb4 <MX_USART6_UART_Init+0x4c>)
 8000e88:	2200      	movs	r2, #0
 8000e8a:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 8000e8c:	4b09      	ldr	r3, [pc, #36]	; (8000eb4 <MX_USART6_UART_Init+0x4c>)
 8000e8e:	220c      	movs	r2, #12
 8000e90:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000e92:	4b08      	ldr	r3, [pc, #32]	; (8000eb4 <MX_USART6_UART_Init+0x4c>)
 8000e94:	2200      	movs	r2, #0
 8000e96:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 8000e98:	4b06      	ldr	r3, [pc, #24]	; (8000eb4 <MX_USART6_UART_Init+0x4c>)
 8000e9a:	2200      	movs	r2, #0
 8000e9c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart6) != HAL_OK)
 8000e9e:	4805      	ldr	r0, [pc, #20]	; (8000eb4 <MX_USART6_UART_Init+0x4c>)
 8000ea0:	f003 fac2 	bl	8004428 <HAL_UART_Init>
 8000ea4:	4603      	mov	r3, r0
 8000ea6:	2b00      	cmp	r3, #0
 8000ea8:	d001      	beq.n	8000eae <MX_USART6_UART_Init+0x46>
  {
    Error_Handler();
 8000eaa:	f000 f895 	bl	8000fd8 <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 8000eae:	bf00      	nop
 8000eb0:	bd80      	pop	{r7, pc}
 8000eb2:	bf00      	nop
 8000eb4:	200001fc 	.word	0x200001fc
 8000eb8:	40011400 	.word	0x40011400

08000ebc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000ebc:	b580      	push	{r7, lr}
 8000ebe:	b088      	sub	sp, #32
 8000ec0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ec2:	f107 030c 	add.w	r3, r7, #12
 8000ec6:	2200      	movs	r2, #0
 8000ec8:	601a      	str	r2, [r3, #0]
 8000eca:	605a      	str	r2, [r3, #4]
 8000ecc:	609a      	str	r2, [r3, #8]
 8000ece:	60da      	str	r2, [r3, #12]
 8000ed0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000ed2:	2300      	movs	r3, #0
 8000ed4:	60bb      	str	r3, [r7, #8]
 8000ed6:	4b3c      	ldr	r3, [pc, #240]	; (8000fc8 <MX_GPIO_Init+0x10c>)
 8000ed8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000eda:	4a3b      	ldr	r2, [pc, #236]	; (8000fc8 <MX_GPIO_Init+0x10c>)
 8000edc:	f043 0304 	orr.w	r3, r3, #4
 8000ee0:	6313      	str	r3, [r2, #48]	; 0x30
 8000ee2:	4b39      	ldr	r3, [pc, #228]	; (8000fc8 <MX_GPIO_Init+0x10c>)
 8000ee4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ee6:	f003 0304 	and.w	r3, r3, #4
 8000eea:	60bb      	str	r3, [r7, #8]
 8000eec:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000eee:	2300      	movs	r3, #0
 8000ef0:	607b      	str	r3, [r7, #4]
 8000ef2:	4b35      	ldr	r3, [pc, #212]	; (8000fc8 <MX_GPIO_Init+0x10c>)
 8000ef4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ef6:	4a34      	ldr	r2, [pc, #208]	; (8000fc8 <MX_GPIO_Init+0x10c>)
 8000ef8:	f043 0301 	orr.w	r3, r3, #1
 8000efc:	6313      	str	r3, [r2, #48]	; 0x30
 8000efe:	4b32      	ldr	r3, [pc, #200]	; (8000fc8 <MX_GPIO_Init+0x10c>)
 8000f00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f02:	f003 0301 	and.w	r3, r3, #1
 8000f06:	607b      	str	r3, [r7, #4]
 8000f08:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f0a:	2300      	movs	r3, #0
 8000f0c:	603b      	str	r3, [r7, #0]
 8000f0e:	4b2e      	ldr	r3, [pc, #184]	; (8000fc8 <MX_GPIO_Init+0x10c>)
 8000f10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f12:	4a2d      	ldr	r2, [pc, #180]	; (8000fc8 <MX_GPIO_Init+0x10c>)
 8000f14:	f043 0302 	orr.w	r3, r3, #2
 8000f18:	6313      	str	r3, [r2, #48]	; 0x30
 8000f1a:	4b2b      	ldr	r3, [pc, #172]	; (8000fc8 <MX_GPIO_Init+0x10c>)
 8000f1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f1e:	f003 0302 	and.w	r3, r3, #2
 8000f22:	603b      	str	r3, [r7, #0]
 8000f24:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LASER_Pin|LED_Pin, GPIO_PIN_RESET);
 8000f26:	2200      	movs	r2, #0
 8000f28:	2160      	movs	r1, #96	; 0x60
 8000f2a:	4828      	ldr	r0, [pc, #160]	; (8000fcc <MX_GPIO_Init+0x110>)
 8000f2c:	f001 fb32 	bl	8002594 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, SCK_Input_Pin_Pin|CSNPin_Pin|CEPin_Pin, GPIO_PIN_RESET);
 8000f30:	2200      	movs	r2, #0
 8000f32:	21e0      	movs	r1, #224	; 0xe0
 8000f34:	4826      	ldr	r0, [pc, #152]	; (8000fd0 <MX_GPIO_Init+0x114>)
 8000f36:	f001 fb2d 	bl	8002594 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : LASER_Pin LED_Pin */
  GPIO_InitStruct.Pin = LASER_Pin|LED_Pin;
 8000f3a:	2360      	movs	r3, #96	; 0x60
 8000f3c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f3e:	2301      	movs	r3, #1
 8000f40:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f42:	2300      	movs	r3, #0
 8000f44:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f46:	2300      	movs	r3, #0
 8000f48:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f4a:	f107 030c 	add.w	r3, r7, #12
 8000f4e:	4619      	mov	r1, r3
 8000f50:	481e      	ldr	r0, [pc, #120]	; (8000fcc <MX_GPIO_Init+0x110>)
 8000f52:	f001 f99b 	bl	800228c <HAL_GPIO_Init>

  /*Configure GPIO pins : BUTTON_1_Pin BUTTON_2_Pin BUTTON_3_Pin */
  GPIO_InitStruct.Pin = BUTTON_1_Pin|BUTTON_2_Pin|BUTTON_3_Pin;
 8000f56:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8000f5a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000f5c:	2300      	movs	r3, #0
 8000f5e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000f60:	2301      	movs	r3, #1
 8000f62:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000f64:	f107 030c 	add.w	r3, r7, #12
 8000f68:	4619      	mov	r1, r3
 8000f6a:	481a      	ldr	r0, [pc, #104]	; (8000fd4 <MX_GPIO_Init+0x118>)
 8000f6c:	f001 f98e 	bl	800228c <HAL_GPIO_Init>

  /*Configure GPIO pin : IRQ_Pin_Pin */
  GPIO_InitStruct.Pin = IRQ_Pin_Pin;
 8000f70:	2310      	movs	r3, #16
 8000f72:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000f74:	2300      	movs	r3, #0
 8000f76:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f78:	2300      	movs	r3, #0
 8000f7a:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(IRQ_Pin_GPIO_Port, &GPIO_InitStruct);
 8000f7c:	f107 030c 	add.w	r3, r7, #12
 8000f80:	4619      	mov	r1, r3
 8000f82:	4813      	ldr	r0, [pc, #76]	; (8000fd0 <MX_GPIO_Init+0x114>)
 8000f84:	f001 f982 	bl	800228c <HAL_GPIO_Init>

  /*Configure GPIO pin : SCK_Input_Pin_Pin */
  GPIO_InitStruct.Pin = SCK_Input_Pin_Pin;
 8000f88:	2320      	movs	r3, #32
 8000f8a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f8c:	2301      	movs	r3, #1
 8000f8e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f90:	2300      	movs	r3, #0
 8000f92:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f94:	2300      	movs	r3, #0
 8000f96:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(SCK_Input_Pin_GPIO_Port, &GPIO_InitStruct);
 8000f98:	f107 030c 	add.w	r3, r7, #12
 8000f9c:	4619      	mov	r1, r3
 8000f9e:	480c      	ldr	r0, [pc, #48]	; (8000fd0 <MX_GPIO_Init+0x114>)
 8000fa0:	f001 f974 	bl	800228c <HAL_GPIO_Init>

  /*Configure GPIO pins : CSNPin_Pin CEPin_Pin */
  GPIO_InitStruct.Pin = CSNPin_Pin|CEPin_Pin;
 8000fa4:	23c0      	movs	r3, #192	; 0xc0
 8000fa6:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000fa8:	2301      	movs	r3, #1
 8000faa:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fac:	2300      	movs	r3, #0
 8000fae:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000fb0:	2303      	movs	r3, #3
 8000fb2:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000fb4:	f107 030c 	add.w	r3, r7, #12
 8000fb8:	4619      	mov	r1, r3
 8000fba:	4805      	ldr	r0, [pc, #20]	; (8000fd0 <MX_GPIO_Init+0x114>)
 8000fbc:	f001 f966 	bl	800228c <HAL_GPIO_Init>

}
 8000fc0:	bf00      	nop
 8000fc2:	3720      	adds	r7, #32
 8000fc4:	46bd      	mov	sp, r7
 8000fc6:	bd80      	pop	{r7, pc}
 8000fc8:	40023800 	.word	0x40023800
 8000fcc:	40020000 	.word	0x40020000
 8000fd0:	40020400 	.word	0x40020400
 8000fd4:	40020800 	.word	0x40020800

08000fd8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000fd8:	b480      	push	{r7}
 8000fda:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000fdc:	b672      	cpsid	i
}
 8000fde:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8000fe0:	e7fe      	b.n	8000fe0 <Error_Handler+0x8>
	...

08000fe4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000fe4:	b480      	push	{r7}
 8000fe6:	b083      	sub	sp, #12
 8000fe8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000fea:	2300      	movs	r3, #0
 8000fec:	607b      	str	r3, [r7, #4]
 8000fee:	4b10      	ldr	r3, [pc, #64]	; (8001030 <HAL_MspInit+0x4c>)
 8000ff0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ff2:	4a0f      	ldr	r2, [pc, #60]	; (8001030 <HAL_MspInit+0x4c>)
 8000ff4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000ff8:	6453      	str	r3, [r2, #68]	; 0x44
 8000ffa:	4b0d      	ldr	r3, [pc, #52]	; (8001030 <HAL_MspInit+0x4c>)
 8000ffc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ffe:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001002:	607b      	str	r3, [r7, #4]
 8001004:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001006:	2300      	movs	r3, #0
 8001008:	603b      	str	r3, [r7, #0]
 800100a:	4b09      	ldr	r3, [pc, #36]	; (8001030 <HAL_MspInit+0x4c>)
 800100c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800100e:	4a08      	ldr	r2, [pc, #32]	; (8001030 <HAL_MspInit+0x4c>)
 8001010:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001014:	6413      	str	r3, [r2, #64]	; 0x40
 8001016:	4b06      	ldr	r3, [pc, #24]	; (8001030 <HAL_MspInit+0x4c>)
 8001018:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800101a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800101e:	603b      	str	r3, [r7, #0]
 8001020:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001022:	bf00      	nop
 8001024:	370c      	adds	r7, #12
 8001026:	46bd      	mov	sp, r7
 8001028:	f85d 7b04 	ldr.w	r7, [sp], #4
 800102c:	4770      	bx	lr
 800102e:	bf00      	nop
 8001030:	40023800 	.word	0x40023800

08001034 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001034:	b580      	push	{r7, lr}
 8001036:	b08a      	sub	sp, #40	; 0x28
 8001038:	af00      	add	r7, sp, #0
 800103a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800103c:	f107 0314 	add.w	r3, r7, #20
 8001040:	2200      	movs	r2, #0
 8001042:	601a      	str	r2, [r3, #0]
 8001044:	605a      	str	r2, [r3, #4]
 8001046:	609a      	str	r2, [r3, #8]
 8001048:	60da      	str	r2, [r3, #12]
 800104a:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C3)
 800104c:	687b      	ldr	r3, [r7, #4]
 800104e:	681b      	ldr	r3, [r3, #0]
 8001050:	4a29      	ldr	r2, [pc, #164]	; (80010f8 <HAL_I2C_MspInit+0xc4>)
 8001052:	4293      	cmp	r3, r2
 8001054:	d14b      	bne.n	80010ee <HAL_I2C_MspInit+0xba>
  {
  /* USER CODE BEGIN I2C3_MspInit 0 */

  /* USER CODE END I2C3_MspInit 0 */

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001056:	2300      	movs	r3, #0
 8001058:	613b      	str	r3, [r7, #16]
 800105a:	4b28      	ldr	r3, [pc, #160]	; (80010fc <HAL_I2C_MspInit+0xc8>)
 800105c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800105e:	4a27      	ldr	r2, [pc, #156]	; (80010fc <HAL_I2C_MspInit+0xc8>)
 8001060:	f043 0304 	orr.w	r3, r3, #4
 8001064:	6313      	str	r3, [r2, #48]	; 0x30
 8001066:	4b25      	ldr	r3, [pc, #148]	; (80010fc <HAL_I2C_MspInit+0xc8>)
 8001068:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800106a:	f003 0304 	and.w	r3, r3, #4
 800106e:	613b      	str	r3, [r7, #16]
 8001070:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001072:	2300      	movs	r3, #0
 8001074:	60fb      	str	r3, [r7, #12]
 8001076:	4b21      	ldr	r3, [pc, #132]	; (80010fc <HAL_I2C_MspInit+0xc8>)
 8001078:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800107a:	4a20      	ldr	r2, [pc, #128]	; (80010fc <HAL_I2C_MspInit+0xc8>)
 800107c:	f043 0301 	orr.w	r3, r3, #1
 8001080:	6313      	str	r3, [r2, #48]	; 0x30
 8001082:	4b1e      	ldr	r3, [pc, #120]	; (80010fc <HAL_I2C_MspInit+0xc8>)
 8001084:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001086:	f003 0301 	and.w	r3, r3, #1
 800108a:	60fb      	str	r3, [r7, #12]
 800108c:	68fb      	ldr	r3, [r7, #12]
    /**I2C3 GPIO Configuration
    PC9     ------> I2C3_SDA
    PA8     ------> I2C3_SCL
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 800108e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001092:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001094:	2312      	movs	r3, #18
 8001096:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001098:	2300      	movs	r3, #0
 800109a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800109c:	2303      	movs	r3, #3
 800109e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 80010a0:	2304      	movs	r3, #4
 80010a2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80010a4:	f107 0314 	add.w	r3, r7, #20
 80010a8:	4619      	mov	r1, r3
 80010aa:	4815      	ldr	r0, [pc, #84]	; (8001100 <HAL_I2C_MspInit+0xcc>)
 80010ac:	f001 f8ee 	bl	800228c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_8;
 80010b0:	f44f 7380 	mov.w	r3, #256	; 0x100
 80010b4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80010b6:	2312      	movs	r3, #18
 80010b8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010ba:	2300      	movs	r3, #0
 80010bc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80010be:	2303      	movs	r3, #3
 80010c0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 80010c2:	2304      	movs	r3, #4
 80010c4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80010c6:	f107 0314 	add.w	r3, r7, #20
 80010ca:	4619      	mov	r1, r3
 80010cc:	480d      	ldr	r0, [pc, #52]	; (8001104 <HAL_I2C_MspInit+0xd0>)
 80010ce:	f001 f8dd 	bl	800228c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C3_CLK_ENABLE();
 80010d2:	2300      	movs	r3, #0
 80010d4:	60bb      	str	r3, [r7, #8]
 80010d6:	4b09      	ldr	r3, [pc, #36]	; (80010fc <HAL_I2C_MspInit+0xc8>)
 80010d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010da:	4a08      	ldr	r2, [pc, #32]	; (80010fc <HAL_I2C_MspInit+0xc8>)
 80010dc:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80010e0:	6413      	str	r3, [r2, #64]	; 0x40
 80010e2:	4b06      	ldr	r3, [pc, #24]	; (80010fc <HAL_I2C_MspInit+0xc8>)
 80010e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010e6:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80010ea:	60bb      	str	r3, [r7, #8]
 80010ec:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }

}
 80010ee:	bf00      	nop
 80010f0:	3728      	adds	r7, #40	; 0x28
 80010f2:	46bd      	mov	sp, r7
 80010f4:	bd80      	pop	{r7, pc}
 80010f6:	bf00      	nop
 80010f8:	40005c00 	.word	0x40005c00
 80010fc:	40023800 	.word	0x40023800
 8001100:	40020800 	.word	0x40020800
 8001104:	40020000 	.word	0x40020000

08001108 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001108:	b580      	push	{r7, lr}
 800110a:	b08a      	sub	sp, #40	; 0x28
 800110c:	af00      	add	r7, sp, #0
 800110e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001110:	f107 0314 	add.w	r3, r7, #20
 8001114:	2200      	movs	r2, #0
 8001116:	601a      	str	r2, [r3, #0]
 8001118:	605a      	str	r2, [r3, #4]
 800111a:	609a      	str	r2, [r3, #8]
 800111c:	60da      	str	r2, [r3, #12]
 800111e:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI2)
 8001120:	687b      	ldr	r3, [r7, #4]
 8001122:	681b      	ldr	r3, [r3, #0]
 8001124:	4a28      	ldr	r2, [pc, #160]	; (80011c8 <HAL_SPI_MspInit+0xc0>)
 8001126:	4293      	cmp	r3, r2
 8001128:	d14a      	bne.n	80011c0 <HAL_SPI_MspInit+0xb8>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 800112a:	2300      	movs	r3, #0
 800112c:	613b      	str	r3, [r7, #16]
 800112e:	4b27      	ldr	r3, [pc, #156]	; (80011cc <HAL_SPI_MspInit+0xc4>)
 8001130:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001132:	4a26      	ldr	r2, [pc, #152]	; (80011cc <HAL_SPI_MspInit+0xc4>)
 8001134:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001138:	6413      	str	r3, [r2, #64]	; 0x40
 800113a:	4b24      	ldr	r3, [pc, #144]	; (80011cc <HAL_SPI_MspInit+0xc4>)
 800113c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800113e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001142:	613b      	str	r3, [r7, #16]
 8001144:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001146:	2300      	movs	r3, #0
 8001148:	60fb      	str	r3, [r7, #12]
 800114a:	4b20      	ldr	r3, [pc, #128]	; (80011cc <HAL_SPI_MspInit+0xc4>)
 800114c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800114e:	4a1f      	ldr	r2, [pc, #124]	; (80011cc <HAL_SPI_MspInit+0xc4>)
 8001150:	f043 0304 	orr.w	r3, r3, #4
 8001154:	6313      	str	r3, [r2, #48]	; 0x30
 8001156:	4b1d      	ldr	r3, [pc, #116]	; (80011cc <HAL_SPI_MspInit+0xc4>)
 8001158:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800115a:	f003 0304 	and.w	r3, r3, #4
 800115e:	60fb      	str	r3, [r7, #12]
 8001160:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001162:	2300      	movs	r3, #0
 8001164:	60bb      	str	r3, [r7, #8]
 8001166:	4b19      	ldr	r3, [pc, #100]	; (80011cc <HAL_SPI_MspInit+0xc4>)
 8001168:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800116a:	4a18      	ldr	r2, [pc, #96]	; (80011cc <HAL_SPI_MspInit+0xc4>)
 800116c:	f043 0302 	orr.w	r3, r3, #2
 8001170:	6313      	str	r3, [r2, #48]	; 0x30
 8001172:	4b16      	ldr	r3, [pc, #88]	; (80011cc <HAL_SPI_MspInit+0xc4>)
 8001174:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001176:	f003 0302 	and.w	r3, r3, #2
 800117a:	60bb      	str	r3, [r7, #8]
 800117c:	68bb      	ldr	r3, [r7, #8]
    /**SPI2 GPIO Configuration
    PC2     ------> SPI2_MISO
    PC3     ------> SPI2_MOSI
    PB13     ------> SPI2_SCK
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 800117e:	230c      	movs	r3, #12
 8001180:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001182:	2302      	movs	r3, #2
 8001184:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001186:	2300      	movs	r3, #0
 8001188:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800118a:	2303      	movs	r3, #3
 800118c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800118e:	2305      	movs	r3, #5
 8001190:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001192:	f107 0314 	add.w	r3, r7, #20
 8001196:	4619      	mov	r1, r3
 8001198:	480d      	ldr	r0, [pc, #52]	; (80011d0 <HAL_SPI_MspInit+0xc8>)
 800119a:	f001 f877 	bl	800228c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_13;
 800119e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80011a2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011a4:	2302      	movs	r3, #2
 80011a6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011a8:	2300      	movs	r3, #0
 80011aa:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80011ac:	2303      	movs	r3, #3
 80011ae:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80011b0:	2305      	movs	r3, #5
 80011b2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80011b4:	f107 0314 	add.w	r3, r7, #20
 80011b8:	4619      	mov	r1, r3
 80011ba:	4806      	ldr	r0, [pc, #24]	; (80011d4 <HAL_SPI_MspInit+0xcc>)
 80011bc:	f001 f866 	bl	800228c <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 80011c0:	bf00      	nop
 80011c2:	3728      	adds	r7, #40	; 0x28
 80011c4:	46bd      	mov	sp, r7
 80011c6:	bd80      	pop	{r7, pc}
 80011c8:	40003800 	.word	0x40003800
 80011cc:	40023800 	.word	0x40023800
 80011d0:	40020800 	.word	0x40020800
 80011d4:	40020400 	.word	0x40020400

080011d8 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80011d8:	b480      	push	{r7}
 80011da:	b085      	sub	sp, #20
 80011dc:	af00      	add	r7, sp, #0
 80011de:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM10)
 80011e0:	687b      	ldr	r3, [r7, #4]
 80011e2:	681b      	ldr	r3, [r3, #0]
 80011e4:	4a0b      	ldr	r2, [pc, #44]	; (8001214 <HAL_TIM_Base_MspInit+0x3c>)
 80011e6:	4293      	cmp	r3, r2
 80011e8:	d10d      	bne.n	8001206 <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM10_MspInit 0 */

  /* USER CODE END TIM10_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM10_CLK_ENABLE();
 80011ea:	2300      	movs	r3, #0
 80011ec:	60fb      	str	r3, [r7, #12]
 80011ee:	4b0a      	ldr	r3, [pc, #40]	; (8001218 <HAL_TIM_Base_MspInit+0x40>)
 80011f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80011f2:	4a09      	ldr	r2, [pc, #36]	; (8001218 <HAL_TIM_Base_MspInit+0x40>)
 80011f4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80011f8:	6453      	str	r3, [r2, #68]	; 0x44
 80011fa:	4b07      	ldr	r3, [pc, #28]	; (8001218 <HAL_TIM_Base_MspInit+0x40>)
 80011fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80011fe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001202:	60fb      	str	r3, [r7, #12]
 8001204:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM10_MspInit 1 */

  /* USER CODE END TIM10_MspInit 1 */
  }

}
 8001206:	bf00      	nop
 8001208:	3714      	adds	r7, #20
 800120a:	46bd      	mov	sp, r7
 800120c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001210:	4770      	bx	lr
 8001212:	bf00      	nop
 8001214:	40014400 	.word	0x40014400
 8001218:	40023800 	.word	0x40023800

0800121c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800121c:	b580      	push	{r7, lr}
 800121e:	b08c      	sub	sp, #48	; 0x30
 8001220:	af00      	add	r7, sp, #0
 8001222:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001224:	f107 031c 	add.w	r3, r7, #28
 8001228:	2200      	movs	r2, #0
 800122a:	601a      	str	r2, [r3, #0]
 800122c:	605a      	str	r2, [r3, #4]
 800122e:	609a      	str	r2, [r3, #8]
 8001230:	60da      	str	r2, [r3, #12]
 8001232:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8001234:	687b      	ldr	r3, [r7, #4]
 8001236:	681b      	ldr	r3, [r3, #0]
 8001238:	4a32      	ldr	r2, [pc, #200]	; (8001304 <HAL_UART_MspInit+0xe8>)
 800123a:	4293      	cmp	r3, r2
 800123c:	d12c      	bne.n	8001298 <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800123e:	2300      	movs	r3, #0
 8001240:	61bb      	str	r3, [r7, #24]
 8001242:	4b31      	ldr	r3, [pc, #196]	; (8001308 <HAL_UART_MspInit+0xec>)
 8001244:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001246:	4a30      	ldr	r2, [pc, #192]	; (8001308 <HAL_UART_MspInit+0xec>)
 8001248:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800124c:	6413      	str	r3, [r2, #64]	; 0x40
 800124e:	4b2e      	ldr	r3, [pc, #184]	; (8001308 <HAL_UART_MspInit+0xec>)
 8001250:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001252:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001256:	61bb      	str	r3, [r7, #24]
 8001258:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800125a:	2300      	movs	r3, #0
 800125c:	617b      	str	r3, [r7, #20]
 800125e:	4b2a      	ldr	r3, [pc, #168]	; (8001308 <HAL_UART_MspInit+0xec>)
 8001260:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001262:	4a29      	ldr	r2, [pc, #164]	; (8001308 <HAL_UART_MspInit+0xec>)
 8001264:	f043 0301 	orr.w	r3, r3, #1
 8001268:	6313      	str	r3, [r2, #48]	; 0x30
 800126a:	4b27      	ldr	r3, [pc, #156]	; (8001308 <HAL_UART_MspInit+0xec>)
 800126c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800126e:	f003 0301 	and.w	r3, r3, #1
 8001272:	617b      	str	r3, [r7, #20]
 8001274:	697b      	ldr	r3, [r7, #20]
    /**USART2 GPIO Configuration
    PA0-WKUP     ------> USART2_CTS
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|RS232_TX_Pin|RS232_RX_Pin;
 8001276:	230d      	movs	r3, #13
 8001278:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800127a:	2302      	movs	r3, #2
 800127c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800127e:	2300      	movs	r3, #0
 8001280:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001282:	2303      	movs	r3, #3
 8001284:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001286:	2307      	movs	r3, #7
 8001288:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800128a:	f107 031c 	add.w	r3, r7, #28
 800128e:	4619      	mov	r1, r3
 8001290:	481e      	ldr	r0, [pc, #120]	; (800130c <HAL_UART_MspInit+0xf0>)
 8001292:	f000 fffb 	bl	800228c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }

}
 8001296:	e030      	b.n	80012fa <HAL_UART_MspInit+0xde>
  else if(huart->Instance==USART6)
 8001298:	687b      	ldr	r3, [r7, #4]
 800129a:	681b      	ldr	r3, [r3, #0]
 800129c:	4a1c      	ldr	r2, [pc, #112]	; (8001310 <HAL_UART_MspInit+0xf4>)
 800129e:	4293      	cmp	r3, r2
 80012a0:	d12b      	bne.n	80012fa <HAL_UART_MspInit+0xde>
    __HAL_RCC_USART6_CLK_ENABLE();
 80012a2:	2300      	movs	r3, #0
 80012a4:	613b      	str	r3, [r7, #16]
 80012a6:	4b18      	ldr	r3, [pc, #96]	; (8001308 <HAL_UART_MspInit+0xec>)
 80012a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80012aa:	4a17      	ldr	r2, [pc, #92]	; (8001308 <HAL_UART_MspInit+0xec>)
 80012ac:	f043 0320 	orr.w	r3, r3, #32
 80012b0:	6453      	str	r3, [r2, #68]	; 0x44
 80012b2:	4b15      	ldr	r3, [pc, #84]	; (8001308 <HAL_UART_MspInit+0xec>)
 80012b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80012b6:	f003 0320 	and.w	r3, r3, #32
 80012ba:	613b      	str	r3, [r7, #16]
 80012bc:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80012be:	2300      	movs	r3, #0
 80012c0:	60fb      	str	r3, [r7, #12]
 80012c2:	4b11      	ldr	r3, [pc, #68]	; (8001308 <HAL_UART_MspInit+0xec>)
 80012c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012c6:	4a10      	ldr	r2, [pc, #64]	; (8001308 <HAL_UART_MspInit+0xec>)
 80012c8:	f043 0304 	orr.w	r3, r3, #4
 80012cc:	6313      	str	r3, [r2, #48]	; 0x30
 80012ce:	4b0e      	ldr	r3, [pc, #56]	; (8001308 <HAL_UART_MspInit+0xec>)
 80012d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012d2:	f003 0304 	and.w	r3, r3, #4
 80012d6:	60fb      	str	r3, [r7, #12]
 80012d8:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80012da:	23c0      	movs	r3, #192	; 0xc0
 80012dc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012de:	2302      	movs	r3, #2
 80012e0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012e2:	2300      	movs	r3, #0
 80012e4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80012e6:	2303      	movs	r3, #3
 80012e8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 80012ea:	2308      	movs	r3, #8
 80012ec:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80012ee:	f107 031c 	add.w	r3, r7, #28
 80012f2:	4619      	mov	r1, r3
 80012f4:	4807      	ldr	r0, [pc, #28]	; (8001314 <HAL_UART_MspInit+0xf8>)
 80012f6:	f000 ffc9 	bl	800228c <HAL_GPIO_Init>
}
 80012fa:	bf00      	nop
 80012fc:	3730      	adds	r7, #48	; 0x30
 80012fe:	46bd      	mov	sp, r7
 8001300:	bd80      	pop	{r7, pc}
 8001302:	bf00      	nop
 8001304:	40004400 	.word	0x40004400
 8001308:	40023800 	.word	0x40023800
 800130c:	40020000 	.word	0x40020000
 8001310:	40011400 	.word	0x40011400
 8001314:	40020800 	.word	0x40020800

08001318 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001318:	b480      	push	{r7}
 800131a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800131c:	e7fe      	b.n	800131c <NMI_Handler+0x4>

0800131e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800131e:	b480      	push	{r7}
 8001320:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001322:	e7fe      	b.n	8001322 <HardFault_Handler+0x4>

08001324 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001324:	b480      	push	{r7}
 8001326:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001328:	e7fe      	b.n	8001328 <MemManage_Handler+0x4>

0800132a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800132a:	b480      	push	{r7}
 800132c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800132e:	e7fe      	b.n	800132e <BusFault_Handler+0x4>

08001330 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001330:	b480      	push	{r7}
 8001332:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001334:	e7fe      	b.n	8001334 <UsageFault_Handler+0x4>

08001336 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001336:	b480      	push	{r7}
 8001338:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800133a:	bf00      	nop
 800133c:	46bd      	mov	sp, r7
 800133e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001342:	4770      	bx	lr

08001344 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001344:	b480      	push	{r7}
 8001346:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001348:	bf00      	nop
 800134a:	46bd      	mov	sp, r7
 800134c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001350:	4770      	bx	lr

08001352 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001352:	b480      	push	{r7}
 8001354:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001356:	bf00      	nop
 8001358:	46bd      	mov	sp, r7
 800135a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800135e:	4770      	bx	lr

08001360 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001360:	b580      	push	{r7, lr}
 8001362:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001364:	f000 fe68 	bl	8002038 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001368:	bf00      	nop
 800136a:	bd80      	pop	{r7, pc}

0800136c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800136c:	b480      	push	{r7}
 800136e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
                  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001370:	4b06      	ldr	r3, [pc, #24]	; (800138c <SystemInit+0x20>)
 8001372:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001376:	4a05      	ldr	r2, [pc, #20]	; (800138c <SystemInit+0x20>)
 8001378:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800137c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001380:	bf00      	nop
 8001382:	46bd      	mov	sp, r7
 8001384:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001388:	4770      	bx	lr
 800138a:	bf00      	nop
 800138c:	e000ed00 	.word	0xe000ed00

08001390 <_I2CWrite>:
#include "VL53L1X.h"
extern VL53L1X* active_sensor;

uint8_t _I2CBuffer[256];

int _I2CWrite(uint16_t dev, uint8_t *pdata, uint32_t count) {
 8001390:	b580      	push	{r7, lr}
 8001392:	b086      	sub	sp, #24
 8001394:	af02      	add	r7, sp, #8
 8001396:	4603      	mov	r3, r0
 8001398:	60b9      	str	r1, [r7, #8]
 800139a:	607a      	str	r2, [r7, #4]
 800139c:	81fb      	strh	r3, [r7, #14]
	(void) (dev);
	return (int) HAL_I2C_Master_Transmit(active_sensor->hi2c, active_sensor->address << 1, pdata, count, 100);
 800139e:	4b0a      	ldr	r3, [pc, #40]	; (80013c8 <_I2CWrite+0x38>)
 80013a0:	681b      	ldr	r3, [r3, #0]
 80013a2:	6818      	ldr	r0, [r3, #0]
 80013a4:	4b08      	ldr	r3, [pc, #32]	; (80013c8 <_I2CWrite+0x38>)
 80013a6:	681b      	ldr	r3, [r3, #0]
 80013a8:	791b      	ldrb	r3, [r3, #4]
 80013aa:	b29b      	uxth	r3, r3
 80013ac:	005b      	lsls	r3, r3, #1
 80013ae:	b299      	uxth	r1, r3
 80013b0:	687b      	ldr	r3, [r7, #4]
 80013b2:	b29b      	uxth	r3, r3
 80013b4:	2264      	movs	r2, #100	; 0x64
 80013b6:	9200      	str	r2, [sp, #0]
 80013b8:	68ba      	ldr	r2, [r7, #8]
 80013ba:	f001 fa49 	bl	8002850 <HAL_I2C_Master_Transmit>
 80013be:	4603      	mov	r3, r0
}
 80013c0:	4618      	mov	r0, r3
 80013c2:	3710      	adds	r7, #16
 80013c4:	46bd      	mov	sp, r7
 80013c6:	bd80      	pop	{r7, pc}
 80013c8:	200000a0 	.word	0x200000a0

080013cc <_I2CRead>:

int _I2CRead(uint16_t dev, uint8_t *pdata, uint32_t count) {
 80013cc:	b580      	push	{r7, lr}
 80013ce:	b086      	sub	sp, #24
 80013d0:	af02      	add	r7, sp, #8
 80013d2:	4603      	mov	r3, r0
 80013d4:	60b9      	str	r1, [r7, #8]
 80013d6:	607a      	str	r2, [r7, #4]
 80013d8:	81fb      	strh	r3, [r7, #14]
	(void) (dev);
    return (int) HAL_I2C_Master_Receive(active_sensor->hi2c, active_sensor->address << 1, pdata, count, 100);
 80013da:	4b0a      	ldr	r3, [pc, #40]	; (8001404 <_I2CRead+0x38>)
 80013dc:	681b      	ldr	r3, [r3, #0]
 80013de:	6818      	ldr	r0, [r3, #0]
 80013e0:	4b08      	ldr	r3, [pc, #32]	; (8001404 <_I2CRead+0x38>)
 80013e2:	681b      	ldr	r3, [r3, #0]
 80013e4:	791b      	ldrb	r3, [r3, #4]
 80013e6:	b29b      	uxth	r3, r3
 80013e8:	005b      	lsls	r3, r3, #1
 80013ea:	b299      	uxth	r1, r3
 80013ec:	687b      	ldr	r3, [r7, #4]
 80013ee:	b29b      	uxth	r3, r3
 80013f0:	2264      	movs	r2, #100	; 0x64
 80013f2:	9200      	str	r2, [sp, #0]
 80013f4:	68ba      	ldr	r2, [r7, #8]
 80013f6:	f001 fb29 	bl	8002a4c <HAL_I2C_Master_Receive>
 80013fa:	4603      	mov	r3, r0
}
 80013fc:	4618      	mov	r0, r3
 80013fe:	3710      	adds	r7, #16
 8001400:	46bd      	mov	sp, r7
 8001402:	bd80      	pop	{r7, pc}
 8001404:	200000a0 	.word	0x200000a0

08001408 <VL53L1_WrByte>:
    }
done:
    return Status;
}

int8_t VL53L1_WrByte(uint16_t dev, uint16_t index, uint8_t data) {
 8001408:	b580      	push	{r7, lr}
 800140a:	b084      	sub	sp, #16
 800140c:	af00      	add	r7, sp, #0
 800140e:	4603      	mov	r3, r0
 8001410:	80fb      	strh	r3, [r7, #6]
 8001412:	460b      	mov	r3, r1
 8001414:	80bb      	strh	r3, [r7, #4]
 8001416:	4613      	mov	r3, r2
 8001418:	70fb      	strb	r3, [r7, #3]
    VL53L1_Error Status = VL53L1_ERROR_NONE;
 800141a:	2300      	movs	r3, #0
 800141c:	73fb      	strb	r3, [r7, #15]
    int32_t status_int;

    _I2CBuffer[0] = index>>8;
 800141e:	88bb      	ldrh	r3, [r7, #4]
 8001420:	0a1b      	lsrs	r3, r3, #8
 8001422:	b29b      	uxth	r3, r3
 8001424:	b2da      	uxtb	r2, r3
 8001426:	4b0d      	ldr	r3, [pc, #52]	; (800145c <VL53L1_WrByte+0x54>)
 8001428:	701a      	strb	r2, [r3, #0]
    _I2CBuffer[1] = index&0xFF;
 800142a:	88bb      	ldrh	r3, [r7, #4]
 800142c:	b2da      	uxtb	r2, r3
 800142e:	4b0b      	ldr	r3, [pc, #44]	; (800145c <VL53L1_WrByte+0x54>)
 8001430:	705a      	strb	r2, [r3, #1]
    _I2CBuffer[2] = data;
 8001432:	4a0a      	ldr	r2, [pc, #40]	; (800145c <VL53L1_WrByte+0x54>)
 8001434:	78fb      	ldrb	r3, [r7, #3]
 8001436:	7093      	strb	r3, [r2, #2]

    status_int = _I2CWrite(dev, _I2CBuffer, 3);
 8001438:	88fb      	ldrh	r3, [r7, #6]
 800143a:	2203      	movs	r2, #3
 800143c:	4907      	ldr	r1, [pc, #28]	; (800145c <VL53L1_WrByte+0x54>)
 800143e:	4618      	mov	r0, r3
 8001440:	f7ff ffa6 	bl	8001390 <_I2CWrite>
 8001444:	60b8      	str	r0, [r7, #8]
    if (status_int != 0) {
 8001446:	68bb      	ldr	r3, [r7, #8]
 8001448:	2b00      	cmp	r3, #0
 800144a:	d001      	beq.n	8001450 <VL53L1_WrByte+0x48>
        Status = VL53L1_ERROR_CONTROL_INTERFACE;
 800144c:	23f3      	movs	r3, #243	; 0xf3
 800144e:	73fb      	strb	r3, [r7, #15]
    }
    return Status;}
 8001450:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001454:	4618      	mov	r0, r3
 8001456:	3710      	adds	r7, #16
 8001458:	46bd      	mov	sp, r7
 800145a:	bd80      	pop	{r7, pc}
 800145c:	20000280 	.word	0x20000280

08001460 <VL53L1_RdByte>:
    }

    return Status;
}

int8_t VL53L1_RdByte(uint16_t dev, uint16_t index, uint8_t *data) {
 8001460:	b580      	push	{r7, lr}
 8001462:	b084      	sub	sp, #16
 8001464:	af00      	add	r7, sp, #0
 8001466:	4603      	mov	r3, r0
 8001468:	603a      	str	r2, [r7, #0]
 800146a:	80fb      	strh	r3, [r7, #6]
 800146c:	460b      	mov	r3, r1
 800146e:	80bb      	strh	r3, [r7, #4]
    VL53L1_Error Status = VL53L1_ERROR_NONE;
 8001470:	2300      	movs	r3, #0
 8001472:	73fb      	strb	r3, [r7, #15]
    int32_t status_int;

	_I2CBuffer[0] = index>>8;
 8001474:	88bb      	ldrh	r3, [r7, #4]
 8001476:	0a1b      	lsrs	r3, r3, #8
 8001478:	b29b      	uxth	r3, r3
 800147a:	b2da      	uxtb	r2, r3
 800147c:	4b13      	ldr	r3, [pc, #76]	; (80014cc <VL53L1_RdByte+0x6c>)
 800147e:	701a      	strb	r2, [r3, #0]
	_I2CBuffer[1] = index&0xFF;
 8001480:	88bb      	ldrh	r3, [r7, #4]
 8001482:	b2da      	uxtb	r2, r3
 8001484:	4b11      	ldr	r3, [pc, #68]	; (80014cc <VL53L1_RdByte+0x6c>)
 8001486:	705a      	strb	r2, [r3, #1]

	status_int = _I2CWrite(dev, _I2CBuffer, 2);
 8001488:	88fb      	ldrh	r3, [r7, #6]
 800148a:	2202      	movs	r2, #2
 800148c:	490f      	ldr	r1, [pc, #60]	; (80014cc <VL53L1_RdByte+0x6c>)
 800148e:	4618      	mov	r0, r3
 8001490:	f7ff ff7e 	bl	8001390 <_I2CWrite>
 8001494:	60b8      	str	r0, [r7, #8]
    if( status_int ){
 8001496:	68bb      	ldr	r3, [r7, #8]
 8001498:	2b00      	cmp	r3, #0
 800149a:	d002      	beq.n	80014a2 <VL53L1_RdByte+0x42>
        Status = VL53L1_ERROR_CONTROL_INTERFACE;
 800149c:	23f3      	movs	r3, #243	; 0xf3
 800149e:	73fb      	strb	r3, [r7, #15]
        goto done;
 80014a0:	e00d      	b.n	80014be <VL53L1_RdByte+0x5e>
    }
    status_int = _I2CRead(dev, data, 1);
 80014a2:	88fb      	ldrh	r3, [r7, #6]
 80014a4:	2201      	movs	r2, #1
 80014a6:	6839      	ldr	r1, [r7, #0]
 80014a8:	4618      	mov	r0, r3
 80014aa:	f7ff ff8f 	bl	80013cc <_I2CRead>
 80014ae:	60b8      	str	r0, [r7, #8]
    if (status_int != 0) {
 80014b0:	68bb      	ldr	r3, [r7, #8]
 80014b2:	2b00      	cmp	r3, #0
 80014b4:	d002      	beq.n	80014bc <VL53L1_RdByte+0x5c>
        Status = VL53L1_ERROR_CONTROL_INTERFACE;
 80014b6:	23f3      	movs	r3, #243	; 0xf3
 80014b8:	73fb      	strb	r3, [r7, #15]
 80014ba:	e000      	b.n	80014be <VL53L1_RdByte+0x5e>
    }
done:
 80014bc:	bf00      	nop

	return Status;
 80014be:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80014c2:	4618      	mov	r0, r3
 80014c4:	3710      	adds	r7, #16
 80014c6:	46bd      	mov	sp, r7
 80014c8:	bd80      	pop	{r7, pc}
 80014ca:	bf00      	nop
 80014cc:	20000280 	.word	0x20000280

080014d0 <VL53L1_RdWord>:

int8_t VL53L1_RdWord(uint16_t dev, uint16_t index, uint16_t *data) {
 80014d0:	b580      	push	{r7, lr}
 80014d2:	b084      	sub	sp, #16
 80014d4:	af00      	add	r7, sp, #0
 80014d6:	4603      	mov	r3, r0
 80014d8:	603a      	str	r2, [r7, #0]
 80014da:	80fb      	strh	r3, [r7, #6]
 80014dc:	460b      	mov	r3, r1
 80014de:	80bb      	strh	r3, [r7, #4]
    VL53L1_Error Status = VL53L1_ERROR_NONE;
 80014e0:	2300      	movs	r3, #0
 80014e2:	73fb      	strb	r3, [r7, #15]
    int32_t status_int;

    _I2CBuffer[0] = index>>8;
 80014e4:	88bb      	ldrh	r3, [r7, #4]
 80014e6:	0a1b      	lsrs	r3, r3, #8
 80014e8:	b29b      	uxth	r3, r3
 80014ea:	b2da      	uxtb	r2, r3
 80014ec:	4b18      	ldr	r3, [pc, #96]	; (8001550 <VL53L1_RdWord+0x80>)
 80014ee:	701a      	strb	r2, [r3, #0]
	_I2CBuffer[1] = index&0xFF;
 80014f0:	88bb      	ldrh	r3, [r7, #4]
 80014f2:	b2da      	uxtb	r2, r3
 80014f4:	4b16      	ldr	r3, [pc, #88]	; (8001550 <VL53L1_RdWord+0x80>)
 80014f6:	705a      	strb	r2, [r3, #1]
    status_int = _I2CWrite(dev, _I2CBuffer, 2);
 80014f8:	88fb      	ldrh	r3, [r7, #6]
 80014fa:	2202      	movs	r2, #2
 80014fc:	4914      	ldr	r1, [pc, #80]	; (8001550 <VL53L1_RdWord+0x80>)
 80014fe:	4618      	mov	r0, r3
 8001500:	f7ff ff46 	bl	8001390 <_I2CWrite>
 8001504:	60b8      	str	r0, [r7, #8]

    if( status_int ){
 8001506:	68bb      	ldr	r3, [r7, #8]
 8001508:	2b00      	cmp	r3, #0
 800150a:	d002      	beq.n	8001512 <VL53L1_RdWord+0x42>
        Status = VL53L1_ERROR_CONTROL_INTERFACE;
 800150c:	23f3      	movs	r3, #243	; 0xf3
 800150e:	73fb      	strb	r3, [r7, #15]
        goto done;
 8001510:	e018      	b.n	8001544 <VL53L1_RdWord+0x74>
    }
    status_int = _I2CRead(dev, _I2CBuffer, 2);
 8001512:	88fb      	ldrh	r3, [r7, #6]
 8001514:	2202      	movs	r2, #2
 8001516:	490e      	ldr	r1, [pc, #56]	; (8001550 <VL53L1_RdWord+0x80>)
 8001518:	4618      	mov	r0, r3
 800151a:	f7ff ff57 	bl	80013cc <_I2CRead>
 800151e:	60b8      	str	r0, [r7, #8]
    if (status_int != 0) {
 8001520:	68bb      	ldr	r3, [r7, #8]
 8001522:	2b00      	cmp	r3, #0
 8001524:	d002      	beq.n	800152c <VL53L1_RdWord+0x5c>
        Status = VL53L1_ERROR_CONTROL_INTERFACE;
 8001526:	23f3      	movs	r3, #243	; 0xf3
 8001528:	73fb      	strb	r3, [r7, #15]
        goto done;
 800152a:	e00b      	b.n	8001544 <VL53L1_RdWord+0x74>
    }

    *data = ((uint16_t)_I2CBuffer[0]<<8) + (uint16_t)_I2CBuffer[1];
 800152c:	4b08      	ldr	r3, [pc, #32]	; (8001550 <VL53L1_RdWord+0x80>)
 800152e:	781b      	ldrb	r3, [r3, #0]
 8001530:	b29b      	uxth	r3, r3
 8001532:	021b      	lsls	r3, r3, #8
 8001534:	b29a      	uxth	r2, r3
 8001536:	4b06      	ldr	r3, [pc, #24]	; (8001550 <VL53L1_RdWord+0x80>)
 8001538:	785b      	ldrb	r3, [r3, #1]
 800153a:	b29b      	uxth	r3, r3
 800153c:	4413      	add	r3, r2
 800153e:	b29a      	uxth	r2, r3
 8001540:	683b      	ldr	r3, [r7, #0]
 8001542:	801a      	strh	r2, [r3, #0]
done:
    return Status;}
 8001544:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001548:	4618      	mov	r0, r3
 800154a:	3710      	adds	r7, #16
 800154c:	46bd      	mov	sp, r7
 800154e:	bd80      	pop	{r7, pc}
 8001550:	20000280 	.word	0x20000280

08001554 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
   ldr   sp, =_estack      /* set stack pointer */
 8001554:	f8df d034 	ldr.w	sp, [pc, #52]	; 800158c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001558:	480d      	ldr	r0, [pc, #52]	; (8001590 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800155a:	490e      	ldr	r1, [pc, #56]	; (8001594 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 800155c:	4a0e      	ldr	r2, [pc, #56]	; (8001598 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800155e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001560:	e002      	b.n	8001568 <LoopCopyDataInit>

08001562 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001562:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001564:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001566:	3304      	adds	r3, #4

08001568 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001568:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800156a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800156c:	d3f9      	bcc.n	8001562 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800156e:	4a0b      	ldr	r2, [pc, #44]	; (800159c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001570:	4c0b      	ldr	r4, [pc, #44]	; (80015a0 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001572:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001574:	e001      	b.n	800157a <LoopFillZerobss>

08001576 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001576:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001578:	3204      	adds	r2, #4

0800157a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800157a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800157c:	d3fb      	bcc.n	8001576 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800157e:	f7ff fef5 	bl	800136c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001582:	f003 fb13 	bl	8004bac <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001586:	f7ff fa93 	bl	8000ab0 <main>
  bx  lr    
 800158a:	4770      	bx	lr
   ldr   sp, =_estack      /* set stack pointer */
 800158c:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8001590:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001594:	20000084 	.word	0x20000084
  ldr r2, =_sidata
 8001598:	0800d600 	.word	0x0800d600
  ldr r2, =_sbss
 800159c:	20000084 	.word	0x20000084
  ldr r4, =_ebss
 80015a0:	200007a0 	.word	0x200007a0

080015a4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80015a4:	e7fe      	b.n	80015a4 <ADC_IRQHandler>

080015a6 <ssd1306_Reset>:
#include <stdlib.h>
#include <string.h>  // For memcpy

#if defined(SSD1306_USE_I2C)

void ssd1306_Reset(void) {
 80015a6:	b480      	push	{r7}
 80015a8:	af00      	add	r7, sp, #0
    /* for I2C - do nothing */
}
 80015aa:	bf00      	nop
 80015ac:	46bd      	mov	sp, r7
 80015ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015b2:	4770      	bx	lr

080015b4 <ssd1306_WriteCommand>:

// Send a byte to the command register
void ssd1306_WriteCommand(uint8_t byte) {
 80015b4:	b580      	push	{r7, lr}
 80015b6:	b086      	sub	sp, #24
 80015b8:	af04      	add	r7, sp, #16
 80015ba:	4603      	mov	r3, r0
 80015bc:	71fb      	strb	r3, [r7, #7]
    HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x00, 1, &byte, 1, HAL_MAX_DELAY);
 80015be:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80015c2:	9302      	str	r3, [sp, #8]
 80015c4:	2301      	movs	r3, #1
 80015c6:	9301      	str	r3, [sp, #4]
 80015c8:	1dfb      	adds	r3, r7, #7
 80015ca:	9300      	str	r3, [sp, #0]
 80015cc:	2301      	movs	r3, #1
 80015ce:	2200      	movs	r2, #0
 80015d0:	2178      	movs	r1, #120	; 0x78
 80015d2:	4803      	ldr	r0, [pc, #12]	; (80015e0 <ssd1306_WriteCommand+0x2c>)
 80015d4:	f001 fc60 	bl	8002e98 <HAL_I2C_Mem_Write>
}
 80015d8:	bf00      	nop
 80015da:	3708      	adds	r7, #8
 80015dc:	46bd      	mov	sp, r7
 80015de:	bd80      	pop	{r7, pc}
 80015e0:	200000c4 	.word	0x200000c4

080015e4 <ssd1306_WriteData>:

// Send data
void ssd1306_WriteData(uint8_t* buffer, size_t buff_size) {
 80015e4:	b580      	push	{r7, lr}
 80015e6:	b086      	sub	sp, #24
 80015e8:	af04      	add	r7, sp, #16
 80015ea:	6078      	str	r0, [r7, #4]
 80015ec:	6039      	str	r1, [r7, #0]
    HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x40, 1, buffer, buff_size, HAL_MAX_DELAY);
 80015ee:	683b      	ldr	r3, [r7, #0]
 80015f0:	b29b      	uxth	r3, r3
 80015f2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80015f6:	9202      	str	r2, [sp, #8]
 80015f8:	9301      	str	r3, [sp, #4]
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	9300      	str	r3, [sp, #0]
 80015fe:	2301      	movs	r3, #1
 8001600:	2240      	movs	r2, #64	; 0x40
 8001602:	2178      	movs	r1, #120	; 0x78
 8001604:	4803      	ldr	r0, [pc, #12]	; (8001614 <ssd1306_WriteData+0x30>)
 8001606:	f001 fc47 	bl	8002e98 <HAL_I2C_Mem_Write>
}
 800160a:	bf00      	nop
 800160c:	3708      	adds	r7, #8
 800160e:	46bd      	mov	sp, r7
 8001610:	bd80      	pop	{r7, pc}
 8001612:	bf00      	nop
 8001614:	200000c4 	.word	0x200000c4

08001618 <ssd1306_Init>:
    }
    return ret;
}

/* Initialize the oled screen */
void ssd1306_Init(void) {
 8001618:	b580      	push	{r7, lr}
 800161a:	af00      	add	r7, sp, #0
    // Reset OLED
    ssd1306_Reset();
 800161c:	f7ff ffc3 	bl	80015a6 <ssd1306_Reset>

    // Wait for the screen to boot
    HAL_Delay(100);
 8001620:	2064      	movs	r0, #100	; 0x64
 8001622:	f000 fd29 	bl	8002078 <HAL_Delay>

    // Init OLED
    ssd1306_SetDisplayOn(0); //display off
 8001626:	2000      	movs	r0, #0
 8001628:	f000 fa34 	bl	8001a94 <ssd1306_SetDisplayOn>

    ssd1306_WriteCommand(0x20); //Set Memory Addressing Mode
 800162c:	2020      	movs	r0, #32
 800162e:	f7ff ffc1 	bl	80015b4 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x00); // 00b,Horizontal Addressing Mode; 01b,Vertical Addressing Mode;
 8001632:	2000      	movs	r0, #0
 8001634:	f7ff ffbe 	bl	80015b4 <ssd1306_WriteCommand>
                                // 10b,Page Addressing Mode (RESET); 11b,Invalid

    ssd1306_WriteCommand(0xB0); //Set Page Start Address for Page Addressing Mode,0-7
 8001638:	20b0      	movs	r0, #176	; 0xb0
 800163a:	f7ff ffbb 	bl	80015b4 <ssd1306_WriteCommand>

#ifdef SSD1306_MIRROR_VERT
    ssd1306_WriteCommand(0xC0); // Mirror vertically
#else
    ssd1306_WriteCommand(0xC8); //Set COM Output Scan Direction
 800163e:	20c8      	movs	r0, #200	; 0xc8
 8001640:	f7ff ffb8 	bl	80015b4 <ssd1306_WriteCommand>
#endif

    ssd1306_WriteCommand(0x00); //---set low column address
 8001644:	2000      	movs	r0, #0
 8001646:	f7ff ffb5 	bl	80015b4 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x10); //---set high column address
 800164a:	2010      	movs	r0, #16
 800164c:	f7ff ffb2 	bl	80015b4 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0x40); //--set start line address - CHECK
 8001650:	2040      	movs	r0, #64	; 0x40
 8001652:	f7ff ffaf 	bl	80015b4 <ssd1306_WriteCommand>

    ssd1306_SetContrast(0xFF);
 8001656:	20ff      	movs	r0, #255	; 0xff
 8001658:	f000 fa09 	bl	8001a6e <ssd1306_SetContrast>

#ifdef SSD1306_MIRROR_HORIZ
    ssd1306_WriteCommand(0xA0); // Mirror horizontally
#else
    ssd1306_WriteCommand(0xA1); //--set segment re-map 0 to 127 - CHECK
 800165c:	20a1      	movs	r0, #161	; 0xa1
 800165e:	f7ff ffa9 	bl	80015b4 <ssd1306_WriteCommand>
#endif

#ifdef SSD1306_INVERSE_COLOR
    ssd1306_WriteCommand(0xA7); //--set inverse color
#else
    ssd1306_WriteCommand(0xA6); //--set normal color
 8001662:	20a6      	movs	r0, #166	; 0xa6
 8001664:	f7ff ffa6 	bl	80015b4 <ssd1306_WriteCommand>
// Set multiplex ratio.
#if (SSD1306_HEIGHT == 128)
    // Found in the Luma Python lib for SH1106.
    ssd1306_WriteCommand(0xFF);
#else
    ssd1306_WriteCommand(0xA8); //--set multiplex ratio(1 to 64) - CHECK
 8001668:	20a8      	movs	r0, #168	; 0xa8
 800166a:	f7ff ffa3 	bl	80015b4 <ssd1306_WriteCommand>
#endif

#if (SSD1306_HEIGHT == 32)
    ssd1306_WriteCommand(0x1F); //
#elif (SSD1306_HEIGHT == 64)
    ssd1306_WriteCommand(0x3F); //
 800166e:	203f      	movs	r0, #63	; 0x3f
 8001670:	f7ff ffa0 	bl	80015b4 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x3F); // Seems to work for 128px high displays too.
#else
#error "Only 32, 64, or 128 lines of height are supported!"
#endif

    ssd1306_WriteCommand(0xA4); //0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 8001674:	20a4      	movs	r0, #164	; 0xa4
 8001676:	f7ff ff9d 	bl	80015b4 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD3); //-set display offset - CHECK
 800167a:	20d3      	movs	r0, #211	; 0xd3
 800167c:	f7ff ff9a 	bl	80015b4 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x00); //-not offset
 8001680:	2000      	movs	r0, #0
 8001682:	f7ff ff97 	bl	80015b4 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD5); //--set display clock divide ratio/oscillator frequency
 8001686:	20d5      	movs	r0, #213	; 0xd5
 8001688:	f7ff ff94 	bl	80015b4 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0xF0); //--set divide ratio
 800168c:	20f0      	movs	r0, #240	; 0xf0
 800168e:	f7ff ff91 	bl	80015b4 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD9); //--set pre-charge period
 8001692:	20d9      	movs	r0, #217	; 0xd9
 8001694:	f7ff ff8e 	bl	80015b4 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x22); //
 8001698:	2022      	movs	r0, #34	; 0x22
 800169a:	f7ff ff8b 	bl	80015b4 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xDA); //--set com pins hardware configuration - CHECK
 800169e:	20da      	movs	r0, #218	; 0xda
 80016a0:	f7ff ff88 	bl	80015b4 <ssd1306_WriteCommand>
#if (SSD1306_HEIGHT == 32)
    ssd1306_WriteCommand(0x02);
#elif (SSD1306_HEIGHT == 64)
    ssd1306_WriteCommand(0x12);
 80016a4:	2012      	movs	r0, #18
 80016a6:	f7ff ff85 	bl	80015b4 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x12);
#else
#error "Only 32, 64, or 128 lines of height are supported!"
#endif

    ssd1306_WriteCommand(0xDB); //--set vcomh
 80016aa:	20db      	movs	r0, #219	; 0xdb
 80016ac:	f7ff ff82 	bl	80015b4 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x20); //0x20,0.77xVcc
 80016b0:	2020      	movs	r0, #32
 80016b2:	f7ff ff7f 	bl	80015b4 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0x8D); //--set DC-DC enable
 80016b6:	208d      	movs	r0, #141	; 0x8d
 80016b8:	f7ff ff7c 	bl	80015b4 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x14); //
 80016bc:	2014      	movs	r0, #20
 80016be:	f7ff ff79 	bl	80015b4 <ssd1306_WriteCommand>
    ssd1306_SetDisplayOn(1); //--turn on SSD1306 panel
 80016c2:	2001      	movs	r0, #1
 80016c4:	f000 f9e6 	bl	8001a94 <ssd1306_SetDisplayOn>

    // Clear screen
    ssd1306_Fill(Black);
 80016c8:	2000      	movs	r0, #0
 80016ca:	f000 f80f 	bl	80016ec <ssd1306_Fill>
    
    // Flush buffer to screen
    ssd1306_UpdateScreen();
 80016ce:	f000 f831 	bl	8001734 <ssd1306_UpdateScreen>
    
    // Set default values for screen object
    SSD1306.CurrentX = 0;
 80016d2:	4b05      	ldr	r3, [pc, #20]	; (80016e8 <ssd1306_Init+0xd0>)
 80016d4:	2200      	movs	r2, #0
 80016d6:	801a      	strh	r2, [r3, #0]
    SSD1306.CurrentY = 0;
 80016d8:	4b03      	ldr	r3, [pc, #12]	; (80016e8 <ssd1306_Init+0xd0>)
 80016da:	2200      	movs	r2, #0
 80016dc:	805a      	strh	r2, [r3, #2]
    
    SSD1306.Initialized = 1;
 80016de:	4b02      	ldr	r3, [pc, #8]	; (80016e8 <ssd1306_Init+0xd0>)
 80016e0:	2201      	movs	r2, #1
 80016e2:	711a      	strb	r2, [r3, #4]
}
 80016e4:	bf00      	nop
 80016e6:	bd80      	pop	{r7, pc}
 80016e8:	20000780 	.word	0x20000780

080016ec <ssd1306_Fill>:

/* Fill the whole screen with the given color */
void ssd1306_Fill(SSD1306_COLOR color) {
 80016ec:	b480      	push	{r7}
 80016ee:	b085      	sub	sp, #20
 80016f0:	af00      	add	r7, sp, #0
 80016f2:	4603      	mov	r3, r0
 80016f4:	71fb      	strb	r3, [r7, #7]
    uint32_t i;

    for(i = 0; i < sizeof(SSD1306_Buffer); i++) {
 80016f6:	2300      	movs	r3, #0
 80016f8:	60fb      	str	r3, [r7, #12]
 80016fa:	e00d      	b.n	8001718 <ssd1306_Fill+0x2c>
        SSD1306_Buffer[i] = (color == Black) ? 0x00 : 0xFF;
 80016fc:	79fb      	ldrb	r3, [r7, #7]
 80016fe:	2b00      	cmp	r3, #0
 8001700:	d101      	bne.n	8001706 <ssd1306_Fill+0x1a>
 8001702:	2100      	movs	r1, #0
 8001704:	e000      	b.n	8001708 <ssd1306_Fill+0x1c>
 8001706:	21ff      	movs	r1, #255	; 0xff
 8001708:	4a09      	ldr	r2, [pc, #36]	; (8001730 <ssd1306_Fill+0x44>)
 800170a:	68fb      	ldr	r3, [r7, #12]
 800170c:	4413      	add	r3, r2
 800170e:	460a      	mov	r2, r1
 8001710:	701a      	strb	r2, [r3, #0]
    for(i = 0; i < sizeof(SSD1306_Buffer); i++) {
 8001712:	68fb      	ldr	r3, [r7, #12]
 8001714:	3301      	adds	r3, #1
 8001716:	60fb      	str	r3, [r7, #12]
 8001718:	68fb      	ldr	r3, [r7, #12]
 800171a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800171e:	d3ed      	bcc.n	80016fc <ssd1306_Fill+0x10>
    }
}
 8001720:	bf00      	nop
 8001722:	bf00      	nop
 8001724:	3714      	adds	r7, #20
 8001726:	46bd      	mov	sp, r7
 8001728:	f85d 7b04 	ldr.w	r7, [sp], #4
 800172c:	4770      	bx	lr
 800172e:	bf00      	nop
 8001730:	20000380 	.word	0x20000380

08001734 <ssd1306_UpdateScreen>:

/* Write the screenbuffer with changed to the screen */
void ssd1306_UpdateScreen(void) {
 8001734:	b580      	push	{r7, lr}
 8001736:	b082      	sub	sp, #8
 8001738:	af00      	add	r7, sp, #0
    // depends on the screen height:
    //
    //  * 32px   ==  4 pages
    //  * 64px   ==  8 pages
    //  * 128px  ==  16 pages
    for(uint8_t i = 0; i < SSD1306_HEIGHT/8; i++) {
 800173a:	2300      	movs	r3, #0
 800173c:	71fb      	strb	r3, [r7, #7]
 800173e:	e016      	b.n	800176e <ssd1306_UpdateScreen+0x3a>
        ssd1306_WriteCommand(0xB0 + i); // Set the current RAM page address.
 8001740:	79fb      	ldrb	r3, [r7, #7]
 8001742:	3b50      	subs	r3, #80	; 0x50
 8001744:	b2db      	uxtb	r3, r3
 8001746:	4618      	mov	r0, r3
 8001748:	f7ff ff34 	bl	80015b4 <ssd1306_WriteCommand>
        ssd1306_WriteCommand(0x00 + SSD1306_X_OFFSET_LOWER);
 800174c:	2000      	movs	r0, #0
 800174e:	f7ff ff31 	bl	80015b4 <ssd1306_WriteCommand>
        ssd1306_WriteCommand(0x10 + SSD1306_X_OFFSET_UPPER);
 8001752:	2010      	movs	r0, #16
 8001754:	f7ff ff2e 	bl	80015b4 <ssd1306_WriteCommand>
        ssd1306_WriteData(&SSD1306_Buffer[SSD1306_WIDTH*i],SSD1306_WIDTH);
 8001758:	79fb      	ldrb	r3, [r7, #7]
 800175a:	01db      	lsls	r3, r3, #7
 800175c:	4a08      	ldr	r2, [pc, #32]	; (8001780 <ssd1306_UpdateScreen+0x4c>)
 800175e:	4413      	add	r3, r2
 8001760:	2180      	movs	r1, #128	; 0x80
 8001762:	4618      	mov	r0, r3
 8001764:	f7ff ff3e 	bl	80015e4 <ssd1306_WriteData>
    for(uint8_t i = 0; i < SSD1306_HEIGHT/8; i++) {
 8001768:	79fb      	ldrb	r3, [r7, #7]
 800176a:	3301      	adds	r3, #1
 800176c:	71fb      	strb	r3, [r7, #7]
 800176e:	79fb      	ldrb	r3, [r7, #7]
 8001770:	2b07      	cmp	r3, #7
 8001772:	d9e5      	bls.n	8001740 <ssd1306_UpdateScreen+0xc>
    }
}
 8001774:	bf00      	nop
 8001776:	bf00      	nop
 8001778:	3708      	adds	r7, #8
 800177a:	46bd      	mov	sp, r7
 800177c:	bd80      	pop	{r7, pc}
 800177e:	bf00      	nop
 8001780:	20000380 	.word	0x20000380

08001784 <ssd1306_DrawPixel>:
 * Draw one pixel in the screenbuffer
 * X => X Coordinate
 * Y => Y Coordinate
 * color => Pixel color
 */
void ssd1306_DrawPixel(uint8_t x, uint8_t y, SSD1306_COLOR color) {
 8001784:	b480      	push	{r7}
 8001786:	b083      	sub	sp, #12
 8001788:	af00      	add	r7, sp, #0
 800178a:	4603      	mov	r3, r0
 800178c:	71fb      	strb	r3, [r7, #7]
 800178e:	460b      	mov	r3, r1
 8001790:	71bb      	strb	r3, [r7, #6]
 8001792:	4613      	mov	r3, r2
 8001794:	717b      	strb	r3, [r7, #5]
    if(x >= SSD1306_WIDTH || y >= SSD1306_HEIGHT) {
 8001796:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800179a:	2b00      	cmp	r3, #0
 800179c:	db3d      	blt.n	800181a <ssd1306_DrawPixel+0x96>
 800179e:	79bb      	ldrb	r3, [r7, #6]
 80017a0:	2b3f      	cmp	r3, #63	; 0x3f
 80017a2:	d83a      	bhi.n	800181a <ssd1306_DrawPixel+0x96>
        // Don't write outside the buffer
        return;
    }
   
    // Draw in the right color
    if(color == White) {
 80017a4:	797b      	ldrb	r3, [r7, #5]
 80017a6:	2b01      	cmp	r3, #1
 80017a8:	d11a      	bne.n	80017e0 <ssd1306_DrawPixel+0x5c>
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 80017aa:	79fa      	ldrb	r2, [r7, #7]
 80017ac:	79bb      	ldrb	r3, [r7, #6]
 80017ae:	08db      	lsrs	r3, r3, #3
 80017b0:	b2d8      	uxtb	r0, r3
 80017b2:	4603      	mov	r3, r0
 80017b4:	01db      	lsls	r3, r3, #7
 80017b6:	4413      	add	r3, r2
 80017b8:	4a1b      	ldr	r2, [pc, #108]	; (8001828 <ssd1306_DrawPixel+0xa4>)
 80017ba:	5cd3      	ldrb	r3, [r2, r3]
 80017bc:	b25a      	sxtb	r2, r3
 80017be:	79bb      	ldrb	r3, [r7, #6]
 80017c0:	f003 0307 	and.w	r3, r3, #7
 80017c4:	2101      	movs	r1, #1
 80017c6:	fa01 f303 	lsl.w	r3, r1, r3
 80017ca:	b25b      	sxtb	r3, r3
 80017cc:	4313      	orrs	r3, r2
 80017ce:	b259      	sxtb	r1, r3
 80017d0:	79fa      	ldrb	r2, [r7, #7]
 80017d2:	4603      	mov	r3, r0
 80017d4:	01db      	lsls	r3, r3, #7
 80017d6:	4413      	add	r3, r2
 80017d8:	b2c9      	uxtb	r1, r1
 80017da:	4a13      	ldr	r2, [pc, #76]	; (8001828 <ssd1306_DrawPixel+0xa4>)
 80017dc:	54d1      	strb	r1, [r2, r3]
 80017de:	e01d      	b.n	800181c <ssd1306_DrawPixel+0x98>
    } else { 
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 80017e0:	79fa      	ldrb	r2, [r7, #7]
 80017e2:	79bb      	ldrb	r3, [r7, #6]
 80017e4:	08db      	lsrs	r3, r3, #3
 80017e6:	b2d8      	uxtb	r0, r3
 80017e8:	4603      	mov	r3, r0
 80017ea:	01db      	lsls	r3, r3, #7
 80017ec:	4413      	add	r3, r2
 80017ee:	4a0e      	ldr	r2, [pc, #56]	; (8001828 <ssd1306_DrawPixel+0xa4>)
 80017f0:	5cd3      	ldrb	r3, [r2, r3]
 80017f2:	b25a      	sxtb	r2, r3
 80017f4:	79bb      	ldrb	r3, [r7, #6]
 80017f6:	f003 0307 	and.w	r3, r3, #7
 80017fa:	2101      	movs	r1, #1
 80017fc:	fa01 f303 	lsl.w	r3, r1, r3
 8001800:	b25b      	sxtb	r3, r3
 8001802:	43db      	mvns	r3, r3
 8001804:	b25b      	sxtb	r3, r3
 8001806:	4013      	ands	r3, r2
 8001808:	b259      	sxtb	r1, r3
 800180a:	79fa      	ldrb	r2, [r7, #7]
 800180c:	4603      	mov	r3, r0
 800180e:	01db      	lsls	r3, r3, #7
 8001810:	4413      	add	r3, r2
 8001812:	b2c9      	uxtb	r1, r1
 8001814:	4a04      	ldr	r2, [pc, #16]	; (8001828 <ssd1306_DrawPixel+0xa4>)
 8001816:	54d1      	strb	r1, [r2, r3]
 8001818:	e000      	b.n	800181c <ssd1306_DrawPixel+0x98>
        return;
 800181a:	bf00      	nop
    }
}
 800181c:	370c      	adds	r7, #12
 800181e:	46bd      	mov	sp, r7
 8001820:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001824:	4770      	bx	lr
 8001826:	bf00      	nop
 8001828:	20000380 	.word	0x20000380

0800182c <ssd1306_WriteChar>:
 * Draw 1 char to the screen buffer
 * ch       => char om weg te schrijven
 * Font     => Font waarmee we gaan schrijven
 * color    => Black or White
 */
char ssd1306_WriteChar(char ch, FontDef Font, SSD1306_COLOR color) {
 800182c:	b590      	push	{r4, r7, lr}
 800182e:	b089      	sub	sp, #36	; 0x24
 8001830:	af00      	add	r7, sp, #0
 8001832:	4604      	mov	r4, r0
 8001834:	1d38      	adds	r0, r7, #4
 8001836:	e880 0006 	stmia.w	r0, {r1, r2}
 800183a:	461a      	mov	r2, r3
 800183c:	4623      	mov	r3, r4
 800183e:	73fb      	strb	r3, [r7, #15]
 8001840:	4613      	mov	r3, r2
 8001842:	73bb      	strb	r3, [r7, #14]
    uint32_t i, b, j;
    
    // Check if character is valid
    if (ch < 32 || ch > 126)
 8001844:	7bfb      	ldrb	r3, [r7, #15]
 8001846:	2b1f      	cmp	r3, #31
 8001848:	d902      	bls.n	8001850 <ssd1306_WriteChar+0x24>
 800184a:	7bfb      	ldrb	r3, [r7, #15]
 800184c:	2b7e      	cmp	r3, #126	; 0x7e
 800184e:	d901      	bls.n	8001854 <ssd1306_WriteChar+0x28>
        return 0;
 8001850:	2300      	movs	r3, #0
 8001852:	e06d      	b.n	8001930 <ssd1306_WriteChar+0x104>
    
    // Check remaining space on current line
    if (SSD1306_WIDTH < (SSD1306.CurrentX + Font.FontWidth) ||
 8001854:	4b38      	ldr	r3, [pc, #224]	; (8001938 <ssd1306_WriteChar+0x10c>)
 8001856:	881b      	ldrh	r3, [r3, #0]
 8001858:	461a      	mov	r2, r3
 800185a:	793b      	ldrb	r3, [r7, #4]
 800185c:	4413      	add	r3, r2
 800185e:	2b80      	cmp	r3, #128	; 0x80
 8001860:	dc06      	bgt.n	8001870 <ssd1306_WriteChar+0x44>
        SSD1306_HEIGHT < (SSD1306.CurrentY + Font.FontHeight))
 8001862:	4b35      	ldr	r3, [pc, #212]	; (8001938 <ssd1306_WriteChar+0x10c>)
 8001864:	885b      	ldrh	r3, [r3, #2]
 8001866:	461a      	mov	r2, r3
 8001868:	797b      	ldrb	r3, [r7, #5]
 800186a:	4413      	add	r3, r2
    if (SSD1306_WIDTH < (SSD1306.CurrentX + Font.FontWidth) ||
 800186c:	2b40      	cmp	r3, #64	; 0x40
 800186e:	dd01      	ble.n	8001874 <ssd1306_WriteChar+0x48>
    {
        // Not enough space on current line
        return 0;
 8001870:	2300      	movs	r3, #0
 8001872:	e05d      	b.n	8001930 <ssd1306_WriteChar+0x104>
    }
    
    // Use the font to write
    for(i = 0; i < Font.FontHeight; i++) {
 8001874:	2300      	movs	r3, #0
 8001876:	61fb      	str	r3, [r7, #28]
 8001878:	e04c      	b.n	8001914 <ssd1306_WriteChar+0xe8>
        b = Font.data[(ch - 32) * Font.FontHeight + i];
 800187a:	68ba      	ldr	r2, [r7, #8]
 800187c:	7bfb      	ldrb	r3, [r7, #15]
 800187e:	3b20      	subs	r3, #32
 8001880:	7979      	ldrb	r1, [r7, #5]
 8001882:	fb01 f303 	mul.w	r3, r1, r3
 8001886:	4619      	mov	r1, r3
 8001888:	69fb      	ldr	r3, [r7, #28]
 800188a:	440b      	add	r3, r1
 800188c:	005b      	lsls	r3, r3, #1
 800188e:	4413      	add	r3, r2
 8001890:	881b      	ldrh	r3, [r3, #0]
 8001892:	617b      	str	r3, [r7, #20]
        for(j = 0; j < Font.FontWidth; j++) {
 8001894:	2300      	movs	r3, #0
 8001896:	61bb      	str	r3, [r7, #24]
 8001898:	e034      	b.n	8001904 <ssd1306_WriteChar+0xd8>
            if((b << j) & 0x8000)  {
 800189a:	697a      	ldr	r2, [r7, #20]
 800189c:	69bb      	ldr	r3, [r7, #24]
 800189e:	fa02 f303 	lsl.w	r3, r2, r3
 80018a2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80018a6:	2b00      	cmp	r3, #0
 80018a8:	d012      	beq.n	80018d0 <ssd1306_WriteChar+0xa4>
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR) color);
 80018aa:	4b23      	ldr	r3, [pc, #140]	; (8001938 <ssd1306_WriteChar+0x10c>)
 80018ac:	881b      	ldrh	r3, [r3, #0]
 80018ae:	b2da      	uxtb	r2, r3
 80018b0:	69bb      	ldr	r3, [r7, #24]
 80018b2:	b2db      	uxtb	r3, r3
 80018b4:	4413      	add	r3, r2
 80018b6:	b2d8      	uxtb	r0, r3
 80018b8:	4b1f      	ldr	r3, [pc, #124]	; (8001938 <ssd1306_WriteChar+0x10c>)
 80018ba:	885b      	ldrh	r3, [r3, #2]
 80018bc:	b2da      	uxtb	r2, r3
 80018be:	69fb      	ldr	r3, [r7, #28]
 80018c0:	b2db      	uxtb	r3, r3
 80018c2:	4413      	add	r3, r2
 80018c4:	b2db      	uxtb	r3, r3
 80018c6:	7bba      	ldrb	r2, [r7, #14]
 80018c8:	4619      	mov	r1, r3
 80018ca:	f7ff ff5b 	bl	8001784 <ssd1306_DrawPixel>
 80018ce:	e016      	b.n	80018fe <ssd1306_WriteChar+0xd2>
            } else {
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR)!color);
 80018d0:	4b19      	ldr	r3, [pc, #100]	; (8001938 <ssd1306_WriteChar+0x10c>)
 80018d2:	881b      	ldrh	r3, [r3, #0]
 80018d4:	b2da      	uxtb	r2, r3
 80018d6:	69bb      	ldr	r3, [r7, #24]
 80018d8:	b2db      	uxtb	r3, r3
 80018da:	4413      	add	r3, r2
 80018dc:	b2d8      	uxtb	r0, r3
 80018de:	4b16      	ldr	r3, [pc, #88]	; (8001938 <ssd1306_WriteChar+0x10c>)
 80018e0:	885b      	ldrh	r3, [r3, #2]
 80018e2:	b2da      	uxtb	r2, r3
 80018e4:	69fb      	ldr	r3, [r7, #28]
 80018e6:	b2db      	uxtb	r3, r3
 80018e8:	4413      	add	r3, r2
 80018ea:	b2d9      	uxtb	r1, r3
 80018ec:	7bbb      	ldrb	r3, [r7, #14]
 80018ee:	2b00      	cmp	r3, #0
 80018f0:	bf0c      	ite	eq
 80018f2:	2301      	moveq	r3, #1
 80018f4:	2300      	movne	r3, #0
 80018f6:	b2db      	uxtb	r3, r3
 80018f8:	461a      	mov	r2, r3
 80018fa:	f7ff ff43 	bl	8001784 <ssd1306_DrawPixel>
        for(j = 0; j < Font.FontWidth; j++) {
 80018fe:	69bb      	ldr	r3, [r7, #24]
 8001900:	3301      	adds	r3, #1
 8001902:	61bb      	str	r3, [r7, #24]
 8001904:	793b      	ldrb	r3, [r7, #4]
 8001906:	461a      	mov	r2, r3
 8001908:	69bb      	ldr	r3, [r7, #24]
 800190a:	4293      	cmp	r3, r2
 800190c:	d3c5      	bcc.n	800189a <ssd1306_WriteChar+0x6e>
    for(i = 0; i < Font.FontHeight; i++) {
 800190e:	69fb      	ldr	r3, [r7, #28]
 8001910:	3301      	adds	r3, #1
 8001912:	61fb      	str	r3, [r7, #28]
 8001914:	797b      	ldrb	r3, [r7, #5]
 8001916:	461a      	mov	r2, r3
 8001918:	69fb      	ldr	r3, [r7, #28]
 800191a:	4293      	cmp	r3, r2
 800191c:	d3ad      	bcc.n	800187a <ssd1306_WriteChar+0x4e>
            }
        }
    }
    
    // The current space is now taken
    SSD1306.CurrentX += Font.FontWidth;
 800191e:	4b06      	ldr	r3, [pc, #24]	; (8001938 <ssd1306_WriteChar+0x10c>)
 8001920:	881a      	ldrh	r2, [r3, #0]
 8001922:	793b      	ldrb	r3, [r7, #4]
 8001924:	b29b      	uxth	r3, r3
 8001926:	4413      	add	r3, r2
 8001928:	b29a      	uxth	r2, r3
 800192a:	4b03      	ldr	r3, [pc, #12]	; (8001938 <ssd1306_WriteChar+0x10c>)
 800192c:	801a      	strh	r2, [r3, #0]
    
    // Return written char for validation
    return ch;
 800192e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001930:	4618      	mov	r0, r3
 8001932:	3724      	adds	r7, #36	; 0x24
 8001934:	46bd      	mov	sp, r7
 8001936:	bd90      	pop	{r4, r7, pc}
 8001938:	20000780 	.word	0x20000780

0800193c <ssd1306_WriteString>:

/* Write full string to screenbuffer */
char ssd1306_WriteString(char* str, FontDef Font, SSD1306_COLOR color) {
 800193c:	b580      	push	{r7, lr}
 800193e:	b084      	sub	sp, #16
 8001940:	af00      	add	r7, sp, #0
 8001942:	60f8      	str	r0, [r7, #12]
 8001944:	1d38      	adds	r0, r7, #4
 8001946:	e880 0006 	stmia.w	r0, {r1, r2}
 800194a:	70fb      	strb	r3, [r7, #3]
    while (*str) {
 800194c:	e012      	b.n	8001974 <ssd1306_WriteString+0x38>
        if (ssd1306_WriteChar(*str, Font, color) != *str) {
 800194e:	68fb      	ldr	r3, [r7, #12]
 8001950:	7818      	ldrb	r0, [r3, #0]
 8001952:	78fb      	ldrb	r3, [r7, #3]
 8001954:	1d3a      	adds	r2, r7, #4
 8001956:	ca06      	ldmia	r2, {r1, r2}
 8001958:	f7ff ff68 	bl	800182c <ssd1306_WriteChar>
 800195c:	4603      	mov	r3, r0
 800195e:	461a      	mov	r2, r3
 8001960:	68fb      	ldr	r3, [r7, #12]
 8001962:	781b      	ldrb	r3, [r3, #0]
 8001964:	429a      	cmp	r2, r3
 8001966:	d002      	beq.n	800196e <ssd1306_WriteString+0x32>
            // Char could not be written
            return *str;
 8001968:	68fb      	ldr	r3, [r7, #12]
 800196a:	781b      	ldrb	r3, [r3, #0]
 800196c:	e008      	b.n	8001980 <ssd1306_WriteString+0x44>
        }
        str++;
 800196e:	68fb      	ldr	r3, [r7, #12]
 8001970:	3301      	adds	r3, #1
 8001972:	60fb      	str	r3, [r7, #12]
    while (*str) {
 8001974:	68fb      	ldr	r3, [r7, #12]
 8001976:	781b      	ldrb	r3, [r3, #0]
 8001978:	2b00      	cmp	r3, #0
 800197a:	d1e8      	bne.n	800194e <ssd1306_WriteString+0x12>
    }
    
    // Everything ok
    return *str;
 800197c:	68fb      	ldr	r3, [r7, #12]
 800197e:	781b      	ldrb	r3, [r3, #0]
}
 8001980:	4618      	mov	r0, r3
 8001982:	3710      	adds	r7, #16
 8001984:	46bd      	mov	sp, r7
 8001986:	bd80      	pop	{r7, pc}

08001988 <ssd1306_SetCursor>:

/* Position the cursor */
void ssd1306_SetCursor(uint8_t x, uint8_t y) {
 8001988:	b480      	push	{r7}
 800198a:	b083      	sub	sp, #12
 800198c:	af00      	add	r7, sp, #0
 800198e:	4603      	mov	r3, r0
 8001990:	460a      	mov	r2, r1
 8001992:	71fb      	strb	r3, [r7, #7]
 8001994:	4613      	mov	r3, r2
 8001996:	71bb      	strb	r3, [r7, #6]
    SSD1306.CurrentX = x;
 8001998:	79fb      	ldrb	r3, [r7, #7]
 800199a:	b29a      	uxth	r2, r3
 800199c:	4b05      	ldr	r3, [pc, #20]	; (80019b4 <ssd1306_SetCursor+0x2c>)
 800199e:	801a      	strh	r2, [r3, #0]
    SSD1306.CurrentY = y;
 80019a0:	79bb      	ldrb	r3, [r7, #6]
 80019a2:	b29a      	uxth	r2, r3
 80019a4:	4b03      	ldr	r3, [pc, #12]	; (80019b4 <ssd1306_SetCursor+0x2c>)
 80019a6:	805a      	strh	r2, [r3, #2]
}
 80019a8:	bf00      	nop
 80019aa:	370c      	adds	r7, #12
 80019ac:	46bd      	mov	sp, r7
 80019ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019b2:	4770      	bx	lr
 80019b4:	20000780 	.word	0x20000780

080019b8 <ssd1306_DrawBitmap>:
    }
    return;
}

/* Draw a bitmap */
void ssd1306_DrawBitmap(uint8_t x, uint8_t y, const unsigned char* bitmap, uint8_t w, uint8_t h, SSD1306_COLOR color) {
 80019b8:	b580      	push	{r7, lr}
 80019ba:	b084      	sub	sp, #16
 80019bc:	af00      	add	r7, sp, #0
 80019be:	603a      	str	r2, [r7, #0]
 80019c0:	461a      	mov	r2, r3
 80019c2:	4603      	mov	r3, r0
 80019c4:	71fb      	strb	r3, [r7, #7]
 80019c6:	460b      	mov	r3, r1
 80019c8:	71bb      	strb	r3, [r7, #6]
 80019ca:	4613      	mov	r3, r2
 80019cc:	717b      	strb	r3, [r7, #5]
    int16_t byteWidth = (w + 7) / 8; // Bitmap scanline pad = whole byte
 80019ce:	797b      	ldrb	r3, [r7, #5]
 80019d0:	3307      	adds	r3, #7
 80019d2:	2b00      	cmp	r3, #0
 80019d4:	da00      	bge.n	80019d8 <ssd1306_DrawBitmap+0x20>
 80019d6:	3307      	adds	r3, #7
 80019d8:	10db      	asrs	r3, r3, #3
 80019da:	817b      	strh	r3, [r7, #10]
    uint8_t byte = 0;
 80019dc:	2300      	movs	r3, #0
 80019de:	73fb      	strb	r3, [r7, #15]

    if (x >= SSD1306_WIDTH || y >= SSD1306_HEIGHT) {
 80019e0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019e4:	2b00      	cmp	r3, #0
 80019e6:	db3e      	blt.n	8001a66 <ssd1306_DrawBitmap+0xae>
 80019e8:	79bb      	ldrb	r3, [r7, #6]
 80019ea:	2b3f      	cmp	r3, #63	; 0x3f
 80019ec:	d83b      	bhi.n	8001a66 <ssd1306_DrawBitmap+0xae>
        return;
    }

    for (uint8_t j = 0; j < h; j++, y++) {
 80019ee:	2300      	movs	r3, #0
 80019f0:	73bb      	strb	r3, [r7, #14]
 80019f2:	e033      	b.n	8001a5c <ssd1306_DrawBitmap+0xa4>
        for (uint8_t i = 0; i < w; i++) {
 80019f4:	2300      	movs	r3, #0
 80019f6:	737b      	strb	r3, [r7, #13]
 80019f8:	e026      	b.n	8001a48 <ssd1306_DrawBitmap+0x90>
            if (i & 7) {
 80019fa:	7b7b      	ldrb	r3, [r7, #13]
 80019fc:	f003 0307 	and.w	r3, r3, #7
 8001a00:	2b00      	cmp	r3, #0
 8001a02:	d003      	beq.n	8001a0c <ssd1306_DrawBitmap+0x54>
                byte <<= 1;
 8001a04:	7bfb      	ldrb	r3, [r7, #15]
 8001a06:	005b      	lsls	r3, r3, #1
 8001a08:	73fb      	strb	r3, [r7, #15]
 8001a0a:	e00d      	b.n	8001a28 <ssd1306_DrawBitmap+0x70>
            } else {
                byte = (*(const unsigned char *)(&bitmap[j * byteWidth + i / 8]));
 8001a0c:	7bbb      	ldrb	r3, [r7, #14]
 8001a0e:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 8001a12:	fb02 f303 	mul.w	r3, r2, r3
 8001a16:	7b7a      	ldrb	r2, [r7, #13]
 8001a18:	08d2      	lsrs	r2, r2, #3
 8001a1a:	b2d2      	uxtb	r2, r2
 8001a1c:	4413      	add	r3, r2
 8001a1e:	461a      	mov	r2, r3
 8001a20:	683b      	ldr	r3, [r7, #0]
 8001a22:	4413      	add	r3, r2
 8001a24:	781b      	ldrb	r3, [r3, #0]
 8001a26:	73fb      	strb	r3, [r7, #15]
            }

            if (byte & 0x80) {
 8001a28:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001a2c:	2b00      	cmp	r3, #0
 8001a2e:	da08      	bge.n	8001a42 <ssd1306_DrawBitmap+0x8a>
                ssd1306_DrawPixel(x + i, y, color);
 8001a30:	79fa      	ldrb	r2, [r7, #7]
 8001a32:	7b7b      	ldrb	r3, [r7, #13]
 8001a34:	4413      	add	r3, r2
 8001a36:	b2db      	uxtb	r3, r3
 8001a38:	7f3a      	ldrb	r2, [r7, #28]
 8001a3a:	79b9      	ldrb	r1, [r7, #6]
 8001a3c:	4618      	mov	r0, r3
 8001a3e:	f7ff fea1 	bl	8001784 <ssd1306_DrawPixel>
        for (uint8_t i = 0; i < w; i++) {
 8001a42:	7b7b      	ldrb	r3, [r7, #13]
 8001a44:	3301      	adds	r3, #1
 8001a46:	737b      	strb	r3, [r7, #13]
 8001a48:	7b7a      	ldrb	r2, [r7, #13]
 8001a4a:	797b      	ldrb	r3, [r7, #5]
 8001a4c:	429a      	cmp	r2, r3
 8001a4e:	d3d4      	bcc.n	80019fa <ssd1306_DrawBitmap+0x42>
    for (uint8_t j = 0; j < h; j++, y++) {
 8001a50:	7bbb      	ldrb	r3, [r7, #14]
 8001a52:	3301      	adds	r3, #1
 8001a54:	73bb      	strb	r3, [r7, #14]
 8001a56:	79bb      	ldrb	r3, [r7, #6]
 8001a58:	3301      	adds	r3, #1
 8001a5a:	71bb      	strb	r3, [r7, #6]
 8001a5c:	7bba      	ldrb	r2, [r7, #14]
 8001a5e:	7e3b      	ldrb	r3, [r7, #24]
 8001a60:	429a      	cmp	r2, r3
 8001a62:	d3c7      	bcc.n	80019f4 <ssd1306_DrawBitmap+0x3c>
            }
        }
    }
    return;
 8001a64:	e000      	b.n	8001a68 <ssd1306_DrawBitmap+0xb0>
        return;
 8001a66:	bf00      	nop
}
 8001a68:	3710      	adds	r7, #16
 8001a6a:	46bd      	mov	sp, r7
 8001a6c:	bd80      	pop	{r7, pc}

08001a6e <ssd1306_SetContrast>:

void ssd1306_SetContrast(const uint8_t value) {
 8001a6e:	b580      	push	{r7, lr}
 8001a70:	b084      	sub	sp, #16
 8001a72:	af00      	add	r7, sp, #0
 8001a74:	4603      	mov	r3, r0
 8001a76:	71fb      	strb	r3, [r7, #7]
    const uint8_t kSetContrastControlRegister = 0x81;
 8001a78:	2381      	movs	r3, #129	; 0x81
 8001a7a:	73fb      	strb	r3, [r7, #15]
    ssd1306_WriteCommand(kSetContrastControlRegister);
 8001a7c:	7bfb      	ldrb	r3, [r7, #15]
 8001a7e:	4618      	mov	r0, r3
 8001a80:	f7ff fd98 	bl	80015b4 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(value);
 8001a84:	79fb      	ldrb	r3, [r7, #7]
 8001a86:	4618      	mov	r0, r3
 8001a88:	f7ff fd94 	bl	80015b4 <ssd1306_WriteCommand>
}
 8001a8c:	bf00      	nop
 8001a8e:	3710      	adds	r7, #16
 8001a90:	46bd      	mov	sp, r7
 8001a92:	bd80      	pop	{r7, pc}

08001a94 <ssd1306_SetDisplayOn>:

void ssd1306_SetDisplayOn(const uint8_t on) {
 8001a94:	b580      	push	{r7, lr}
 8001a96:	b084      	sub	sp, #16
 8001a98:	af00      	add	r7, sp, #0
 8001a9a:	4603      	mov	r3, r0
 8001a9c:	71fb      	strb	r3, [r7, #7]
    uint8_t value;
    if (on) {
 8001a9e:	79fb      	ldrb	r3, [r7, #7]
 8001aa0:	2b00      	cmp	r3, #0
 8001aa2:	d005      	beq.n	8001ab0 <ssd1306_SetDisplayOn+0x1c>
        value = 0xAF;   // Display on
 8001aa4:	23af      	movs	r3, #175	; 0xaf
 8001aa6:	73fb      	strb	r3, [r7, #15]
        SSD1306.DisplayOn = 1;
 8001aa8:	4b08      	ldr	r3, [pc, #32]	; (8001acc <ssd1306_SetDisplayOn+0x38>)
 8001aaa:	2201      	movs	r2, #1
 8001aac:	715a      	strb	r2, [r3, #5]
 8001aae:	e004      	b.n	8001aba <ssd1306_SetDisplayOn+0x26>
    } else {
        value = 0xAE;   // Display off
 8001ab0:	23ae      	movs	r3, #174	; 0xae
 8001ab2:	73fb      	strb	r3, [r7, #15]
        SSD1306.DisplayOn = 0;
 8001ab4:	4b05      	ldr	r3, [pc, #20]	; (8001acc <ssd1306_SetDisplayOn+0x38>)
 8001ab6:	2200      	movs	r2, #0
 8001ab8:	715a      	strb	r2, [r3, #5]
    }
    ssd1306_WriteCommand(value);
 8001aba:	7bfb      	ldrb	r3, [r7, #15]
 8001abc:	4618      	mov	r0, r3
 8001abe:	f7ff fd79 	bl	80015b4 <ssd1306_WriteCommand>
}
 8001ac2:	bf00      	nop
 8001ac4:	3710      	adds	r7, #16
 8001ac6:	46bd      	mov	sp, r7
 8001ac8:	bd80      	pop	{r7, pc}
 8001aca:	bf00      	nop
 8001acc:	20000780 	.word	0x20000780

08001ad0 <LogoAnimation>:
	epd_bitmap_Komp_1_00028,
	epd_bitmap_Komp_1_00029
};


void LogoAnimation() {
 8001ad0:	b580      	push	{r7, lr}
 8001ad2:	b082      	sub	sp, #8
 8001ad4:	af02      	add	r7, sp, #8
	ssd1306_Fill(Black);
 8001ad6:	2000      	movs	r0, #0
 8001ad8:	f7ff fe08 	bl	80016ec <ssd1306_Fill>
	ssd1306_DrawBitmap(0, 0,epd_bitmap_Komp_1_00000, 128,64, White );
 8001adc:	2301      	movs	r3, #1
 8001ade:	9301      	str	r3, [sp, #4]
 8001ae0:	2340      	movs	r3, #64	; 0x40
 8001ae2:	9300      	str	r3, [sp, #0]
 8001ae4:	2380      	movs	r3, #128	; 0x80
 8001ae6:	4ada      	ldr	r2, [pc, #872]	; (8001e50 <LogoAnimation+0x380>)
 8001ae8:	2100      	movs	r1, #0
 8001aea:	2000      	movs	r0, #0
 8001aec:	f7ff ff64 	bl	80019b8 <ssd1306_DrawBitmap>
	ssd1306_UpdateScreen();
 8001af0:	f7ff fe20 	bl	8001734 <ssd1306_UpdateScreen>
	HAL_Delay(10);
 8001af4:	200a      	movs	r0, #10
 8001af6:	f000 fabf 	bl	8002078 <HAL_Delay>

	ssd1306_Fill(Black);
 8001afa:	2000      	movs	r0, #0
 8001afc:	f7ff fdf6 	bl	80016ec <ssd1306_Fill>
	ssd1306_DrawBitmap(0, 0,epd_bitmap_Komp_1_00001, 128,64, White );
 8001b00:	2301      	movs	r3, #1
 8001b02:	9301      	str	r3, [sp, #4]
 8001b04:	2340      	movs	r3, #64	; 0x40
 8001b06:	9300      	str	r3, [sp, #0]
 8001b08:	2380      	movs	r3, #128	; 0x80
 8001b0a:	4ad2      	ldr	r2, [pc, #840]	; (8001e54 <LogoAnimation+0x384>)
 8001b0c:	2100      	movs	r1, #0
 8001b0e:	2000      	movs	r0, #0
 8001b10:	f7ff ff52 	bl	80019b8 <ssd1306_DrawBitmap>
	ssd1306_UpdateScreen();
 8001b14:	f7ff fe0e 	bl	8001734 <ssd1306_UpdateScreen>
	HAL_Delay(10);
 8001b18:	200a      	movs	r0, #10
 8001b1a:	f000 faad 	bl	8002078 <HAL_Delay>

	ssd1306_Fill(Black);
 8001b1e:	2000      	movs	r0, #0
 8001b20:	f7ff fde4 	bl	80016ec <ssd1306_Fill>
	ssd1306_DrawBitmap(0, 0,epd_bitmap_Komp_1_00002, 128,64, White );
 8001b24:	2301      	movs	r3, #1
 8001b26:	9301      	str	r3, [sp, #4]
 8001b28:	2340      	movs	r3, #64	; 0x40
 8001b2a:	9300      	str	r3, [sp, #0]
 8001b2c:	2380      	movs	r3, #128	; 0x80
 8001b2e:	4aca      	ldr	r2, [pc, #808]	; (8001e58 <LogoAnimation+0x388>)
 8001b30:	2100      	movs	r1, #0
 8001b32:	2000      	movs	r0, #0
 8001b34:	f7ff ff40 	bl	80019b8 <ssd1306_DrawBitmap>
	ssd1306_UpdateScreen();
 8001b38:	f7ff fdfc 	bl	8001734 <ssd1306_UpdateScreen>
	HAL_Delay(10);
 8001b3c:	200a      	movs	r0, #10
 8001b3e:	f000 fa9b 	bl	8002078 <HAL_Delay>

	ssd1306_Fill(Black);
 8001b42:	2000      	movs	r0, #0
 8001b44:	f7ff fdd2 	bl	80016ec <ssd1306_Fill>
	ssd1306_DrawBitmap(0, 0,epd_bitmap_Komp_1_00003, 128,64, White );
 8001b48:	2301      	movs	r3, #1
 8001b4a:	9301      	str	r3, [sp, #4]
 8001b4c:	2340      	movs	r3, #64	; 0x40
 8001b4e:	9300      	str	r3, [sp, #0]
 8001b50:	2380      	movs	r3, #128	; 0x80
 8001b52:	4ac2      	ldr	r2, [pc, #776]	; (8001e5c <LogoAnimation+0x38c>)
 8001b54:	2100      	movs	r1, #0
 8001b56:	2000      	movs	r0, #0
 8001b58:	f7ff ff2e 	bl	80019b8 <ssd1306_DrawBitmap>
	ssd1306_UpdateScreen();
 8001b5c:	f7ff fdea 	bl	8001734 <ssd1306_UpdateScreen>
	HAL_Delay(10);
 8001b60:	200a      	movs	r0, #10
 8001b62:	f000 fa89 	bl	8002078 <HAL_Delay>

	ssd1306_Fill(Black);
 8001b66:	2000      	movs	r0, #0
 8001b68:	f7ff fdc0 	bl	80016ec <ssd1306_Fill>
	ssd1306_DrawBitmap(0, 0,epd_bitmap_Komp_1_00004, 128,64, White );
 8001b6c:	2301      	movs	r3, #1
 8001b6e:	9301      	str	r3, [sp, #4]
 8001b70:	2340      	movs	r3, #64	; 0x40
 8001b72:	9300      	str	r3, [sp, #0]
 8001b74:	2380      	movs	r3, #128	; 0x80
 8001b76:	4aba      	ldr	r2, [pc, #744]	; (8001e60 <LogoAnimation+0x390>)
 8001b78:	2100      	movs	r1, #0
 8001b7a:	2000      	movs	r0, #0
 8001b7c:	f7ff ff1c 	bl	80019b8 <ssd1306_DrawBitmap>
	ssd1306_UpdateScreen();
 8001b80:	f7ff fdd8 	bl	8001734 <ssd1306_UpdateScreen>
	HAL_Delay(10);
 8001b84:	200a      	movs	r0, #10
 8001b86:	f000 fa77 	bl	8002078 <HAL_Delay>

	ssd1306_Fill(Black);
 8001b8a:	2000      	movs	r0, #0
 8001b8c:	f7ff fdae 	bl	80016ec <ssd1306_Fill>
	ssd1306_DrawBitmap(0, 0,epd_bitmap_Komp_1_00005, 128,64, White );
 8001b90:	2301      	movs	r3, #1
 8001b92:	9301      	str	r3, [sp, #4]
 8001b94:	2340      	movs	r3, #64	; 0x40
 8001b96:	9300      	str	r3, [sp, #0]
 8001b98:	2380      	movs	r3, #128	; 0x80
 8001b9a:	4ab2      	ldr	r2, [pc, #712]	; (8001e64 <LogoAnimation+0x394>)
 8001b9c:	2100      	movs	r1, #0
 8001b9e:	2000      	movs	r0, #0
 8001ba0:	f7ff ff0a 	bl	80019b8 <ssd1306_DrawBitmap>
	ssd1306_UpdateScreen();
 8001ba4:	f7ff fdc6 	bl	8001734 <ssd1306_UpdateScreen>
	HAL_Delay(10);
 8001ba8:	200a      	movs	r0, #10
 8001baa:	f000 fa65 	bl	8002078 <HAL_Delay>

	ssd1306_Fill(Black);
 8001bae:	2000      	movs	r0, #0
 8001bb0:	f7ff fd9c 	bl	80016ec <ssd1306_Fill>
	ssd1306_DrawBitmap(0, 0,epd_bitmap_Komp_1_00006, 128,64, White );
 8001bb4:	2301      	movs	r3, #1
 8001bb6:	9301      	str	r3, [sp, #4]
 8001bb8:	2340      	movs	r3, #64	; 0x40
 8001bba:	9300      	str	r3, [sp, #0]
 8001bbc:	2380      	movs	r3, #128	; 0x80
 8001bbe:	4aaa      	ldr	r2, [pc, #680]	; (8001e68 <LogoAnimation+0x398>)
 8001bc0:	2100      	movs	r1, #0
 8001bc2:	2000      	movs	r0, #0
 8001bc4:	f7ff fef8 	bl	80019b8 <ssd1306_DrawBitmap>
	ssd1306_UpdateScreen();
 8001bc8:	f7ff fdb4 	bl	8001734 <ssd1306_UpdateScreen>
	HAL_Delay(10);
 8001bcc:	200a      	movs	r0, #10
 8001bce:	f000 fa53 	bl	8002078 <HAL_Delay>

	ssd1306_Fill(Black);
 8001bd2:	2000      	movs	r0, #0
 8001bd4:	f7ff fd8a 	bl	80016ec <ssd1306_Fill>
	ssd1306_DrawBitmap(0, 0,epd_bitmap_Komp_1_00007, 128,64, White );
 8001bd8:	2301      	movs	r3, #1
 8001bda:	9301      	str	r3, [sp, #4]
 8001bdc:	2340      	movs	r3, #64	; 0x40
 8001bde:	9300      	str	r3, [sp, #0]
 8001be0:	2380      	movs	r3, #128	; 0x80
 8001be2:	4aa2      	ldr	r2, [pc, #648]	; (8001e6c <LogoAnimation+0x39c>)
 8001be4:	2100      	movs	r1, #0
 8001be6:	2000      	movs	r0, #0
 8001be8:	f7ff fee6 	bl	80019b8 <ssd1306_DrawBitmap>
	ssd1306_UpdateScreen();
 8001bec:	f7ff fda2 	bl	8001734 <ssd1306_UpdateScreen>
	HAL_Delay(10);
 8001bf0:	200a      	movs	r0, #10
 8001bf2:	f000 fa41 	bl	8002078 <HAL_Delay>

	ssd1306_Fill(Black);
 8001bf6:	2000      	movs	r0, #0
 8001bf8:	f7ff fd78 	bl	80016ec <ssd1306_Fill>
	ssd1306_DrawBitmap(0, 0,epd_bitmap_Komp_1_00008, 128,64, White );
 8001bfc:	2301      	movs	r3, #1
 8001bfe:	9301      	str	r3, [sp, #4]
 8001c00:	2340      	movs	r3, #64	; 0x40
 8001c02:	9300      	str	r3, [sp, #0]
 8001c04:	2380      	movs	r3, #128	; 0x80
 8001c06:	4a9a      	ldr	r2, [pc, #616]	; (8001e70 <LogoAnimation+0x3a0>)
 8001c08:	2100      	movs	r1, #0
 8001c0a:	2000      	movs	r0, #0
 8001c0c:	f7ff fed4 	bl	80019b8 <ssd1306_DrawBitmap>
	ssd1306_UpdateScreen();
 8001c10:	f7ff fd90 	bl	8001734 <ssd1306_UpdateScreen>
	HAL_Delay(10);
 8001c14:	200a      	movs	r0, #10
 8001c16:	f000 fa2f 	bl	8002078 <HAL_Delay>

	ssd1306_Fill(Black);
 8001c1a:	2000      	movs	r0, #0
 8001c1c:	f7ff fd66 	bl	80016ec <ssd1306_Fill>
	ssd1306_DrawBitmap(0, 0,epd_bitmap_Komp_1_00009, 128,64, White );
 8001c20:	2301      	movs	r3, #1
 8001c22:	9301      	str	r3, [sp, #4]
 8001c24:	2340      	movs	r3, #64	; 0x40
 8001c26:	9300      	str	r3, [sp, #0]
 8001c28:	2380      	movs	r3, #128	; 0x80
 8001c2a:	4a92      	ldr	r2, [pc, #584]	; (8001e74 <LogoAnimation+0x3a4>)
 8001c2c:	2100      	movs	r1, #0
 8001c2e:	2000      	movs	r0, #0
 8001c30:	f7ff fec2 	bl	80019b8 <ssd1306_DrawBitmap>
	ssd1306_UpdateScreen();
 8001c34:	f7ff fd7e 	bl	8001734 <ssd1306_UpdateScreen>
	HAL_Delay(10);
 8001c38:	200a      	movs	r0, #10
 8001c3a:	f000 fa1d 	bl	8002078 <HAL_Delay>

	ssd1306_Fill(Black);
 8001c3e:	2000      	movs	r0, #0
 8001c40:	f7ff fd54 	bl	80016ec <ssd1306_Fill>
	ssd1306_DrawBitmap(0, 0,epd_bitmap_Komp_1_00010, 128,64, White );
 8001c44:	2301      	movs	r3, #1
 8001c46:	9301      	str	r3, [sp, #4]
 8001c48:	2340      	movs	r3, #64	; 0x40
 8001c4a:	9300      	str	r3, [sp, #0]
 8001c4c:	2380      	movs	r3, #128	; 0x80
 8001c4e:	4a8a      	ldr	r2, [pc, #552]	; (8001e78 <LogoAnimation+0x3a8>)
 8001c50:	2100      	movs	r1, #0
 8001c52:	2000      	movs	r0, #0
 8001c54:	f7ff feb0 	bl	80019b8 <ssd1306_DrawBitmap>
	ssd1306_UpdateScreen();
 8001c58:	f7ff fd6c 	bl	8001734 <ssd1306_UpdateScreen>
	HAL_Delay(10);
 8001c5c:	200a      	movs	r0, #10
 8001c5e:	f000 fa0b 	bl	8002078 <HAL_Delay>

	ssd1306_Fill(Black);
 8001c62:	2000      	movs	r0, #0
 8001c64:	f7ff fd42 	bl	80016ec <ssd1306_Fill>
	ssd1306_DrawBitmap(0, 0,epd_bitmap_Komp_1_00011, 128,64, White );
 8001c68:	2301      	movs	r3, #1
 8001c6a:	9301      	str	r3, [sp, #4]
 8001c6c:	2340      	movs	r3, #64	; 0x40
 8001c6e:	9300      	str	r3, [sp, #0]
 8001c70:	2380      	movs	r3, #128	; 0x80
 8001c72:	4a82      	ldr	r2, [pc, #520]	; (8001e7c <LogoAnimation+0x3ac>)
 8001c74:	2100      	movs	r1, #0
 8001c76:	2000      	movs	r0, #0
 8001c78:	f7ff fe9e 	bl	80019b8 <ssd1306_DrawBitmap>
	ssd1306_UpdateScreen();
 8001c7c:	f7ff fd5a 	bl	8001734 <ssd1306_UpdateScreen>
	HAL_Delay(10);
 8001c80:	200a      	movs	r0, #10
 8001c82:	f000 f9f9 	bl	8002078 <HAL_Delay>

	ssd1306_Fill(Black);
 8001c86:	2000      	movs	r0, #0
 8001c88:	f7ff fd30 	bl	80016ec <ssd1306_Fill>
	ssd1306_DrawBitmap(0, 0,epd_bitmap_Komp_1_00012, 128,64, White );
 8001c8c:	2301      	movs	r3, #1
 8001c8e:	9301      	str	r3, [sp, #4]
 8001c90:	2340      	movs	r3, #64	; 0x40
 8001c92:	9300      	str	r3, [sp, #0]
 8001c94:	2380      	movs	r3, #128	; 0x80
 8001c96:	4a7a      	ldr	r2, [pc, #488]	; (8001e80 <LogoAnimation+0x3b0>)
 8001c98:	2100      	movs	r1, #0
 8001c9a:	2000      	movs	r0, #0
 8001c9c:	f7ff fe8c 	bl	80019b8 <ssd1306_DrawBitmap>
	ssd1306_UpdateScreen();
 8001ca0:	f7ff fd48 	bl	8001734 <ssd1306_UpdateScreen>
	HAL_Delay(10);
 8001ca4:	200a      	movs	r0, #10
 8001ca6:	f000 f9e7 	bl	8002078 <HAL_Delay>

	ssd1306_Fill(Black);
 8001caa:	2000      	movs	r0, #0
 8001cac:	f7ff fd1e 	bl	80016ec <ssd1306_Fill>
	ssd1306_DrawBitmap(0, 0,epd_bitmap_Komp_1_00013, 128,64, White );
 8001cb0:	2301      	movs	r3, #1
 8001cb2:	9301      	str	r3, [sp, #4]
 8001cb4:	2340      	movs	r3, #64	; 0x40
 8001cb6:	9300      	str	r3, [sp, #0]
 8001cb8:	2380      	movs	r3, #128	; 0x80
 8001cba:	4a72      	ldr	r2, [pc, #456]	; (8001e84 <LogoAnimation+0x3b4>)
 8001cbc:	2100      	movs	r1, #0
 8001cbe:	2000      	movs	r0, #0
 8001cc0:	f7ff fe7a 	bl	80019b8 <ssd1306_DrawBitmap>
	ssd1306_UpdateScreen();
 8001cc4:	f7ff fd36 	bl	8001734 <ssd1306_UpdateScreen>
	HAL_Delay(10);
 8001cc8:	200a      	movs	r0, #10
 8001cca:	f000 f9d5 	bl	8002078 <HAL_Delay>

	ssd1306_Fill(Black);
 8001cce:	2000      	movs	r0, #0
 8001cd0:	f7ff fd0c 	bl	80016ec <ssd1306_Fill>
	ssd1306_DrawBitmap(0, 0,epd_bitmap_Komp_1_00014, 128,64, White );
 8001cd4:	2301      	movs	r3, #1
 8001cd6:	9301      	str	r3, [sp, #4]
 8001cd8:	2340      	movs	r3, #64	; 0x40
 8001cda:	9300      	str	r3, [sp, #0]
 8001cdc:	2380      	movs	r3, #128	; 0x80
 8001cde:	4a6a      	ldr	r2, [pc, #424]	; (8001e88 <LogoAnimation+0x3b8>)
 8001ce0:	2100      	movs	r1, #0
 8001ce2:	2000      	movs	r0, #0
 8001ce4:	f7ff fe68 	bl	80019b8 <ssd1306_DrawBitmap>
	ssd1306_UpdateScreen();
 8001ce8:	f7ff fd24 	bl	8001734 <ssd1306_UpdateScreen>
	HAL_Delay(10);
 8001cec:	200a      	movs	r0, #10
 8001cee:	f000 f9c3 	bl	8002078 <HAL_Delay>

	ssd1306_Fill(Black);
 8001cf2:	2000      	movs	r0, #0
 8001cf4:	f7ff fcfa 	bl	80016ec <ssd1306_Fill>
	ssd1306_DrawBitmap(0, 0,epd_bitmap_Komp_1_00015, 128,64, White );
 8001cf8:	2301      	movs	r3, #1
 8001cfa:	9301      	str	r3, [sp, #4]
 8001cfc:	2340      	movs	r3, #64	; 0x40
 8001cfe:	9300      	str	r3, [sp, #0]
 8001d00:	2380      	movs	r3, #128	; 0x80
 8001d02:	4a62      	ldr	r2, [pc, #392]	; (8001e8c <LogoAnimation+0x3bc>)
 8001d04:	2100      	movs	r1, #0
 8001d06:	2000      	movs	r0, #0
 8001d08:	f7ff fe56 	bl	80019b8 <ssd1306_DrawBitmap>
	ssd1306_UpdateScreen();
 8001d0c:	f7ff fd12 	bl	8001734 <ssd1306_UpdateScreen>
	HAL_Delay(10);
 8001d10:	200a      	movs	r0, #10
 8001d12:	f000 f9b1 	bl	8002078 <HAL_Delay>

	ssd1306_Fill(Black);
 8001d16:	2000      	movs	r0, #0
 8001d18:	f7ff fce8 	bl	80016ec <ssd1306_Fill>
	ssd1306_DrawBitmap(0, 0,epd_bitmap_Komp_1_00016, 128,64, White );
 8001d1c:	2301      	movs	r3, #1
 8001d1e:	9301      	str	r3, [sp, #4]
 8001d20:	2340      	movs	r3, #64	; 0x40
 8001d22:	9300      	str	r3, [sp, #0]
 8001d24:	2380      	movs	r3, #128	; 0x80
 8001d26:	4a5a      	ldr	r2, [pc, #360]	; (8001e90 <LogoAnimation+0x3c0>)
 8001d28:	2100      	movs	r1, #0
 8001d2a:	2000      	movs	r0, #0
 8001d2c:	f7ff fe44 	bl	80019b8 <ssd1306_DrawBitmap>
	ssd1306_UpdateScreen();
 8001d30:	f7ff fd00 	bl	8001734 <ssd1306_UpdateScreen>
	HAL_Delay(10);
 8001d34:	200a      	movs	r0, #10
 8001d36:	f000 f99f 	bl	8002078 <HAL_Delay>

	ssd1306_Fill(Black);
 8001d3a:	2000      	movs	r0, #0
 8001d3c:	f7ff fcd6 	bl	80016ec <ssd1306_Fill>
	ssd1306_DrawBitmap(0, 0,epd_bitmap_Komp_1_00017, 128,64, White );
 8001d40:	2301      	movs	r3, #1
 8001d42:	9301      	str	r3, [sp, #4]
 8001d44:	2340      	movs	r3, #64	; 0x40
 8001d46:	9300      	str	r3, [sp, #0]
 8001d48:	2380      	movs	r3, #128	; 0x80
 8001d4a:	4a52      	ldr	r2, [pc, #328]	; (8001e94 <LogoAnimation+0x3c4>)
 8001d4c:	2100      	movs	r1, #0
 8001d4e:	2000      	movs	r0, #0
 8001d50:	f7ff fe32 	bl	80019b8 <ssd1306_DrawBitmap>
	ssd1306_UpdateScreen();
 8001d54:	f7ff fcee 	bl	8001734 <ssd1306_UpdateScreen>
	HAL_Delay(10);
 8001d58:	200a      	movs	r0, #10
 8001d5a:	f000 f98d 	bl	8002078 <HAL_Delay>

	ssd1306_Fill(Black);
 8001d5e:	2000      	movs	r0, #0
 8001d60:	f7ff fcc4 	bl	80016ec <ssd1306_Fill>
	ssd1306_DrawBitmap(0, 0,epd_bitmap_Komp_1_00018, 128,64, White );
 8001d64:	2301      	movs	r3, #1
 8001d66:	9301      	str	r3, [sp, #4]
 8001d68:	2340      	movs	r3, #64	; 0x40
 8001d6a:	9300      	str	r3, [sp, #0]
 8001d6c:	2380      	movs	r3, #128	; 0x80
 8001d6e:	4a4a      	ldr	r2, [pc, #296]	; (8001e98 <LogoAnimation+0x3c8>)
 8001d70:	2100      	movs	r1, #0
 8001d72:	2000      	movs	r0, #0
 8001d74:	f7ff fe20 	bl	80019b8 <ssd1306_DrawBitmap>
	ssd1306_UpdateScreen();
 8001d78:	f7ff fcdc 	bl	8001734 <ssd1306_UpdateScreen>
	HAL_Delay(10);
 8001d7c:	200a      	movs	r0, #10
 8001d7e:	f000 f97b 	bl	8002078 <HAL_Delay>

	ssd1306_Fill(Black);
 8001d82:	2000      	movs	r0, #0
 8001d84:	f7ff fcb2 	bl	80016ec <ssd1306_Fill>
	ssd1306_DrawBitmap(0, 0,epd_bitmap_Komp_1_00019, 128,64, White );
 8001d88:	2301      	movs	r3, #1
 8001d8a:	9301      	str	r3, [sp, #4]
 8001d8c:	2340      	movs	r3, #64	; 0x40
 8001d8e:	9300      	str	r3, [sp, #0]
 8001d90:	2380      	movs	r3, #128	; 0x80
 8001d92:	4a42      	ldr	r2, [pc, #264]	; (8001e9c <LogoAnimation+0x3cc>)
 8001d94:	2100      	movs	r1, #0
 8001d96:	2000      	movs	r0, #0
 8001d98:	f7ff fe0e 	bl	80019b8 <ssd1306_DrawBitmap>
	ssd1306_UpdateScreen();
 8001d9c:	f7ff fcca 	bl	8001734 <ssd1306_UpdateScreen>
	HAL_Delay(10);
 8001da0:	200a      	movs	r0, #10
 8001da2:	f000 f969 	bl	8002078 <HAL_Delay>

	ssd1306_Fill(Black);
 8001da6:	2000      	movs	r0, #0
 8001da8:	f7ff fca0 	bl	80016ec <ssd1306_Fill>
	ssd1306_DrawBitmap(0, 0,epd_bitmap_Komp_1_00020, 128,64, White );
 8001dac:	2301      	movs	r3, #1
 8001dae:	9301      	str	r3, [sp, #4]
 8001db0:	2340      	movs	r3, #64	; 0x40
 8001db2:	9300      	str	r3, [sp, #0]
 8001db4:	2380      	movs	r3, #128	; 0x80
 8001db6:	4a3a      	ldr	r2, [pc, #232]	; (8001ea0 <LogoAnimation+0x3d0>)
 8001db8:	2100      	movs	r1, #0
 8001dba:	2000      	movs	r0, #0
 8001dbc:	f7ff fdfc 	bl	80019b8 <ssd1306_DrawBitmap>
	ssd1306_UpdateScreen();
 8001dc0:	f7ff fcb8 	bl	8001734 <ssd1306_UpdateScreen>
	HAL_Delay(10);
 8001dc4:	200a      	movs	r0, #10
 8001dc6:	f000 f957 	bl	8002078 <HAL_Delay>

	ssd1306_Fill(Black);
 8001dca:	2000      	movs	r0, #0
 8001dcc:	f7ff fc8e 	bl	80016ec <ssd1306_Fill>
	ssd1306_DrawBitmap(0, 0,epd_bitmap_Komp_1_00021, 128,64, White );
 8001dd0:	2301      	movs	r3, #1
 8001dd2:	9301      	str	r3, [sp, #4]
 8001dd4:	2340      	movs	r3, #64	; 0x40
 8001dd6:	9300      	str	r3, [sp, #0]
 8001dd8:	2380      	movs	r3, #128	; 0x80
 8001dda:	4a32      	ldr	r2, [pc, #200]	; (8001ea4 <LogoAnimation+0x3d4>)
 8001ddc:	2100      	movs	r1, #0
 8001dde:	2000      	movs	r0, #0
 8001de0:	f7ff fdea 	bl	80019b8 <ssd1306_DrawBitmap>
	ssd1306_UpdateScreen();
 8001de4:	f7ff fca6 	bl	8001734 <ssd1306_UpdateScreen>
	HAL_Delay(11);
 8001de8:	200b      	movs	r0, #11
 8001dea:	f000 f945 	bl	8002078 <HAL_Delay>

	ssd1306_Fill(Black);
 8001dee:	2000      	movs	r0, #0
 8001df0:	f7ff fc7c 	bl	80016ec <ssd1306_Fill>
	ssd1306_DrawBitmap(0, 0,epd_bitmap_Komp_1_00022, 128,64, White );
 8001df4:	2301      	movs	r3, #1
 8001df6:	9301      	str	r3, [sp, #4]
 8001df8:	2340      	movs	r3, #64	; 0x40
 8001dfa:	9300      	str	r3, [sp, #0]
 8001dfc:	2380      	movs	r3, #128	; 0x80
 8001dfe:	4a2a      	ldr	r2, [pc, #168]	; (8001ea8 <LogoAnimation+0x3d8>)
 8001e00:	2100      	movs	r1, #0
 8001e02:	2000      	movs	r0, #0
 8001e04:	f7ff fdd8 	bl	80019b8 <ssd1306_DrawBitmap>
	ssd1306_UpdateScreen();
 8001e08:	f7ff fc94 	bl	8001734 <ssd1306_UpdateScreen>
	HAL_Delay(12);
 8001e0c:	200c      	movs	r0, #12
 8001e0e:	f000 f933 	bl	8002078 <HAL_Delay>

	ssd1306_Fill(Black);
 8001e12:	2000      	movs	r0, #0
 8001e14:	f7ff fc6a 	bl	80016ec <ssd1306_Fill>
	ssd1306_DrawBitmap(0, 0,epd_bitmap_Komp_1_00023, 128,64, White );
 8001e18:	2301      	movs	r3, #1
 8001e1a:	9301      	str	r3, [sp, #4]
 8001e1c:	2340      	movs	r3, #64	; 0x40
 8001e1e:	9300      	str	r3, [sp, #0]
 8001e20:	2380      	movs	r3, #128	; 0x80
 8001e22:	4a22      	ldr	r2, [pc, #136]	; (8001eac <LogoAnimation+0x3dc>)
 8001e24:	2100      	movs	r1, #0
 8001e26:	2000      	movs	r0, #0
 8001e28:	f7ff fdc6 	bl	80019b8 <ssd1306_DrawBitmap>
	ssd1306_UpdateScreen();
 8001e2c:	f7ff fc82 	bl	8001734 <ssd1306_UpdateScreen>
	HAL_Delay(13);
 8001e30:	200d      	movs	r0, #13
 8001e32:	f000 f921 	bl	8002078 <HAL_Delay>

	ssd1306_Fill(Black);
 8001e36:	2000      	movs	r0, #0
 8001e38:	f7ff fc58 	bl	80016ec <ssd1306_Fill>
	ssd1306_DrawBitmap(0, 0,epd_bitmap_Komp_1_00024, 128,64, White );
 8001e3c:	2301      	movs	r3, #1
 8001e3e:	9301      	str	r3, [sp, #4]
 8001e40:	2340      	movs	r3, #64	; 0x40
 8001e42:	9300      	str	r3, [sp, #0]
 8001e44:	2380      	movs	r3, #128	; 0x80
 8001e46:	4a1a      	ldr	r2, [pc, #104]	; (8001eb0 <LogoAnimation+0x3e0>)
 8001e48:	2100      	movs	r1, #0
 8001e4a:	2000      	movs	r0, #0
 8001e4c:	e032      	b.n	8001eb4 <LogoAnimation+0x3e4>
 8001e4e:	bf00      	nop
 8001e50:	08005650 	.word	0x08005650
 8001e54:	08005a50 	.word	0x08005a50
 8001e58:	08005e50 	.word	0x08005e50
 8001e5c:	08006250 	.word	0x08006250
 8001e60:	08006650 	.word	0x08006650
 8001e64:	08006a50 	.word	0x08006a50
 8001e68:	08006e50 	.word	0x08006e50
 8001e6c:	08007250 	.word	0x08007250
 8001e70:	08007650 	.word	0x08007650
 8001e74:	08007a50 	.word	0x08007a50
 8001e78:	08007e50 	.word	0x08007e50
 8001e7c:	08008250 	.word	0x08008250
 8001e80:	08008650 	.word	0x08008650
 8001e84:	08008a50 	.word	0x08008a50
 8001e88:	08008e50 	.word	0x08008e50
 8001e8c:	08009250 	.word	0x08009250
 8001e90:	08009650 	.word	0x08009650
 8001e94:	08009a50 	.word	0x08009a50
 8001e98:	08009e50 	.word	0x08009e50
 8001e9c:	0800a250 	.word	0x0800a250
 8001ea0:	0800a650 	.word	0x0800a650
 8001ea4:	0800aa50 	.word	0x0800aa50
 8001ea8:	0800ae50 	.word	0x0800ae50
 8001eac:	0800b250 	.word	0x0800b250
 8001eb0:	0800b650 	.word	0x0800b650
 8001eb4:	f7ff fd80 	bl	80019b8 <ssd1306_DrawBitmap>
	ssd1306_UpdateScreen();
 8001eb8:	f7ff fc3c 	bl	8001734 <ssd1306_UpdateScreen>
	HAL_Delay(14);
 8001ebc:	200e      	movs	r0, #14
 8001ebe:	f000 f8db 	bl	8002078 <HAL_Delay>

	ssd1306_Fill(Black);
 8001ec2:	2000      	movs	r0, #0
 8001ec4:	f7ff fc12 	bl	80016ec <ssd1306_Fill>
	ssd1306_DrawBitmap(0, 0,epd_bitmap_Komp_1_00025, 128,64, White );
 8001ec8:	2301      	movs	r3, #1
 8001eca:	9301      	str	r3, [sp, #4]
 8001ecc:	2340      	movs	r3, #64	; 0x40
 8001ece:	9300      	str	r3, [sp, #0]
 8001ed0:	2380      	movs	r3, #128	; 0x80
 8001ed2:	4a2b      	ldr	r2, [pc, #172]	; (8001f80 <LogoAnimation+0x4b0>)
 8001ed4:	2100      	movs	r1, #0
 8001ed6:	2000      	movs	r0, #0
 8001ed8:	f7ff fd6e 	bl	80019b8 <ssd1306_DrawBitmap>
	ssd1306_UpdateScreen();
 8001edc:	f7ff fc2a 	bl	8001734 <ssd1306_UpdateScreen>
	HAL_Delay(15);
 8001ee0:	200f      	movs	r0, #15
 8001ee2:	f000 f8c9 	bl	8002078 <HAL_Delay>

	ssd1306_Fill(Black);
 8001ee6:	2000      	movs	r0, #0
 8001ee8:	f7ff fc00 	bl	80016ec <ssd1306_Fill>
	ssd1306_DrawBitmap(0, 0,epd_bitmap_Komp_1_00026, 128,64, White );
 8001eec:	2301      	movs	r3, #1
 8001eee:	9301      	str	r3, [sp, #4]
 8001ef0:	2340      	movs	r3, #64	; 0x40
 8001ef2:	9300      	str	r3, [sp, #0]
 8001ef4:	2380      	movs	r3, #128	; 0x80
 8001ef6:	4a23      	ldr	r2, [pc, #140]	; (8001f84 <LogoAnimation+0x4b4>)
 8001ef8:	2100      	movs	r1, #0
 8001efa:	2000      	movs	r0, #0
 8001efc:	f7ff fd5c 	bl	80019b8 <ssd1306_DrawBitmap>
	ssd1306_UpdateScreen();
 8001f00:	f7ff fc18 	bl	8001734 <ssd1306_UpdateScreen>
	HAL_Delay(16);
 8001f04:	2010      	movs	r0, #16
 8001f06:	f000 f8b7 	bl	8002078 <HAL_Delay>

	ssd1306_Fill(Black);
 8001f0a:	2000      	movs	r0, #0
 8001f0c:	f7ff fbee 	bl	80016ec <ssd1306_Fill>
	ssd1306_DrawBitmap(0, 0,epd_bitmap_Komp_1_00027, 128,64, White );
 8001f10:	2301      	movs	r3, #1
 8001f12:	9301      	str	r3, [sp, #4]
 8001f14:	2340      	movs	r3, #64	; 0x40
 8001f16:	9300      	str	r3, [sp, #0]
 8001f18:	2380      	movs	r3, #128	; 0x80
 8001f1a:	4a1b      	ldr	r2, [pc, #108]	; (8001f88 <LogoAnimation+0x4b8>)
 8001f1c:	2100      	movs	r1, #0
 8001f1e:	2000      	movs	r0, #0
 8001f20:	f7ff fd4a 	bl	80019b8 <ssd1306_DrawBitmap>
	ssd1306_UpdateScreen();
 8001f24:	f7ff fc06 	bl	8001734 <ssd1306_UpdateScreen>
	HAL_Delay(19);
 8001f28:	2013      	movs	r0, #19
 8001f2a:	f000 f8a5 	bl	8002078 <HAL_Delay>

	ssd1306_Fill(Black);
 8001f2e:	2000      	movs	r0, #0
 8001f30:	f7ff fbdc 	bl	80016ec <ssd1306_Fill>
	ssd1306_DrawBitmap(0, 0,epd_bitmap_Komp_1_00028, 128,64, White );
 8001f34:	2301      	movs	r3, #1
 8001f36:	9301      	str	r3, [sp, #4]
 8001f38:	2340      	movs	r3, #64	; 0x40
 8001f3a:	9300      	str	r3, [sp, #0]
 8001f3c:	2380      	movs	r3, #128	; 0x80
 8001f3e:	4a13      	ldr	r2, [pc, #76]	; (8001f8c <LogoAnimation+0x4bc>)
 8001f40:	2100      	movs	r1, #0
 8001f42:	2000      	movs	r0, #0
 8001f44:	f7ff fd38 	bl	80019b8 <ssd1306_DrawBitmap>
	ssd1306_UpdateScreen();
 8001f48:	f7ff fbf4 	bl	8001734 <ssd1306_UpdateScreen>
	HAL_Delay(25);
 8001f4c:	2019      	movs	r0, #25
 8001f4e:	f000 f893 	bl	8002078 <HAL_Delay>

	ssd1306_Fill(Black);
 8001f52:	2000      	movs	r0, #0
 8001f54:	f7ff fbca 	bl	80016ec <ssd1306_Fill>
	ssd1306_DrawBitmap(0, 0,epd_bitmap_Komp_1_00029, 128,64, White );
 8001f58:	2301      	movs	r3, #1
 8001f5a:	9301      	str	r3, [sp, #4]
 8001f5c:	2340      	movs	r3, #64	; 0x40
 8001f5e:	9300      	str	r3, [sp, #0]
 8001f60:	2380      	movs	r3, #128	; 0x80
 8001f62:	4a0b      	ldr	r2, [pc, #44]	; (8001f90 <LogoAnimation+0x4c0>)
 8001f64:	2100      	movs	r1, #0
 8001f66:	2000      	movs	r0, #0
 8001f68:	f7ff fd26 	bl	80019b8 <ssd1306_DrawBitmap>
	ssd1306_UpdateScreen();
 8001f6c:	f7ff fbe2 	bl	8001734 <ssd1306_UpdateScreen>
	HAL_Delay(500);
 8001f70:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001f74:	f000 f880 	bl	8002078 <HAL_Delay>



}
 8001f78:	bf00      	nop
 8001f7a:	46bd      	mov	sp, r7
 8001f7c:	bd80      	pop	{r7, pc}
 8001f7e:	bf00      	nop
 8001f80:	0800ba50 	.word	0x0800ba50
 8001f84:	0800be50 	.word	0x0800be50
 8001f88:	0800c250 	.word	0x0800c250
 8001f8c:	0800c650 	.word	0x0800c650
 8001f90:	0800ca50 	.word	0x0800ca50

08001f94 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001f94:	b580      	push	{r7, lr}
 8001f96:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001f98:	4b0e      	ldr	r3, [pc, #56]	; (8001fd4 <HAL_Init+0x40>)
 8001f9a:	681b      	ldr	r3, [r3, #0]
 8001f9c:	4a0d      	ldr	r2, [pc, #52]	; (8001fd4 <HAL_Init+0x40>)
 8001f9e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001fa2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001fa4:	4b0b      	ldr	r3, [pc, #44]	; (8001fd4 <HAL_Init+0x40>)
 8001fa6:	681b      	ldr	r3, [r3, #0]
 8001fa8:	4a0a      	ldr	r2, [pc, #40]	; (8001fd4 <HAL_Init+0x40>)
 8001faa:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001fae:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001fb0:	4b08      	ldr	r3, [pc, #32]	; (8001fd4 <HAL_Init+0x40>)
 8001fb2:	681b      	ldr	r3, [r3, #0]
 8001fb4:	4a07      	ldr	r2, [pc, #28]	; (8001fd4 <HAL_Init+0x40>)
 8001fb6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001fba:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001fbc:	2003      	movs	r0, #3
 8001fbe:	f000 f931 	bl	8002224 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001fc2:	200f      	movs	r0, #15
 8001fc4:	f000 f808 	bl	8001fd8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001fc8:	f7ff f80c 	bl	8000fe4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001fcc:	2300      	movs	r3, #0
}
 8001fce:	4618      	mov	r0, r3
 8001fd0:	bd80      	pop	{r7, pc}
 8001fd2:	bf00      	nop
 8001fd4:	40023c00 	.word	0x40023c00

08001fd8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001fd8:	b580      	push	{r7, lr}
 8001fda:	b082      	sub	sp, #8
 8001fdc:	af00      	add	r7, sp, #0
 8001fde:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001fe0:	4b12      	ldr	r3, [pc, #72]	; (800202c <HAL_InitTick+0x54>)
 8001fe2:	681a      	ldr	r2, [r3, #0]
 8001fe4:	4b12      	ldr	r3, [pc, #72]	; (8002030 <HAL_InitTick+0x58>)
 8001fe6:	781b      	ldrb	r3, [r3, #0]
 8001fe8:	4619      	mov	r1, r3
 8001fea:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001fee:	fbb3 f3f1 	udiv	r3, r3, r1
 8001ff2:	fbb2 f3f3 	udiv	r3, r2, r3
 8001ff6:	4618      	mov	r0, r3
 8001ff8:	f000 f93b 	bl	8002272 <HAL_SYSTICK_Config>
 8001ffc:	4603      	mov	r3, r0
 8001ffe:	2b00      	cmp	r3, #0
 8002000:	d001      	beq.n	8002006 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002002:	2301      	movs	r3, #1
 8002004:	e00e      	b.n	8002024 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	2b0f      	cmp	r3, #15
 800200a:	d80a      	bhi.n	8002022 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800200c:	2200      	movs	r2, #0
 800200e:	6879      	ldr	r1, [r7, #4]
 8002010:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002014:	f000 f911 	bl	800223a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002018:	4a06      	ldr	r2, [pc, #24]	; (8002034 <HAL_InitTick+0x5c>)
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800201e:	2300      	movs	r3, #0
 8002020:	e000      	b.n	8002024 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002022:	2301      	movs	r3, #1
}
 8002024:	4618      	mov	r0, r3
 8002026:	3708      	adds	r7, #8
 8002028:	46bd      	mov	sp, r7
 800202a:	bd80      	pop	{r7, pc}
 800202c:	2000000c 	.word	0x2000000c
 8002030:	2000001c 	.word	0x2000001c
 8002034:	20000018 	.word	0x20000018

08002038 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002038:	b480      	push	{r7}
 800203a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800203c:	4b06      	ldr	r3, [pc, #24]	; (8002058 <HAL_IncTick+0x20>)
 800203e:	781b      	ldrb	r3, [r3, #0]
 8002040:	461a      	mov	r2, r3
 8002042:	4b06      	ldr	r3, [pc, #24]	; (800205c <HAL_IncTick+0x24>)
 8002044:	681b      	ldr	r3, [r3, #0]
 8002046:	4413      	add	r3, r2
 8002048:	4a04      	ldr	r2, [pc, #16]	; (800205c <HAL_IncTick+0x24>)
 800204a:	6013      	str	r3, [r2, #0]
}
 800204c:	bf00      	nop
 800204e:	46bd      	mov	sp, r7
 8002050:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002054:	4770      	bx	lr
 8002056:	bf00      	nop
 8002058:	2000001c 	.word	0x2000001c
 800205c:	20000788 	.word	0x20000788

08002060 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002060:	b480      	push	{r7}
 8002062:	af00      	add	r7, sp, #0
  return uwTick;
 8002064:	4b03      	ldr	r3, [pc, #12]	; (8002074 <HAL_GetTick+0x14>)
 8002066:	681b      	ldr	r3, [r3, #0]
}
 8002068:	4618      	mov	r0, r3
 800206a:	46bd      	mov	sp, r7
 800206c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002070:	4770      	bx	lr
 8002072:	bf00      	nop
 8002074:	20000788 	.word	0x20000788

08002078 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002078:	b580      	push	{r7, lr}
 800207a:	b084      	sub	sp, #16
 800207c:	af00      	add	r7, sp, #0
 800207e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002080:	f7ff ffee 	bl	8002060 <HAL_GetTick>
 8002084:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800208a:	68fb      	ldr	r3, [r7, #12]
 800208c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002090:	d005      	beq.n	800209e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002092:	4b0a      	ldr	r3, [pc, #40]	; (80020bc <HAL_Delay+0x44>)
 8002094:	781b      	ldrb	r3, [r3, #0]
 8002096:	461a      	mov	r2, r3
 8002098:	68fb      	ldr	r3, [r7, #12]
 800209a:	4413      	add	r3, r2
 800209c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800209e:	bf00      	nop
 80020a0:	f7ff ffde 	bl	8002060 <HAL_GetTick>
 80020a4:	4602      	mov	r2, r0
 80020a6:	68bb      	ldr	r3, [r7, #8]
 80020a8:	1ad3      	subs	r3, r2, r3
 80020aa:	68fa      	ldr	r2, [r7, #12]
 80020ac:	429a      	cmp	r2, r3
 80020ae:	d8f7      	bhi.n	80020a0 <HAL_Delay+0x28>
  {
  }
}
 80020b0:	bf00      	nop
 80020b2:	bf00      	nop
 80020b4:	3710      	adds	r7, #16
 80020b6:	46bd      	mov	sp, r7
 80020b8:	bd80      	pop	{r7, pc}
 80020ba:	bf00      	nop
 80020bc:	2000001c 	.word	0x2000001c

080020c0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80020c0:	b480      	push	{r7}
 80020c2:	b085      	sub	sp, #20
 80020c4:	af00      	add	r7, sp, #0
 80020c6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	f003 0307 	and.w	r3, r3, #7
 80020ce:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80020d0:	4b0c      	ldr	r3, [pc, #48]	; (8002104 <__NVIC_SetPriorityGrouping+0x44>)
 80020d2:	68db      	ldr	r3, [r3, #12]
 80020d4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80020d6:	68ba      	ldr	r2, [r7, #8]
 80020d8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80020dc:	4013      	ands	r3, r2
 80020de:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80020e0:	68fb      	ldr	r3, [r7, #12]
 80020e2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80020e4:	68bb      	ldr	r3, [r7, #8]
 80020e6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80020e8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80020ec:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80020f0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80020f2:	4a04      	ldr	r2, [pc, #16]	; (8002104 <__NVIC_SetPriorityGrouping+0x44>)
 80020f4:	68bb      	ldr	r3, [r7, #8]
 80020f6:	60d3      	str	r3, [r2, #12]
}
 80020f8:	bf00      	nop
 80020fa:	3714      	adds	r7, #20
 80020fc:	46bd      	mov	sp, r7
 80020fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002102:	4770      	bx	lr
 8002104:	e000ed00 	.word	0xe000ed00

08002108 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002108:	b480      	push	{r7}
 800210a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800210c:	4b04      	ldr	r3, [pc, #16]	; (8002120 <__NVIC_GetPriorityGrouping+0x18>)
 800210e:	68db      	ldr	r3, [r3, #12]
 8002110:	0a1b      	lsrs	r3, r3, #8
 8002112:	f003 0307 	and.w	r3, r3, #7
}
 8002116:	4618      	mov	r0, r3
 8002118:	46bd      	mov	sp, r7
 800211a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800211e:	4770      	bx	lr
 8002120:	e000ed00 	.word	0xe000ed00

08002124 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002124:	b480      	push	{r7}
 8002126:	b083      	sub	sp, #12
 8002128:	af00      	add	r7, sp, #0
 800212a:	4603      	mov	r3, r0
 800212c:	6039      	str	r1, [r7, #0]
 800212e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002130:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002134:	2b00      	cmp	r3, #0
 8002136:	db0a      	blt.n	800214e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002138:	683b      	ldr	r3, [r7, #0]
 800213a:	b2da      	uxtb	r2, r3
 800213c:	490c      	ldr	r1, [pc, #48]	; (8002170 <__NVIC_SetPriority+0x4c>)
 800213e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002142:	0112      	lsls	r2, r2, #4
 8002144:	b2d2      	uxtb	r2, r2
 8002146:	440b      	add	r3, r1
 8002148:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800214c:	e00a      	b.n	8002164 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800214e:	683b      	ldr	r3, [r7, #0]
 8002150:	b2da      	uxtb	r2, r3
 8002152:	4908      	ldr	r1, [pc, #32]	; (8002174 <__NVIC_SetPriority+0x50>)
 8002154:	79fb      	ldrb	r3, [r7, #7]
 8002156:	f003 030f 	and.w	r3, r3, #15
 800215a:	3b04      	subs	r3, #4
 800215c:	0112      	lsls	r2, r2, #4
 800215e:	b2d2      	uxtb	r2, r2
 8002160:	440b      	add	r3, r1
 8002162:	761a      	strb	r2, [r3, #24]
}
 8002164:	bf00      	nop
 8002166:	370c      	adds	r7, #12
 8002168:	46bd      	mov	sp, r7
 800216a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800216e:	4770      	bx	lr
 8002170:	e000e100 	.word	0xe000e100
 8002174:	e000ed00 	.word	0xe000ed00

08002178 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002178:	b480      	push	{r7}
 800217a:	b089      	sub	sp, #36	; 0x24
 800217c:	af00      	add	r7, sp, #0
 800217e:	60f8      	str	r0, [r7, #12]
 8002180:	60b9      	str	r1, [r7, #8]
 8002182:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002184:	68fb      	ldr	r3, [r7, #12]
 8002186:	f003 0307 	and.w	r3, r3, #7
 800218a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800218c:	69fb      	ldr	r3, [r7, #28]
 800218e:	f1c3 0307 	rsb	r3, r3, #7
 8002192:	2b04      	cmp	r3, #4
 8002194:	bf28      	it	cs
 8002196:	2304      	movcs	r3, #4
 8002198:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800219a:	69fb      	ldr	r3, [r7, #28]
 800219c:	3304      	adds	r3, #4
 800219e:	2b06      	cmp	r3, #6
 80021a0:	d902      	bls.n	80021a8 <NVIC_EncodePriority+0x30>
 80021a2:	69fb      	ldr	r3, [r7, #28]
 80021a4:	3b03      	subs	r3, #3
 80021a6:	e000      	b.n	80021aa <NVIC_EncodePriority+0x32>
 80021a8:	2300      	movs	r3, #0
 80021aa:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80021ac:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80021b0:	69bb      	ldr	r3, [r7, #24]
 80021b2:	fa02 f303 	lsl.w	r3, r2, r3
 80021b6:	43da      	mvns	r2, r3
 80021b8:	68bb      	ldr	r3, [r7, #8]
 80021ba:	401a      	ands	r2, r3
 80021bc:	697b      	ldr	r3, [r7, #20]
 80021be:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80021c0:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80021c4:	697b      	ldr	r3, [r7, #20]
 80021c6:	fa01 f303 	lsl.w	r3, r1, r3
 80021ca:	43d9      	mvns	r1, r3
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80021d0:	4313      	orrs	r3, r2
         );
}
 80021d2:	4618      	mov	r0, r3
 80021d4:	3724      	adds	r7, #36	; 0x24
 80021d6:	46bd      	mov	sp, r7
 80021d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021dc:	4770      	bx	lr
	...

080021e0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80021e0:	b580      	push	{r7, lr}
 80021e2:	b082      	sub	sp, #8
 80021e4:	af00      	add	r7, sp, #0
 80021e6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	3b01      	subs	r3, #1
 80021ec:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80021f0:	d301      	bcc.n	80021f6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80021f2:	2301      	movs	r3, #1
 80021f4:	e00f      	b.n	8002216 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80021f6:	4a0a      	ldr	r2, [pc, #40]	; (8002220 <SysTick_Config+0x40>)
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	3b01      	subs	r3, #1
 80021fc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80021fe:	210f      	movs	r1, #15
 8002200:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002204:	f7ff ff8e 	bl	8002124 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002208:	4b05      	ldr	r3, [pc, #20]	; (8002220 <SysTick_Config+0x40>)
 800220a:	2200      	movs	r2, #0
 800220c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800220e:	4b04      	ldr	r3, [pc, #16]	; (8002220 <SysTick_Config+0x40>)
 8002210:	2207      	movs	r2, #7
 8002212:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002214:	2300      	movs	r3, #0
}
 8002216:	4618      	mov	r0, r3
 8002218:	3708      	adds	r7, #8
 800221a:	46bd      	mov	sp, r7
 800221c:	bd80      	pop	{r7, pc}
 800221e:	bf00      	nop
 8002220:	e000e010 	.word	0xe000e010

08002224 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002224:	b580      	push	{r7, lr}
 8002226:	b082      	sub	sp, #8
 8002228:	af00      	add	r7, sp, #0
 800222a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800222c:	6878      	ldr	r0, [r7, #4]
 800222e:	f7ff ff47 	bl	80020c0 <__NVIC_SetPriorityGrouping>
}
 8002232:	bf00      	nop
 8002234:	3708      	adds	r7, #8
 8002236:	46bd      	mov	sp, r7
 8002238:	bd80      	pop	{r7, pc}

0800223a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800223a:	b580      	push	{r7, lr}
 800223c:	b086      	sub	sp, #24
 800223e:	af00      	add	r7, sp, #0
 8002240:	4603      	mov	r3, r0
 8002242:	60b9      	str	r1, [r7, #8]
 8002244:	607a      	str	r2, [r7, #4]
 8002246:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002248:	2300      	movs	r3, #0
 800224a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800224c:	f7ff ff5c 	bl	8002108 <__NVIC_GetPriorityGrouping>
 8002250:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002252:	687a      	ldr	r2, [r7, #4]
 8002254:	68b9      	ldr	r1, [r7, #8]
 8002256:	6978      	ldr	r0, [r7, #20]
 8002258:	f7ff ff8e 	bl	8002178 <NVIC_EncodePriority>
 800225c:	4602      	mov	r2, r0
 800225e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002262:	4611      	mov	r1, r2
 8002264:	4618      	mov	r0, r3
 8002266:	f7ff ff5d 	bl	8002124 <__NVIC_SetPriority>
}
 800226a:	bf00      	nop
 800226c:	3718      	adds	r7, #24
 800226e:	46bd      	mov	sp, r7
 8002270:	bd80      	pop	{r7, pc}

08002272 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002272:	b580      	push	{r7, lr}
 8002274:	b082      	sub	sp, #8
 8002276:	af00      	add	r7, sp, #0
 8002278:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800227a:	6878      	ldr	r0, [r7, #4]
 800227c:	f7ff ffb0 	bl	80021e0 <SysTick_Config>
 8002280:	4603      	mov	r3, r0
}
 8002282:	4618      	mov	r0, r3
 8002284:	3708      	adds	r7, #8
 8002286:	46bd      	mov	sp, r7
 8002288:	bd80      	pop	{r7, pc}
	...

0800228c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800228c:	b480      	push	{r7}
 800228e:	b089      	sub	sp, #36	; 0x24
 8002290:	af00      	add	r7, sp, #0
 8002292:	6078      	str	r0, [r7, #4]
 8002294:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002296:	2300      	movs	r3, #0
 8002298:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800229a:	2300      	movs	r3, #0
 800229c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800229e:	2300      	movs	r3, #0
 80022a0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80022a2:	2300      	movs	r3, #0
 80022a4:	61fb      	str	r3, [r7, #28]
 80022a6:	e159      	b.n	800255c <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80022a8:	2201      	movs	r2, #1
 80022aa:	69fb      	ldr	r3, [r7, #28]
 80022ac:	fa02 f303 	lsl.w	r3, r2, r3
 80022b0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80022b2:	683b      	ldr	r3, [r7, #0]
 80022b4:	681b      	ldr	r3, [r3, #0]
 80022b6:	697a      	ldr	r2, [r7, #20]
 80022b8:	4013      	ands	r3, r2
 80022ba:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80022bc:	693a      	ldr	r2, [r7, #16]
 80022be:	697b      	ldr	r3, [r7, #20]
 80022c0:	429a      	cmp	r2, r3
 80022c2:	f040 8148 	bne.w	8002556 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80022c6:	683b      	ldr	r3, [r7, #0]
 80022c8:	685b      	ldr	r3, [r3, #4]
 80022ca:	f003 0303 	and.w	r3, r3, #3
 80022ce:	2b01      	cmp	r3, #1
 80022d0:	d005      	beq.n	80022de <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80022d2:	683b      	ldr	r3, [r7, #0]
 80022d4:	685b      	ldr	r3, [r3, #4]
 80022d6:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80022da:	2b02      	cmp	r3, #2
 80022dc:	d130      	bne.n	8002340 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	689b      	ldr	r3, [r3, #8]
 80022e2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80022e4:	69fb      	ldr	r3, [r7, #28]
 80022e6:	005b      	lsls	r3, r3, #1
 80022e8:	2203      	movs	r2, #3
 80022ea:	fa02 f303 	lsl.w	r3, r2, r3
 80022ee:	43db      	mvns	r3, r3
 80022f0:	69ba      	ldr	r2, [r7, #24]
 80022f2:	4013      	ands	r3, r2
 80022f4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80022f6:	683b      	ldr	r3, [r7, #0]
 80022f8:	68da      	ldr	r2, [r3, #12]
 80022fa:	69fb      	ldr	r3, [r7, #28]
 80022fc:	005b      	lsls	r3, r3, #1
 80022fe:	fa02 f303 	lsl.w	r3, r2, r3
 8002302:	69ba      	ldr	r2, [r7, #24]
 8002304:	4313      	orrs	r3, r2
 8002306:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	69ba      	ldr	r2, [r7, #24]
 800230c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	685b      	ldr	r3, [r3, #4]
 8002312:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002314:	2201      	movs	r2, #1
 8002316:	69fb      	ldr	r3, [r7, #28]
 8002318:	fa02 f303 	lsl.w	r3, r2, r3
 800231c:	43db      	mvns	r3, r3
 800231e:	69ba      	ldr	r2, [r7, #24]
 8002320:	4013      	ands	r3, r2
 8002322:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002324:	683b      	ldr	r3, [r7, #0]
 8002326:	685b      	ldr	r3, [r3, #4]
 8002328:	091b      	lsrs	r3, r3, #4
 800232a:	f003 0201 	and.w	r2, r3, #1
 800232e:	69fb      	ldr	r3, [r7, #28]
 8002330:	fa02 f303 	lsl.w	r3, r2, r3
 8002334:	69ba      	ldr	r2, [r7, #24]
 8002336:	4313      	orrs	r3, r2
 8002338:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	69ba      	ldr	r2, [r7, #24]
 800233e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002340:	683b      	ldr	r3, [r7, #0]
 8002342:	685b      	ldr	r3, [r3, #4]
 8002344:	f003 0303 	and.w	r3, r3, #3
 8002348:	2b03      	cmp	r3, #3
 800234a:	d017      	beq.n	800237c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	68db      	ldr	r3, [r3, #12]
 8002350:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002352:	69fb      	ldr	r3, [r7, #28]
 8002354:	005b      	lsls	r3, r3, #1
 8002356:	2203      	movs	r2, #3
 8002358:	fa02 f303 	lsl.w	r3, r2, r3
 800235c:	43db      	mvns	r3, r3
 800235e:	69ba      	ldr	r2, [r7, #24]
 8002360:	4013      	ands	r3, r2
 8002362:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002364:	683b      	ldr	r3, [r7, #0]
 8002366:	689a      	ldr	r2, [r3, #8]
 8002368:	69fb      	ldr	r3, [r7, #28]
 800236a:	005b      	lsls	r3, r3, #1
 800236c:	fa02 f303 	lsl.w	r3, r2, r3
 8002370:	69ba      	ldr	r2, [r7, #24]
 8002372:	4313      	orrs	r3, r2
 8002374:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	69ba      	ldr	r2, [r7, #24]
 800237a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800237c:	683b      	ldr	r3, [r7, #0]
 800237e:	685b      	ldr	r3, [r3, #4]
 8002380:	f003 0303 	and.w	r3, r3, #3
 8002384:	2b02      	cmp	r3, #2
 8002386:	d123      	bne.n	80023d0 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002388:	69fb      	ldr	r3, [r7, #28]
 800238a:	08da      	lsrs	r2, r3, #3
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	3208      	adds	r2, #8
 8002390:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002394:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002396:	69fb      	ldr	r3, [r7, #28]
 8002398:	f003 0307 	and.w	r3, r3, #7
 800239c:	009b      	lsls	r3, r3, #2
 800239e:	220f      	movs	r2, #15
 80023a0:	fa02 f303 	lsl.w	r3, r2, r3
 80023a4:	43db      	mvns	r3, r3
 80023a6:	69ba      	ldr	r2, [r7, #24]
 80023a8:	4013      	ands	r3, r2
 80023aa:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80023ac:	683b      	ldr	r3, [r7, #0]
 80023ae:	691a      	ldr	r2, [r3, #16]
 80023b0:	69fb      	ldr	r3, [r7, #28]
 80023b2:	f003 0307 	and.w	r3, r3, #7
 80023b6:	009b      	lsls	r3, r3, #2
 80023b8:	fa02 f303 	lsl.w	r3, r2, r3
 80023bc:	69ba      	ldr	r2, [r7, #24]
 80023be:	4313      	orrs	r3, r2
 80023c0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80023c2:	69fb      	ldr	r3, [r7, #28]
 80023c4:	08da      	lsrs	r2, r3, #3
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	3208      	adds	r2, #8
 80023ca:	69b9      	ldr	r1, [r7, #24]
 80023cc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	681b      	ldr	r3, [r3, #0]
 80023d4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80023d6:	69fb      	ldr	r3, [r7, #28]
 80023d8:	005b      	lsls	r3, r3, #1
 80023da:	2203      	movs	r2, #3
 80023dc:	fa02 f303 	lsl.w	r3, r2, r3
 80023e0:	43db      	mvns	r3, r3
 80023e2:	69ba      	ldr	r2, [r7, #24]
 80023e4:	4013      	ands	r3, r2
 80023e6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80023e8:	683b      	ldr	r3, [r7, #0]
 80023ea:	685b      	ldr	r3, [r3, #4]
 80023ec:	f003 0203 	and.w	r2, r3, #3
 80023f0:	69fb      	ldr	r3, [r7, #28]
 80023f2:	005b      	lsls	r3, r3, #1
 80023f4:	fa02 f303 	lsl.w	r3, r2, r3
 80023f8:	69ba      	ldr	r2, [r7, #24]
 80023fa:	4313      	orrs	r3, r2
 80023fc:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	69ba      	ldr	r2, [r7, #24]
 8002402:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002404:	683b      	ldr	r3, [r7, #0]
 8002406:	685b      	ldr	r3, [r3, #4]
 8002408:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800240c:	2b00      	cmp	r3, #0
 800240e:	f000 80a2 	beq.w	8002556 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002412:	2300      	movs	r3, #0
 8002414:	60fb      	str	r3, [r7, #12]
 8002416:	4b57      	ldr	r3, [pc, #348]	; (8002574 <HAL_GPIO_Init+0x2e8>)
 8002418:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800241a:	4a56      	ldr	r2, [pc, #344]	; (8002574 <HAL_GPIO_Init+0x2e8>)
 800241c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002420:	6453      	str	r3, [r2, #68]	; 0x44
 8002422:	4b54      	ldr	r3, [pc, #336]	; (8002574 <HAL_GPIO_Init+0x2e8>)
 8002424:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002426:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800242a:	60fb      	str	r3, [r7, #12]
 800242c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800242e:	4a52      	ldr	r2, [pc, #328]	; (8002578 <HAL_GPIO_Init+0x2ec>)
 8002430:	69fb      	ldr	r3, [r7, #28]
 8002432:	089b      	lsrs	r3, r3, #2
 8002434:	3302      	adds	r3, #2
 8002436:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800243a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800243c:	69fb      	ldr	r3, [r7, #28]
 800243e:	f003 0303 	and.w	r3, r3, #3
 8002442:	009b      	lsls	r3, r3, #2
 8002444:	220f      	movs	r2, #15
 8002446:	fa02 f303 	lsl.w	r3, r2, r3
 800244a:	43db      	mvns	r3, r3
 800244c:	69ba      	ldr	r2, [r7, #24]
 800244e:	4013      	ands	r3, r2
 8002450:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	4a49      	ldr	r2, [pc, #292]	; (800257c <HAL_GPIO_Init+0x2f0>)
 8002456:	4293      	cmp	r3, r2
 8002458:	d019      	beq.n	800248e <HAL_GPIO_Init+0x202>
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	4a48      	ldr	r2, [pc, #288]	; (8002580 <HAL_GPIO_Init+0x2f4>)
 800245e:	4293      	cmp	r3, r2
 8002460:	d013      	beq.n	800248a <HAL_GPIO_Init+0x1fe>
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	4a47      	ldr	r2, [pc, #284]	; (8002584 <HAL_GPIO_Init+0x2f8>)
 8002466:	4293      	cmp	r3, r2
 8002468:	d00d      	beq.n	8002486 <HAL_GPIO_Init+0x1fa>
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	4a46      	ldr	r2, [pc, #280]	; (8002588 <HAL_GPIO_Init+0x2fc>)
 800246e:	4293      	cmp	r3, r2
 8002470:	d007      	beq.n	8002482 <HAL_GPIO_Init+0x1f6>
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	4a45      	ldr	r2, [pc, #276]	; (800258c <HAL_GPIO_Init+0x300>)
 8002476:	4293      	cmp	r3, r2
 8002478:	d101      	bne.n	800247e <HAL_GPIO_Init+0x1f2>
 800247a:	2304      	movs	r3, #4
 800247c:	e008      	b.n	8002490 <HAL_GPIO_Init+0x204>
 800247e:	2307      	movs	r3, #7
 8002480:	e006      	b.n	8002490 <HAL_GPIO_Init+0x204>
 8002482:	2303      	movs	r3, #3
 8002484:	e004      	b.n	8002490 <HAL_GPIO_Init+0x204>
 8002486:	2302      	movs	r3, #2
 8002488:	e002      	b.n	8002490 <HAL_GPIO_Init+0x204>
 800248a:	2301      	movs	r3, #1
 800248c:	e000      	b.n	8002490 <HAL_GPIO_Init+0x204>
 800248e:	2300      	movs	r3, #0
 8002490:	69fa      	ldr	r2, [r7, #28]
 8002492:	f002 0203 	and.w	r2, r2, #3
 8002496:	0092      	lsls	r2, r2, #2
 8002498:	4093      	lsls	r3, r2
 800249a:	69ba      	ldr	r2, [r7, #24]
 800249c:	4313      	orrs	r3, r2
 800249e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80024a0:	4935      	ldr	r1, [pc, #212]	; (8002578 <HAL_GPIO_Init+0x2ec>)
 80024a2:	69fb      	ldr	r3, [r7, #28]
 80024a4:	089b      	lsrs	r3, r3, #2
 80024a6:	3302      	adds	r3, #2
 80024a8:	69ba      	ldr	r2, [r7, #24]
 80024aa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80024ae:	4b38      	ldr	r3, [pc, #224]	; (8002590 <HAL_GPIO_Init+0x304>)
 80024b0:	689b      	ldr	r3, [r3, #8]
 80024b2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80024b4:	693b      	ldr	r3, [r7, #16]
 80024b6:	43db      	mvns	r3, r3
 80024b8:	69ba      	ldr	r2, [r7, #24]
 80024ba:	4013      	ands	r3, r2
 80024bc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80024be:	683b      	ldr	r3, [r7, #0]
 80024c0:	685b      	ldr	r3, [r3, #4]
 80024c2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80024c6:	2b00      	cmp	r3, #0
 80024c8:	d003      	beq.n	80024d2 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 80024ca:	69ba      	ldr	r2, [r7, #24]
 80024cc:	693b      	ldr	r3, [r7, #16]
 80024ce:	4313      	orrs	r3, r2
 80024d0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80024d2:	4a2f      	ldr	r2, [pc, #188]	; (8002590 <HAL_GPIO_Init+0x304>)
 80024d4:	69bb      	ldr	r3, [r7, #24]
 80024d6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80024d8:	4b2d      	ldr	r3, [pc, #180]	; (8002590 <HAL_GPIO_Init+0x304>)
 80024da:	68db      	ldr	r3, [r3, #12]
 80024dc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80024de:	693b      	ldr	r3, [r7, #16]
 80024e0:	43db      	mvns	r3, r3
 80024e2:	69ba      	ldr	r2, [r7, #24]
 80024e4:	4013      	ands	r3, r2
 80024e6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80024e8:	683b      	ldr	r3, [r7, #0]
 80024ea:	685b      	ldr	r3, [r3, #4]
 80024ec:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80024f0:	2b00      	cmp	r3, #0
 80024f2:	d003      	beq.n	80024fc <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 80024f4:	69ba      	ldr	r2, [r7, #24]
 80024f6:	693b      	ldr	r3, [r7, #16]
 80024f8:	4313      	orrs	r3, r2
 80024fa:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80024fc:	4a24      	ldr	r2, [pc, #144]	; (8002590 <HAL_GPIO_Init+0x304>)
 80024fe:	69bb      	ldr	r3, [r7, #24]
 8002500:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002502:	4b23      	ldr	r3, [pc, #140]	; (8002590 <HAL_GPIO_Init+0x304>)
 8002504:	685b      	ldr	r3, [r3, #4]
 8002506:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002508:	693b      	ldr	r3, [r7, #16]
 800250a:	43db      	mvns	r3, r3
 800250c:	69ba      	ldr	r2, [r7, #24]
 800250e:	4013      	ands	r3, r2
 8002510:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002512:	683b      	ldr	r3, [r7, #0]
 8002514:	685b      	ldr	r3, [r3, #4]
 8002516:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800251a:	2b00      	cmp	r3, #0
 800251c:	d003      	beq.n	8002526 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 800251e:	69ba      	ldr	r2, [r7, #24]
 8002520:	693b      	ldr	r3, [r7, #16]
 8002522:	4313      	orrs	r3, r2
 8002524:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002526:	4a1a      	ldr	r2, [pc, #104]	; (8002590 <HAL_GPIO_Init+0x304>)
 8002528:	69bb      	ldr	r3, [r7, #24]
 800252a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800252c:	4b18      	ldr	r3, [pc, #96]	; (8002590 <HAL_GPIO_Init+0x304>)
 800252e:	681b      	ldr	r3, [r3, #0]
 8002530:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002532:	693b      	ldr	r3, [r7, #16]
 8002534:	43db      	mvns	r3, r3
 8002536:	69ba      	ldr	r2, [r7, #24]
 8002538:	4013      	ands	r3, r2
 800253a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800253c:	683b      	ldr	r3, [r7, #0]
 800253e:	685b      	ldr	r3, [r3, #4]
 8002540:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002544:	2b00      	cmp	r3, #0
 8002546:	d003      	beq.n	8002550 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8002548:	69ba      	ldr	r2, [r7, #24]
 800254a:	693b      	ldr	r3, [r7, #16]
 800254c:	4313      	orrs	r3, r2
 800254e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002550:	4a0f      	ldr	r2, [pc, #60]	; (8002590 <HAL_GPIO_Init+0x304>)
 8002552:	69bb      	ldr	r3, [r7, #24]
 8002554:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002556:	69fb      	ldr	r3, [r7, #28]
 8002558:	3301      	adds	r3, #1
 800255a:	61fb      	str	r3, [r7, #28]
 800255c:	69fb      	ldr	r3, [r7, #28]
 800255e:	2b0f      	cmp	r3, #15
 8002560:	f67f aea2 	bls.w	80022a8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002564:	bf00      	nop
 8002566:	bf00      	nop
 8002568:	3724      	adds	r7, #36	; 0x24
 800256a:	46bd      	mov	sp, r7
 800256c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002570:	4770      	bx	lr
 8002572:	bf00      	nop
 8002574:	40023800 	.word	0x40023800
 8002578:	40013800 	.word	0x40013800
 800257c:	40020000 	.word	0x40020000
 8002580:	40020400 	.word	0x40020400
 8002584:	40020800 	.word	0x40020800
 8002588:	40020c00 	.word	0x40020c00
 800258c:	40021000 	.word	0x40021000
 8002590:	40013c00 	.word	0x40013c00

08002594 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002594:	b480      	push	{r7}
 8002596:	b083      	sub	sp, #12
 8002598:	af00      	add	r7, sp, #0
 800259a:	6078      	str	r0, [r7, #4]
 800259c:	460b      	mov	r3, r1
 800259e:	807b      	strh	r3, [r7, #2]
 80025a0:	4613      	mov	r3, r2
 80025a2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80025a4:	787b      	ldrb	r3, [r7, #1]
 80025a6:	2b00      	cmp	r3, #0
 80025a8:	d003      	beq.n	80025b2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80025aa:	887a      	ldrh	r2, [r7, #2]
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80025b0:	e003      	b.n	80025ba <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80025b2:	887b      	ldrh	r3, [r7, #2]
 80025b4:	041a      	lsls	r2, r3, #16
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	619a      	str	r2, [r3, #24]
}
 80025ba:	bf00      	nop
 80025bc:	370c      	adds	r7, #12
 80025be:	46bd      	mov	sp, r7
 80025c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025c4:	4770      	bx	lr
	...

080025c8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80025c8:	b580      	push	{r7, lr}
 80025ca:	b084      	sub	sp, #16
 80025cc:	af00      	add	r7, sp, #0
 80025ce:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	2b00      	cmp	r3, #0
 80025d4:	d101      	bne.n	80025da <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80025d6:	2301      	movs	r3, #1
 80025d8:	e12b      	b.n	8002832 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80025e0:	b2db      	uxtb	r3, r3
 80025e2:	2b00      	cmp	r3, #0
 80025e4:	d106      	bne.n	80025f4 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	2200      	movs	r2, #0
 80025ea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80025ee:	6878      	ldr	r0, [r7, #4]
 80025f0:	f7fe fd20 	bl	8001034 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	2224      	movs	r2, #36	; 0x24
 80025f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	681a      	ldr	r2, [r3, #0]
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	f022 0201 	bic.w	r2, r2, #1
 800260a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	681b      	ldr	r3, [r3, #0]
 8002610:	681a      	ldr	r2, [r3, #0]
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	681b      	ldr	r3, [r3, #0]
 8002616:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800261a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	681b      	ldr	r3, [r3, #0]
 8002620:	681a      	ldr	r2, [r3, #0]
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	681b      	ldr	r3, [r3, #0]
 8002626:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800262a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 800262c:	f001 fd22 	bl	8004074 <HAL_RCC_GetPCLK1Freq>
 8002630:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	685b      	ldr	r3, [r3, #4]
 8002636:	4a81      	ldr	r2, [pc, #516]	; (800283c <HAL_I2C_Init+0x274>)
 8002638:	4293      	cmp	r3, r2
 800263a:	d807      	bhi.n	800264c <HAL_I2C_Init+0x84>
 800263c:	68fb      	ldr	r3, [r7, #12]
 800263e:	4a80      	ldr	r2, [pc, #512]	; (8002840 <HAL_I2C_Init+0x278>)
 8002640:	4293      	cmp	r3, r2
 8002642:	bf94      	ite	ls
 8002644:	2301      	movls	r3, #1
 8002646:	2300      	movhi	r3, #0
 8002648:	b2db      	uxtb	r3, r3
 800264a:	e006      	b.n	800265a <HAL_I2C_Init+0x92>
 800264c:	68fb      	ldr	r3, [r7, #12]
 800264e:	4a7d      	ldr	r2, [pc, #500]	; (8002844 <HAL_I2C_Init+0x27c>)
 8002650:	4293      	cmp	r3, r2
 8002652:	bf94      	ite	ls
 8002654:	2301      	movls	r3, #1
 8002656:	2300      	movhi	r3, #0
 8002658:	b2db      	uxtb	r3, r3
 800265a:	2b00      	cmp	r3, #0
 800265c:	d001      	beq.n	8002662 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800265e:	2301      	movs	r3, #1
 8002660:	e0e7      	b.n	8002832 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8002662:	68fb      	ldr	r3, [r7, #12]
 8002664:	4a78      	ldr	r2, [pc, #480]	; (8002848 <HAL_I2C_Init+0x280>)
 8002666:	fba2 2303 	umull	r2, r3, r2, r3
 800266a:	0c9b      	lsrs	r3, r3, #18
 800266c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	681b      	ldr	r3, [r3, #0]
 8002672:	685b      	ldr	r3, [r3, #4]
 8002674:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	68ba      	ldr	r2, [r7, #8]
 800267e:	430a      	orrs	r2, r1
 8002680:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	681b      	ldr	r3, [r3, #0]
 8002686:	6a1b      	ldr	r3, [r3, #32]
 8002688:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	685b      	ldr	r3, [r3, #4]
 8002690:	4a6a      	ldr	r2, [pc, #424]	; (800283c <HAL_I2C_Init+0x274>)
 8002692:	4293      	cmp	r3, r2
 8002694:	d802      	bhi.n	800269c <HAL_I2C_Init+0xd4>
 8002696:	68bb      	ldr	r3, [r7, #8]
 8002698:	3301      	adds	r3, #1
 800269a:	e009      	b.n	80026b0 <HAL_I2C_Init+0xe8>
 800269c:	68bb      	ldr	r3, [r7, #8]
 800269e:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80026a2:	fb02 f303 	mul.w	r3, r2, r3
 80026a6:	4a69      	ldr	r2, [pc, #420]	; (800284c <HAL_I2C_Init+0x284>)
 80026a8:	fba2 2303 	umull	r2, r3, r2, r3
 80026ac:	099b      	lsrs	r3, r3, #6
 80026ae:	3301      	adds	r3, #1
 80026b0:	687a      	ldr	r2, [r7, #4]
 80026b2:	6812      	ldr	r2, [r2, #0]
 80026b4:	430b      	orrs	r3, r1
 80026b6:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	69db      	ldr	r3, [r3, #28]
 80026be:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80026c2:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	685b      	ldr	r3, [r3, #4]
 80026ca:	495c      	ldr	r1, [pc, #368]	; (800283c <HAL_I2C_Init+0x274>)
 80026cc:	428b      	cmp	r3, r1
 80026ce:	d819      	bhi.n	8002704 <HAL_I2C_Init+0x13c>
 80026d0:	68fb      	ldr	r3, [r7, #12]
 80026d2:	1e59      	subs	r1, r3, #1
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	685b      	ldr	r3, [r3, #4]
 80026d8:	005b      	lsls	r3, r3, #1
 80026da:	fbb1 f3f3 	udiv	r3, r1, r3
 80026de:	1c59      	adds	r1, r3, #1
 80026e0:	f640 73fc 	movw	r3, #4092	; 0xffc
 80026e4:	400b      	ands	r3, r1
 80026e6:	2b00      	cmp	r3, #0
 80026e8:	d00a      	beq.n	8002700 <HAL_I2C_Init+0x138>
 80026ea:	68fb      	ldr	r3, [r7, #12]
 80026ec:	1e59      	subs	r1, r3, #1
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	685b      	ldr	r3, [r3, #4]
 80026f2:	005b      	lsls	r3, r3, #1
 80026f4:	fbb1 f3f3 	udiv	r3, r1, r3
 80026f8:	3301      	adds	r3, #1
 80026fa:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80026fe:	e051      	b.n	80027a4 <HAL_I2C_Init+0x1dc>
 8002700:	2304      	movs	r3, #4
 8002702:	e04f      	b.n	80027a4 <HAL_I2C_Init+0x1dc>
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	689b      	ldr	r3, [r3, #8]
 8002708:	2b00      	cmp	r3, #0
 800270a:	d111      	bne.n	8002730 <HAL_I2C_Init+0x168>
 800270c:	68fb      	ldr	r3, [r7, #12]
 800270e:	1e58      	subs	r0, r3, #1
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	6859      	ldr	r1, [r3, #4]
 8002714:	460b      	mov	r3, r1
 8002716:	005b      	lsls	r3, r3, #1
 8002718:	440b      	add	r3, r1
 800271a:	fbb0 f3f3 	udiv	r3, r0, r3
 800271e:	3301      	adds	r3, #1
 8002720:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002724:	2b00      	cmp	r3, #0
 8002726:	bf0c      	ite	eq
 8002728:	2301      	moveq	r3, #1
 800272a:	2300      	movne	r3, #0
 800272c:	b2db      	uxtb	r3, r3
 800272e:	e012      	b.n	8002756 <HAL_I2C_Init+0x18e>
 8002730:	68fb      	ldr	r3, [r7, #12]
 8002732:	1e58      	subs	r0, r3, #1
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	6859      	ldr	r1, [r3, #4]
 8002738:	460b      	mov	r3, r1
 800273a:	009b      	lsls	r3, r3, #2
 800273c:	440b      	add	r3, r1
 800273e:	0099      	lsls	r1, r3, #2
 8002740:	440b      	add	r3, r1
 8002742:	fbb0 f3f3 	udiv	r3, r0, r3
 8002746:	3301      	adds	r3, #1
 8002748:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800274c:	2b00      	cmp	r3, #0
 800274e:	bf0c      	ite	eq
 8002750:	2301      	moveq	r3, #1
 8002752:	2300      	movne	r3, #0
 8002754:	b2db      	uxtb	r3, r3
 8002756:	2b00      	cmp	r3, #0
 8002758:	d001      	beq.n	800275e <HAL_I2C_Init+0x196>
 800275a:	2301      	movs	r3, #1
 800275c:	e022      	b.n	80027a4 <HAL_I2C_Init+0x1dc>
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	689b      	ldr	r3, [r3, #8]
 8002762:	2b00      	cmp	r3, #0
 8002764:	d10e      	bne.n	8002784 <HAL_I2C_Init+0x1bc>
 8002766:	68fb      	ldr	r3, [r7, #12]
 8002768:	1e58      	subs	r0, r3, #1
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	6859      	ldr	r1, [r3, #4]
 800276e:	460b      	mov	r3, r1
 8002770:	005b      	lsls	r3, r3, #1
 8002772:	440b      	add	r3, r1
 8002774:	fbb0 f3f3 	udiv	r3, r0, r3
 8002778:	3301      	adds	r3, #1
 800277a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800277e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002782:	e00f      	b.n	80027a4 <HAL_I2C_Init+0x1dc>
 8002784:	68fb      	ldr	r3, [r7, #12]
 8002786:	1e58      	subs	r0, r3, #1
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	6859      	ldr	r1, [r3, #4]
 800278c:	460b      	mov	r3, r1
 800278e:	009b      	lsls	r3, r3, #2
 8002790:	440b      	add	r3, r1
 8002792:	0099      	lsls	r1, r3, #2
 8002794:	440b      	add	r3, r1
 8002796:	fbb0 f3f3 	udiv	r3, r0, r3
 800279a:	3301      	adds	r3, #1
 800279c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80027a0:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80027a4:	6879      	ldr	r1, [r7, #4]
 80027a6:	6809      	ldr	r1, [r1, #0]
 80027a8:	4313      	orrs	r3, r2
 80027aa:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	681b      	ldr	r3, [r3, #0]
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	69da      	ldr	r2, [r3, #28]
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	6a1b      	ldr	r3, [r3, #32]
 80027be:	431a      	orrs	r2, r3
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	681b      	ldr	r3, [r3, #0]
 80027c4:	430a      	orrs	r2, r1
 80027c6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	681b      	ldr	r3, [r3, #0]
 80027cc:	689b      	ldr	r3, [r3, #8]
 80027ce:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80027d2:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80027d6:	687a      	ldr	r2, [r7, #4]
 80027d8:	6911      	ldr	r1, [r2, #16]
 80027da:	687a      	ldr	r2, [r7, #4]
 80027dc:	68d2      	ldr	r2, [r2, #12]
 80027de:	4311      	orrs	r1, r2
 80027e0:	687a      	ldr	r2, [r7, #4]
 80027e2:	6812      	ldr	r2, [r2, #0]
 80027e4:	430b      	orrs	r3, r1
 80027e6:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	681b      	ldr	r3, [r3, #0]
 80027ec:	68db      	ldr	r3, [r3, #12]
 80027ee:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	695a      	ldr	r2, [r3, #20]
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	699b      	ldr	r3, [r3, #24]
 80027fa:	431a      	orrs	r2, r3
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	681b      	ldr	r3, [r3, #0]
 8002800:	430a      	orrs	r2, r1
 8002802:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	681a      	ldr	r2, [r3, #0]
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	681b      	ldr	r3, [r3, #0]
 800280e:	f042 0201 	orr.w	r2, r2, #1
 8002812:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	2200      	movs	r2, #0
 8002818:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	2220      	movs	r2, #32
 800281e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	2200      	movs	r2, #0
 8002826:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	2200      	movs	r2, #0
 800282c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002830:	2300      	movs	r3, #0
}
 8002832:	4618      	mov	r0, r3
 8002834:	3710      	adds	r7, #16
 8002836:	46bd      	mov	sp, r7
 8002838:	bd80      	pop	{r7, pc}
 800283a:	bf00      	nop
 800283c:	000186a0 	.word	0x000186a0
 8002840:	001e847f 	.word	0x001e847f
 8002844:	003d08ff 	.word	0x003d08ff
 8002848:	431bde83 	.word	0x431bde83
 800284c:	10624dd3 	.word	0x10624dd3

08002850 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002850:	b580      	push	{r7, lr}
 8002852:	b088      	sub	sp, #32
 8002854:	af02      	add	r7, sp, #8
 8002856:	60f8      	str	r0, [r7, #12]
 8002858:	607a      	str	r2, [r7, #4]
 800285a:	461a      	mov	r2, r3
 800285c:	460b      	mov	r3, r1
 800285e:	817b      	strh	r3, [r7, #10]
 8002860:	4613      	mov	r3, r2
 8002862:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002864:	f7ff fbfc 	bl	8002060 <HAL_GetTick>
 8002868:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 800286a:	68fb      	ldr	r3, [r7, #12]
 800286c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002870:	b2db      	uxtb	r3, r3
 8002872:	2b20      	cmp	r3, #32
 8002874:	f040 80e0 	bne.w	8002a38 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002878:	697b      	ldr	r3, [r7, #20]
 800287a:	9300      	str	r3, [sp, #0]
 800287c:	2319      	movs	r3, #25
 800287e:	2201      	movs	r2, #1
 8002880:	4970      	ldr	r1, [pc, #448]	; (8002a44 <HAL_I2C_Master_Transmit+0x1f4>)
 8002882:	68f8      	ldr	r0, [r7, #12]
 8002884:	f000 fde8 	bl	8003458 <I2C_WaitOnFlagUntilTimeout>
 8002888:	4603      	mov	r3, r0
 800288a:	2b00      	cmp	r3, #0
 800288c:	d001      	beq.n	8002892 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 800288e:	2302      	movs	r3, #2
 8002890:	e0d3      	b.n	8002a3a <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002892:	68fb      	ldr	r3, [r7, #12]
 8002894:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002898:	2b01      	cmp	r3, #1
 800289a:	d101      	bne.n	80028a0 <HAL_I2C_Master_Transmit+0x50>
 800289c:	2302      	movs	r3, #2
 800289e:	e0cc      	b.n	8002a3a <HAL_I2C_Master_Transmit+0x1ea>
 80028a0:	68fb      	ldr	r3, [r7, #12]
 80028a2:	2201      	movs	r2, #1
 80028a4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80028a8:	68fb      	ldr	r3, [r7, #12]
 80028aa:	681b      	ldr	r3, [r3, #0]
 80028ac:	681b      	ldr	r3, [r3, #0]
 80028ae:	f003 0301 	and.w	r3, r3, #1
 80028b2:	2b01      	cmp	r3, #1
 80028b4:	d007      	beq.n	80028c6 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80028b6:	68fb      	ldr	r3, [r7, #12]
 80028b8:	681b      	ldr	r3, [r3, #0]
 80028ba:	681a      	ldr	r2, [r3, #0]
 80028bc:	68fb      	ldr	r3, [r7, #12]
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	f042 0201 	orr.w	r2, r2, #1
 80028c4:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80028c6:	68fb      	ldr	r3, [r7, #12]
 80028c8:	681b      	ldr	r3, [r3, #0]
 80028ca:	681a      	ldr	r2, [r3, #0]
 80028cc:	68fb      	ldr	r3, [r7, #12]
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80028d4:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 80028d6:	68fb      	ldr	r3, [r7, #12]
 80028d8:	2221      	movs	r2, #33	; 0x21
 80028da:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80028de:	68fb      	ldr	r3, [r7, #12]
 80028e0:	2210      	movs	r2, #16
 80028e2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80028e6:	68fb      	ldr	r3, [r7, #12]
 80028e8:	2200      	movs	r2, #0
 80028ea:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80028ec:	68fb      	ldr	r3, [r7, #12]
 80028ee:	687a      	ldr	r2, [r7, #4]
 80028f0:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80028f2:	68fb      	ldr	r3, [r7, #12]
 80028f4:	893a      	ldrh	r2, [r7, #8]
 80028f6:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80028f8:	68fb      	ldr	r3, [r7, #12]
 80028fa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80028fc:	b29a      	uxth	r2, r3
 80028fe:	68fb      	ldr	r3, [r7, #12]
 8002900:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002902:	68fb      	ldr	r3, [r7, #12]
 8002904:	4a50      	ldr	r2, [pc, #320]	; (8002a48 <HAL_I2C_Master_Transmit+0x1f8>)
 8002906:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8002908:	8979      	ldrh	r1, [r7, #10]
 800290a:	697b      	ldr	r3, [r7, #20]
 800290c:	6a3a      	ldr	r2, [r7, #32]
 800290e:	68f8      	ldr	r0, [r7, #12]
 8002910:	f000 fbbc 	bl	800308c <I2C_MasterRequestWrite>
 8002914:	4603      	mov	r3, r0
 8002916:	2b00      	cmp	r3, #0
 8002918:	d001      	beq.n	800291e <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 800291a:	2301      	movs	r3, #1
 800291c:	e08d      	b.n	8002a3a <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800291e:	2300      	movs	r3, #0
 8002920:	613b      	str	r3, [r7, #16]
 8002922:	68fb      	ldr	r3, [r7, #12]
 8002924:	681b      	ldr	r3, [r3, #0]
 8002926:	695b      	ldr	r3, [r3, #20]
 8002928:	613b      	str	r3, [r7, #16]
 800292a:	68fb      	ldr	r3, [r7, #12]
 800292c:	681b      	ldr	r3, [r3, #0]
 800292e:	699b      	ldr	r3, [r3, #24]
 8002930:	613b      	str	r3, [r7, #16]
 8002932:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8002934:	e066      	b.n	8002a04 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002936:	697a      	ldr	r2, [r7, #20]
 8002938:	6a39      	ldr	r1, [r7, #32]
 800293a:	68f8      	ldr	r0, [r7, #12]
 800293c:	f000 fe62 	bl	8003604 <I2C_WaitOnTXEFlagUntilTimeout>
 8002940:	4603      	mov	r3, r0
 8002942:	2b00      	cmp	r3, #0
 8002944:	d00d      	beq.n	8002962 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002946:	68fb      	ldr	r3, [r7, #12]
 8002948:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800294a:	2b04      	cmp	r3, #4
 800294c:	d107      	bne.n	800295e <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800294e:	68fb      	ldr	r3, [r7, #12]
 8002950:	681b      	ldr	r3, [r3, #0]
 8002952:	681a      	ldr	r2, [r3, #0]
 8002954:	68fb      	ldr	r3, [r7, #12]
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800295c:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800295e:	2301      	movs	r3, #1
 8002960:	e06b      	b.n	8002a3a <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002962:	68fb      	ldr	r3, [r7, #12]
 8002964:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002966:	781a      	ldrb	r2, [r3, #0]
 8002968:	68fb      	ldr	r3, [r7, #12]
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800296e:	68fb      	ldr	r3, [r7, #12]
 8002970:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002972:	1c5a      	adds	r2, r3, #1
 8002974:	68fb      	ldr	r3, [r7, #12]
 8002976:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8002978:	68fb      	ldr	r3, [r7, #12]
 800297a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800297c:	b29b      	uxth	r3, r3
 800297e:	3b01      	subs	r3, #1
 8002980:	b29a      	uxth	r2, r3
 8002982:	68fb      	ldr	r3, [r7, #12]
 8002984:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8002986:	68fb      	ldr	r3, [r7, #12]
 8002988:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800298a:	3b01      	subs	r3, #1
 800298c:	b29a      	uxth	r2, r3
 800298e:	68fb      	ldr	r3, [r7, #12]
 8002990:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8002992:	68fb      	ldr	r3, [r7, #12]
 8002994:	681b      	ldr	r3, [r3, #0]
 8002996:	695b      	ldr	r3, [r3, #20]
 8002998:	f003 0304 	and.w	r3, r3, #4
 800299c:	2b04      	cmp	r3, #4
 800299e:	d11b      	bne.n	80029d8 <HAL_I2C_Master_Transmit+0x188>
 80029a0:	68fb      	ldr	r3, [r7, #12]
 80029a2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80029a4:	2b00      	cmp	r3, #0
 80029a6:	d017      	beq.n	80029d8 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80029a8:	68fb      	ldr	r3, [r7, #12]
 80029aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029ac:	781a      	ldrb	r2, [r3, #0]
 80029ae:	68fb      	ldr	r3, [r7, #12]
 80029b0:	681b      	ldr	r3, [r3, #0]
 80029b2:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80029b4:	68fb      	ldr	r3, [r7, #12]
 80029b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029b8:	1c5a      	adds	r2, r3, #1
 80029ba:	68fb      	ldr	r3, [r7, #12]
 80029bc:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 80029be:	68fb      	ldr	r3, [r7, #12]
 80029c0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80029c2:	b29b      	uxth	r3, r3
 80029c4:	3b01      	subs	r3, #1
 80029c6:	b29a      	uxth	r2, r3
 80029c8:	68fb      	ldr	r3, [r7, #12]
 80029ca:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 80029cc:	68fb      	ldr	r3, [r7, #12]
 80029ce:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80029d0:	3b01      	subs	r3, #1
 80029d2:	b29a      	uxth	r2, r3
 80029d4:	68fb      	ldr	r3, [r7, #12]
 80029d6:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80029d8:	697a      	ldr	r2, [r7, #20]
 80029da:	6a39      	ldr	r1, [r7, #32]
 80029dc:	68f8      	ldr	r0, [r7, #12]
 80029de:	f000 fe52 	bl	8003686 <I2C_WaitOnBTFFlagUntilTimeout>
 80029e2:	4603      	mov	r3, r0
 80029e4:	2b00      	cmp	r3, #0
 80029e6:	d00d      	beq.n	8002a04 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80029e8:	68fb      	ldr	r3, [r7, #12]
 80029ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029ec:	2b04      	cmp	r3, #4
 80029ee:	d107      	bne.n	8002a00 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80029f0:	68fb      	ldr	r3, [r7, #12]
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	681a      	ldr	r2, [r3, #0]
 80029f6:	68fb      	ldr	r3, [r7, #12]
 80029f8:	681b      	ldr	r3, [r3, #0]
 80029fa:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80029fe:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002a00:	2301      	movs	r3, #1
 8002a02:	e01a      	b.n	8002a3a <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8002a04:	68fb      	ldr	r3, [r7, #12]
 8002a06:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002a08:	2b00      	cmp	r3, #0
 8002a0a:	d194      	bne.n	8002936 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002a0c:	68fb      	ldr	r3, [r7, #12]
 8002a0e:	681b      	ldr	r3, [r3, #0]
 8002a10:	681a      	ldr	r2, [r3, #0]
 8002a12:	68fb      	ldr	r3, [r7, #12]
 8002a14:	681b      	ldr	r3, [r3, #0]
 8002a16:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002a1a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002a1c:	68fb      	ldr	r3, [r7, #12]
 8002a1e:	2220      	movs	r2, #32
 8002a20:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002a24:	68fb      	ldr	r3, [r7, #12]
 8002a26:	2200      	movs	r2, #0
 8002a28:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002a2c:	68fb      	ldr	r3, [r7, #12]
 8002a2e:	2200      	movs	r2, #0
 8002a30:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8002a34:	2300      	movs	r3, #0
 8002a36:	e000      	b.n	8002a3a <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8002a38:	2302      	movs	r3, #2
  }
}
 8002a3a:	4618      	mov	r0, r3
 8002a3c:	3718      	adds	r7, #24
 8002a3e:	46bd      	mov	sp, r7
 8002a40:	bd80      	pop	{r7, pc}
 8002a42:	bf00      	nop
 8002a44:	00100002 	.word	0x00100002
 8002a48:	ffff0000 	.word	0xffff0000

08002a4c <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002a4c:	b580      	push	{r7, lr}
 8002a4e:	b08c      	sub	sp, #48	; 0x30
 8002a50:	af02      	add	r7, sp, #8
 8002a52:	60f8      	str	r0, [r7, #12]
 8002a54:	607a      	str	r2, [r7, #4]
 8002a56:	461a      	mov	r2, r3
 8002a58:	460b      	mov	r3, r1
 8002a5a:	817b      	strh	r3, [r7, #10]
 8002a5c:	4613      	mov	r3, r2
 8002a5e:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002a60:	f7ff fafe 	bl	8002060 <HAL_GetTick>
 8002a64:	6278      	str	r0, [r7, #36]	; 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002a66:	68fb      	ldr	r3, [r7, #12]
 8002a68:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002a6c:	b2db      	uxtb	r3, r3
 8002a6e:	2b20      	cmp	r3, #32
 8002a70:	f040 820b 	bne.w	8002e8a <HAL_I2C_Master_Receive+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002a74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a76:	9300      	str	r3, [sp, #0]
 8002a78:	2319      	movs	r3, #25
 8002a7a:	2201      	movs	r2, #1
 8002a7c:	497c      	ldr	r1, [pc, #496]	; (8002c70 <HAL_I2C_Master_Receive+0x224>)
 8002a7e:	68f8      	ldr	r0, [r7, #12]
 8002a80:	f000 fcea 	bl	8003458 <I2C_WaitOnFlagUntilTimeout>
 8002a84:	4603      	mov	r3, r0
 8002a86:	2b00      	cmp	r3, #0
 8002a88:	d001      	beq.n	8002a8e <HAL_I2C_Master_Receive+0x42>
    {
      return HAL_BUSY;
 8002a8a:	2302      	movs	r3, #2
 8002a8c:	e1fe      	b.n	8002e8c <HAL_I2C_Master_Receive+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002a8e:	68fb      	ldr	r3, [r7, #12]
 8002a90:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002a94:	2b01      	cmp	r3, #1
 8002a96:	d101      	bne.n	8002a9c <HAL_I2C_Master_Receive+0x50>
 8002a98:	2302      	movs	r3, #2
 8002a9a:	e1f7      	b.n	8002e8c <HAL_I2C_Master_Receive+0x440>
 8002a9c:	68fb      	ldr	r3, [r7, #12]
 8002a9e:	2201      	movs	r2, #1
 8002aa0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002aa4:	68fb      	ldr	r3, [r7, #12]
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	681b      	ldr	r3, [r3, #0]
 8002aaa:	f003 0301 	and.w	r3, r3, #1
 8002aae:	2b01      	cmp	r3, #1
 8002ab0:	d007      	beq.n	8002ac2 <HAL_I2C_Master_Receive+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002ab2:	68fb      	ldr	r3, [r7, #12]
 8002ab4:	681b      	ldr	r3, [r3, #0]
 8002ab6:	681a      	ldr	r2, [r3, #0]
 8002ab8:	68fb      	ldr	r3, [r7, #12]
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	f042 0201 	orr.w	r2, r2, #1
 8002ac0:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002ac2:	68fb      	ldr	r3, [r7, #12]
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	681a      	ldr	r2, [r3, #0]
 8002ac8:	68fb      	ldr	r3, [r7, #12]
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002ad0:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 8002ad2:	68fb      	ldr	r3, [r7, #12]
 8002ad4:	2222      	movs	r2, #34	; 0x22
 8002ad6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8002ada:	68fb      	ldr	r3, [r7, #12]
 8002adc:	2210      	movs	r2, #16
 8002ade:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8002ae2:	68fb      	ldr	r3, [r7, #12]
 8002ae4:	2200      	movs	r2, #0
 8002ae6:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002ae8:	68fb      	ldr	r3, [r7, #12]
 8002aea:	687a      	ldr	r2, [r7, #4]
 8002aec:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8002aee:	68fb      	ldr	r3, [r7, #12]
 8002af0:	893a      	ldrh	r2, [r7, #8]
 8002af2:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002af4:	68fb      	ldr	r3, [r7, #12]
 8002af6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002af8:	b29a      	uxth	r2, r3
 8002afa:	68fb      	ldr	r3, [r7, #12]
 8002afc:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002afe:	68fb      	ldr	r3, [r7, #12]
 8002b00:	4a5c      	ldr	r2, [pc, #368]	; (8002c74 <HAL_I2C_Master_Receive+0x228>)
 8002b02:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8002b04:	8979      	ldrh	r1, [r7, #10]
 8002b06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b08:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002b0a:	68f8      	ldr	r0, [r7, #12]
 8002b0c:	f000 fb40 	bl	8003190 <I2C_MasterRequestRead>
 8002b10:	4603      	mov	r3, r0
 8002b12:	2b00      	cmp	r3, #0
 8002b14:	d001      	beq.n	8002b1a <HAL_I2C_Master_Receive+0xce>
    {
      return HAL_ERROR;
 8002b16:	2301      	movs	r3, #1
 8002b18:	e1b8      	b.n	8002e8c <HAL_I2C_Master_Receive+0x440>
    }

    if (hi2c->XferSize == 0U)
 8002b1a:	68fb      	ldr	r3, [r7, #12]
 8002b1c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002b1e:	2b00      	cmp	r3, #0
 8002b20:	d113      	bne.n	8002b4a <HAL_I2C_Master_Receive+0xfe>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002b22:	2300      	movs	r3, #0
 8002b24:	623b      	str	r3, [r7, #32]
 8002b26:	68fb      	ldr	r3, [r7, #12]
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	695b      	ldr	r3, [r3, #20]
 8002b2c:	623b      	str	r3, [r7, #32]
 8002b2e:	68fb      	ldr	r3, [r7, #12]
 8002b30:	681b      	ldr	r3, [r3, #0]
 8002b32:	699b      	ldr	r3, [r3, #24]
 8002b34:	623b      	str	r3, [r7, #32]
 8002b36:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002b38:	68fb      	ldr	r3, [r7, #12]
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	681a      	ldr	r2, [r3, #0]
 8002b3e:	68fb      	ldr	r3, [r7, #12]
 8002b40:	681b      	ldr	r3, [r3, #0]
 8002b42:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002b46:	601a      	str	r2, [r3, #0]
 8002b48:	e18c      	b.n	8002e64 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 1U)
 8002b4a:	68fb      	ldr	r3, [r7, #12]
 8002b4c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002b4e:	2b01      	cmp	r3, #1
 8002b50:	d11b      	bne.n	8002b8a <HAL_I2C_Master_Receive+0x13e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002b52:	68fb      	ldr	r3, [r7, #12]
 8002b54:	681b      	ldr	r3, [r3, #0]
 8002b56:	681a      	ldr	r2, [r3, #0]
 8002b58:	68fb      	ldr	r3, [r7, #12]
 8002b5a:	681b      	ldr	r3, [r3, #0]
 8002b5c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002b60:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002b62:	2300      	movs	r3, #0
 8002b64:	61fb      	str	r3, [r7, #28]
 8002b66:	68fb      	ldr	r3, [r7, #12]
 8002b68:	681b      	ldr	r3, [r3, #0]
 8002b6a:	695b      	ldr	r3, [r3, #20]
 8002b6c:	61fb      	str	r3, [r7, #28]
 8002b6e:	68fb      	ldr	r3, [r7, #12]
 8002b70:	681b      	ldr	r3, [r3, #0]
 8002b72:	699b      	ldr	r3, [r3, #24]
 8002b74:	61fb      	str	r3, [r7, #28]
 8002b76:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002b78:	68fb      	ldr	r3, [r7, #12]
 8002b7a:	681b      	ldr	r3, [r3, #0]
 8002b7c:	681a      	ldr	r2, [r3, #0]
 8002b7e:	68fb      	ldr	r3, [r7, #12]
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002b86:	601a      	str	r2, [r3, #0]
 8002b88:	e16c      	b.n	8002e64 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 2U)
 8002b8a:	68fb      	ldr	r3, [r7, #12]
 8002b8c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002b8e:	2b02      	cmp	r3, #2
 8002b90:	d11b      	bne.n	8002bca <HAL_I2C_Master_Receive+0x17e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002b92:	68fb      	ldr	r3, [r7, #12]
 8002b94:	681b      	ldr	r3, [r3, #0]
 8002b96:	681a      	ldr	r2, [r3, #0]
 8002b98:	68fb      	ldr	r3, [r7, #12]
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002ba0:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002ba2:	68fb      	ldr	r3, [r7, #12]
 8002ba4:	681b      	ldr	r3, [r3, #0]
 8002ba6:	681a      	ldr	r2, [r3, #0]
 8002ba8:	68fb      	ldr	r3, [r7, #12]
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002bb0:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002bb2:	2300      	movs	r3, #0
 8002bb4:	61bb      	str	r3, [r7, #24]
 8002bb6:	68fb      	ldr	r3, [r7, #12]
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	695b      	ldr	r3, [r3, #20]
 8002bbc:	61bb      	str	r3, [r7, #24]
 8002bbe:	68fb      	ldr	r3, [r7, #12]
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	699b      	ldr	r3, [r3, #24]
 8002bc4:	61bb      	str	r3, [r7, #24]
 8002bc6:	69bb      	ldr	r3, [r7, #24]
 8002bc8:	e14c      	b.n	8002e64 <HAL_I2C_Master_Receive+0x418>
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002bca:	68fb      	ldr	r3, [r7, #12]
 8002bcc:	681b      	ldr	r3, [r3, #0]
 8002bce:	681a      	ldr	r2, [r3, #0]
 8002bd0:	68fb      	ldr	r3, [r7, #12]
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002bd8:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002bda:	2300      	movs	r3, #0
 8002bdc:	617b      	str	r3, [r7, #20]
 8002bde:	68fb      	ldr	r3, [r7, #12]
 8002be0:	681b      	ldr	r3, [r3, #0]
 8002be2:	695b      	ldr	r3, [r3, #20]
 8002be4:	617b      	str	r3, [r7, #20]
 8002be6:	68fb      	ldr	r3, [r7, #12]
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	699b      	ldr	r3, [r3, #24]
 8002bec:	617b      	str	r3, [r7, #20]
 8002bee:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8002bf0:	e138      	b.n	8002e64 <HAL_I2C_Master_Receive+0x418>
    {
      if (hi2c->XferSize <= 3U)
 8002bf2:	68fb      	ldr	r3, [r7, #12]
 8002bf4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002bf6:	2b03      	cmp	r3, #3
 8002bf8:	f200 80f1 	bhi.w	8002dde <HAL_I2C_Master_Receive+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8002bfc:	68fb      	ldr	r3, [r7, #12]
 8002bfe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002c00:	2b01      	cmp	r3, #1
 8002c02:	d123      	bne.n	8002c4c <HAL_I2C_Master_Receive+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002c04:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002c06:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8002c08:	68f8      	ldr	r0, [r7, #12]
 8002c0a:	f000 fd7d 	bl	8003708 <I2C_WaitOnRXNEFlagUntilTimeout>
 8002c0e:	4603      	mov	r3, r0
 8002c10:	2b00      	cmp	r3, #0
 8002c12:	d001      	beq.n	8002c18 <HAL_I2C_Master_Receive+0x1cc>
          {
            return HAL_ERROR;
 8002c14:	2301      	movs	r3, #1
 8002c16:	e139      	b.n	8002e8c <HAL_I2C_Master_Receive+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002c18:	68fb      	ldr	r3, [r7, #12]
 8002c1a:	681b      	ldr	r3, [r3, #0]
 8002c1c:	691a      	ldr	r2, [r3, #16]
 8002c1e:	68fb      	ldr	r3, [r7, #12]
 8002c20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c22:	b2d2      	uxtb	r2, r2
 8002c24:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002c26:	68fb      	ldr	r3, [r7, #12]
 8002c28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c2a:	1c5a      	adds	r2, r3, #1
 8002c2c:	68fb      	ldr	r3, [r7, #12]
 8002c2e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002c30:	68fb      	ldr	r3, [r7, #12]
 8002c32:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002c34:	3b01      	subs	r3, #1
 8002c36:	b29a      	uxth	r2, r3
 8002c38:	68fb      	ldr	r3, [r7, #12]
 8002c3a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002c3c:	68fb      	ldr	r3, [r7, #12]
 8002c3e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002c40:	b29b      	uxth	r3, r3
 8002c42:	3b01      	subs	r3, #1
 8002c44:	b29a      	uxth	r2, r3
 8002c46:	68fb      	ldr	r3, [r7, #12]
 8002c48:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002c4a:	e10b      	b.n	8002e64 <HAL_I2C_Master_Receive+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8002c4c:	68fb      	ldr	r3, [r7, #12]
 8002c4e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002c50:	2b02      	cmp	r3, #2
 8002c52:	d14e      	bne.n	8002cf2 <HAL_I2C_Master_Receive+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002c54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c56:	9300      	str	r3, [sp, #0]
 8002c58:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002c5a:	2200      	movs	r2, #0
 8002c5c:	4906      	ldr	r1, [pc, #24]	; (8002c78 <HAL_I2C_Master_Receive+0x22c>)
 8002c5e:	68f8      	ldr	r0, [r7, #12]
 8002c60:	f000 fbfa 	bl	8003458 <I2C_WaitOnFlagUntilTimeout>
 8002c64:	4603      	mov	r3, r0
 8002c66:	2b00      	cmp	r3, #0
 8002c68:	d008      	beq.n	8002c7c <HAL_I2C_Master_Receive+0x230>
          {
            return HAL_ERROR;
 8002c6a:	2301      	movs	r3, #1
 8002c6c:	e10e      	b.n	8002e8c <HAL_I2C_Master_Receive+0x440>
 8002c6e:	bf00      	nop
 8002c70:	00100002 	.word	0x00100002
 8002c74:	ffff0000 	.word	0xffff0000
 8002c78:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002c7c:	68fb      	ldr	r3, [r7, #12]
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	681a      	ldr	r2, [r3, #0]
 8002c82:	68fb      	ldr	r3, [r7, #12]
 8002c84:	681b      	ldr	r3, [r3, #0]
 8002c86:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002c8a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002c8c:	68fb      	ldr	r3, [r7, #12]
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	691a      	ldr	r2, [r3, #16]
 8002c92:	68fb      	ldr	r3, [r7, #12]
 8002c94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c96:	b2d2      	uxtb	r2, r2
 8002c98:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002c9a:	68fb      	ldr	r3, [r7, #12]
 8002c9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c9e:	1c5a      	adds	r2, r3, #1
 8002ca0:	68fb      	ldr	r3, [r7, #12]
 8002ca2:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002ca4:	68fb      	ldr	r3, [r7, #12]
 8002ca6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002ca8:	3b01      	subs	r3, #1
 8002caa:	b29a      	uxth	r2, r3
 8002cac:	68fb      	ldr	r3, [r7, #12]
 8002cae:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002cb0:	68fb      	ldr	r3, [r7, #12]
 8002cb2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002cb4:	b29b      	uxth	r3, r3
 8002cb6:	3b01      	subs	r3, #1
 8002cb8:	b29a      	uxth	r2, r3
 8002cba:	68fb      	ldr	r3, [r7, #12]
 8002cbc:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002cbe:	68fb      	ldr	r3, [r7, #12]
 8002cc0:	681b      	ldr	r3, [r3, #0]
 8002cc2:	691a      	ldr	r2, [r3, #16]
 8002cc4:	68fb      	ldr	r3, [r7, #12]
 8002cc6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002cc8:	b2d2      	uxtb	r2, r2
 8002cca:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002ccc:	68fb      	ldr	r3, [r7, #12]
 8002cce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002cd0:	1c5a      	adds	r2, r3, #1
 8002cd2:	68fb      	ldr	r3, [r7, #12]
 8002cd4:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002cd6:	68fb      	ldr	r3, [r7, #12]
 8002cd8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002cda:	3b01      	subs	r3, #1
 8002cdc:	b29a      	uxth	r2, r3
 8002cde:	68fb      	ldr	r3, [r7, #12]
 8002ce0:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002ce2:	68fb      	ldr	r3, [r7, #12]
 8002ce4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002ce6:	b29b      	uxth	r3, r3
 8002ce8:	3b01      	subs	r3, #1
 8002cea:	b29a      	uxth	r2, r3
 8002cec:	68fb      	ldr	r3, [r7, #12]
 8002cee:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002cf0:	e0b8      	b.n	8002e64 <HAL_I2C_Master_Receive+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002cf2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002cf4:	9300      	str	r3, [sp, #0]
 8002cf6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002cf8:	2200      	movs	r2, #0
 8002cfa:	4966      	ldr	r1, [pc, #408]	; (8002e94 <HAL_I2C_Master_Receive+0x448>)
 8002cfc:	68f8      	ldr	r0, [r7, #12]
 8002cfe:	f000 fbab 	bl	8003458 <I2C_WaitOnFlagUntilTimeout>
 8002d02:	4603      	mov	r3, r0
 8002d04:	2b00      	cmp	r3, #0
 8002d06:	d001      	beq.n	8002d0c <HAL_I2C_Master_Receive+0x2c0>
          {
            return HAL_ERROR;
 8002d08:	2301      	movs	r3, #1
 8002d0a:	e0bf      	b.n	8002e8c <HAL_I2C_Master_Receive+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002d0c:	68fb      	ldr	r3, [r7, #12]
 8002d0e:	681b      	ldr	r3, [r3, #0]
 8002d10:	681a      	ldr	r2, [r3, #0]
 8002d12:	68fb      	ldr	r3, [r7, #12]
 8002d14:	681b      	ldr	r3, [r3, #0]
 8002d16:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002d1a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002d1c:	68fb      	ldr	r3, [r7, #12]
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	691a      	ldr	r2, [r3, #16]
 8002d22:	68fb      	ldr	r3, [r7, #12]
 8002d24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d26:	b2d2      	uxtb	r2, r2
 8002d28:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002d2a:	68fb      	ldr	r3, [r7, #12]
 8002d2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d2e:	1c5a      	adds	r2, r3, #1
 8002d30:	68fb      	ldr	r3, [r7, #12]
 8002d32:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002d34:	68fb      	ldr	r3, [r7, #12]
 8002d36:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002d38:	3b01      	subs	r3, #1
 8002d3a:	b29a      	uxth	r2, r3
 8002d3c:	68fb      	ldr	r3, [r7, #12]
 8002d3e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002d40:	68fb      	ldr	r3, [r7, #12]
 8002d42:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002d44:	b29b      	uxth	r3, r3
 8002d46:	3b01      	subs	r3, #1
 8002d48:	b29a      	uxth	r2, r3
 8002d4a:	68fb      	ldr	r3, [r7, #12]
 8002d4c:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002d4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d50:	9300      	str	r3, [sp, #0]
 8002d52:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002d54:	2200      	movs	r2, #0
 8002d56:	494f      	ldr	r1, [pc, #316]	; (8002e94 <HAL_I2C_Master_Receive+0x448>)
 8002d58:	68f8      	ldr	r0, [r7, #12]
 8002d5a:	f000 fb7d 	bl	8003458 <I2C_WaitOnFlagUntilTimeout>
 8002d5e:	4603      	mov	r3, r0
 8002d60:	2b00      	cmp	r3, #0
 8002d62:	d001      	beq.n	8002d68 <HAL_I2C_Master_Receive+0x31c>
          {
            return HAL_ERROR;
 8002d64:	2301      	movs	r3, #1
 8002d66:	e091      	b.n	8002e8c <HAL_I2C_Master_Receive+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002d68:	68fb      	ldr	r3, [r7, #12]
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	681a      	ldr	r2, [r3, #0]
 8002d6e:	68fb      	ldr	r3, [r7, #12]
 8002d70:	681b      	ldr	r3, [r3, #0]
 8002d72:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002d76:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002d78:	68fb      	ldr	r3, [r7, #12]
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	691a      	ldr	r2, [r3, #16]
 8002d7e:	68fb      	ldr	r3, [r7, #12]
 8002d80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d82:	b2d2      	uxtb	r2, r2
 8002d84:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002d86:	68fb      	ldr	r3, [r7, #12]
 8002d88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d8a:	1c5a      	adds	r2, r3, #1
 8002d8c:	68fb      	ldr	r3, [r7, #12]
 8002d8e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002d90:	68fb      	ldr	r3, [r7, #12]
 8002d92:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002d94:	3b01      	subs	r3, #1
 8002d96:	b29a      	uxth	r2, r3
 8002d98:	68fb      	ldr	r3, [r7, #12]
 8002d9a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002d9c:	68fb      	ldr	r3, [r7, #12]
 8002d9e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002da0:	b29b      	uxth	r3, r3
 8002da2:	3b01      	subs	r3, #1
 8002da4:	b29a      	uxth	r2, r3
 8002da6:	68fb      	ldr	r3, [r7, #12]
 8002da8:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002daa:	68fb      	ldr	r3, [r7, #12]
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	691a      	ldr	r2, [r3, #16]
 8002db0:	68fb      	ldr	r3, [r7, #12]
 8002db2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002db4:	b2d2      	uxtb	r2, r2
 8002db6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002db8:	68fb      	ldr	r3, [r7, #12]
 8002dba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002dbc:	1c5a      	adds	r2, r3, #1
 8002dbe:	68fb      	ldr	r3, [r7, #12]
 8002dc0:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002dc2:	68fb      	ldr	r3, [r7, #12]
 8002dc4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002dc6:	3b01      	subs	r3, #1
 8002dc8:	b29a      	uxth	r2, r3
 8002dca:	68fb      	ldr	r3, [r7, #12]
 8002dcc:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002dce:	68fb      	ldr	r3, [r7, #12]
 8002dd0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002dd2:	b29b      	uxth	r3, r3
 8002dd4:	3b01      	subs	r3, #1
 8002dd6:	b29a      	uxth	r2, r3
 8002dd8:	68fb      	ldr	r3, [r7, #12]
 8002dda:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002ddc:	e042      	b.n	8002e64 <HAL_I2C_Master_Receive+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002dde:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002de0:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8002de2:	68f8      	ldr	r0, [r7, #12]
 8002de4:	f000 fc90 	bl	8003708 <I2C_WaitOnRXNEFlagUntilTimeout>
 8002de8:	4603      	mov	r3, r0
 8002dea:	2b00      	cmp	r3, #0
 8002dec:	d001      	beq.n	8002df2 <HAL_I2C_Master_Receive+0x3a6>
        {
          return HAL_ERROR;
 8002dee:	2301      	movs	r3, #1
 8002df0:	e04c      	b.n	8002e8c <HAL_I2C_Master_Receive+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002df2:	68fb      	ldr	r3, [r7, #12]
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	691a      	ldr	r2, [r3, #16]
 8002df8:	68fb      	ldr	r3, [r7, #12]
 8002dfa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002dfc:	b2d2      	uxtb	r2, r2
 8002dfe:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002e00:	68fb      	ldr	r3, [r7, #12]
 8002e02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e04:	1c5a      	adds	r2, r3, #1
 8002e06:	68fb      	ldr	r3, [r7, #12]
 8002e08:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8002e0a:	68fb      	ldr	r3, [r7, #12]
 8002e0c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002e0e:	3b01      	subs	r3, #1
 8002e10:	b29a      	uxth	r2, r3
 8002e12:	68fb      	ldr	r3, [r7, #12]
 8002e14:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8002e16:	68fb      	ldr	r3, [r7, #12]
 8002e18:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002e1a:	b29b      	uxth	r3, r3
 8002e1c:	3b01      	subs	r3, #1
 8002e1e:	b29a      	uxth	r2, r3
 8002e20:	68fb      	ldr	r3, [r7, #12]
 8002e22:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8002e24:	68fb      	ldr	r3, [r7, #12]
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	695b      	ldr	r3, [r3, #20]
 8002e2a:	f003 0304 	and.w	r3, r3, #4
 8002e2e:	2b04      	cmp	r3, #4
 8002e30:	d118      	bne.n	8002e64 <HAL_I2C_Master_Receive+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002e32:	68fb      	ldr	r3, [r7, #12]
 8002e34:	681b      	ldr	r3, [r3, #0]
 8002e36:	691a      	ldr	r2, [r3, #16]
 8002e38:	68fb      	ldr	r3, [r7, #12]
 8002e3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e3c:	b2d2      	uxtb	r2, r2
 8002e3e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002e40:	68fb      	ldr	r3, [r7, #12]
 8002e42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e44:	1c5a      	adds	r2, r3, #1
 8002e46:	68fb      	ldr	r3, [r7, #12]
 8002e48:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002e4a:	68fb      	ldr	r3, [r7, #12]
 8002e4c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002e4e:	3b01      	subs	r3, #1
 8002e50:	b29a      	uxth	r2, r3
 8002e52:	68fb      	ldr	r3, [r7, #12]
 8002e54:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002e56:	68fb      	ldr	r3, [r7, #12]
 8002e58:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002e5a:	b29b      	uxth	r3, r3
 8002e5c:	3b01      	subs	r3, #1
 8002e5e:	b29a      	uxth	r2, r3
 8002e60:	68fb      	ldr	r3, [r7, #12]
 8002e62:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8002e64:	68fb      	ldr	r3, [r7, #12]
 8002e66:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002e68:	2b00      	cmp	r3, #0
 8002e6a:	f47f aec2 	bne.w	8002bf2 <HAL_I2C_Master_Receive+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8002e6e:	68fb      	ldr	r3, [r7, #12]
 8002e70:	2220      	movs	r2, #32
 8002e72:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002e76:	68fb      	ldr	r3, [r7, #12]
 8002e78:	2200      	movs	r2, #0
 8002e7a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002e7e:	68fb      	ldr	r3, [r7, #12]
 8002e80:	2200      	movs	r2, #0
 8002e82:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8002e86:	2300      	movs	r3, #0
 8002e88:	e000      	b.n	8002e8c <HAL_I2C_Master_Receive+0x440>
  }
  else
  {
    return HAL_BUSY;
 8002e8a:	2302      	movs	r3, #2
  }
}
 8002e8c:	4618      	mov	r0, r3
 8002e8e:	3728      	adds	r7, #40	; 0x28
 8002e90:	46bd      	mov	sp, r7
 8002e92:	bd80      	pop	{r7, pc}
 8002e94:	00010004 	.word	0x00010004

08002e98 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002e98:	b580      	push	{r7, lr}
 8002e9a:	b088      	sub	sp, #32
 8002e9c:	af02      	add	r7, sp, #8
 8002e9e:	60f8      	str	r0, [r7, #12]
 8002ea0:	4608      	mov	r0, r1
 8002ea2:	4611      	mov	r1, r2
 8002ea4:	461a      	mov	r2, r3
 8002ea6:	4603      	mov	r3, r0
 8002ea8:	817b      	strh	r3, [r7, #10]
 8002eaa:	460b      	mov	r3, r1
 8002eac:	813b      	strh	r3, [r7, #8]
 8002eae:	4613      	mov	r3, r2
 8002eb0:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002eb2:	f7ff f8d5 	bl	8002060 <HAL_GetTick>
 8002eb6:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002eb8:	68fb      	ldr	r3, [r7, #12]
 8002eba:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002ebe:	b2db      	uxtb	r3, r3
 8002ec0:	2b20      	cmp	r3, #32
 8002ec2:	f040 80d9 	bne.w	8003078 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002ec6:	697b      	ldr	r3, [r7, #20]
 8002ec8:	9300      	str	r3, [sp, #0]
 8002eca:	2319      	movs	r3, #25
 8002ecc:	2201      	movs	r2, #1
 8002ece:	496d      	ldr	r1, [pc, #436]	; (8003084 <HAL_I2C_Mem_Write+0x1ec>)
 8002ed0:	68f8      	ldr	r0, [r7, #12]
 8002ed2:	f000 fac1 	bl	8003458 <I2C_WaitOnFlagUntilTimeout>
 8002ed6:	4603      	mov	r3, r0
 8002ed8:	2b00      	cmp	r3, #0
 8002eda:	d001      	beq.n	8002ee0 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8002edc:	2302      	movs	r3, #2
 8002ede:	e0cc      	b.n	800307a <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002ee0:	68fb      	ldr	r3, [r7, #12]
 8002ee2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002ee6:	2b01      	cmp	r3, #1
 8002ee8:	d101      	bne.n	8002eee <HAL_I2C_Mem_Write+0x56>
 8002eea:	2302      	movs	r3, #2
 8002eec:	e0c5      	b.n	800307a <HAL_I2C_Mem_Write+0x1e2>
 8002eee:	68fb      	ldr	r3, [r7, #12]
 8002ef0:	2201      	movs	r2, #1
 8002ef2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002ef6:	68fb      	ldr	r3, [r7, #12]
 8002ef8:	681b      	ldr	r3, [r3, #0]
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	f003 0301 	and.w	r3, r3, #1
 8002f00:	2b01      	cmp	r3, #1
 8002f02:	d007      	beq.n	8002f14 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002f04:	68fb      	ldr	r3, [r7, #12]
 8002f06:	681b      	ldr	r3, [r3, #0]
 8002f08:	681a      	ldr	r2, [r3, #0]
 8002f0a:	68fb      	ldr	r3, [r7, #12]
 8002f0c:	681b      	ldr	r3, [r3, #0]
 8002f0e:	f042 0201 	orr.w	r2, r2, #1
 8002f12:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002f14:	68fb      	ldr	r3, [r7, #12]
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	681a      	ldr	r2, [r3, #0]
 8002f1a:	68fb      	ldr	r3, [r7, #12]
 8002f1c:	681b      	ldr	r3, [r3, #0]
 8002f1e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002f22:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8002f24:	68fb      	ldr	r3, [r7, #12]
 8002f26:	2221      	movs	r2, #33	; 0x21
 8002f28:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002f2c:	68fb      	ldr	r3, [r7, #12]
 8002f2e:	2240      	movs	r2, #64	; 0x40
 8002f30:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002f34:	68fb      	ldr	r3, [r7, #12]
 8002f36:	2200      	movs	r2, #0
 8002f38:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002f3a:	68fb      	ldr	r3, [r7, #12]
 8002f3c:	6a3a      	ldr	r2, [r7, #32]
 8002f3e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8002f40:	68fb      	ldr	r3, [r7, #12]
 8002f42:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8002f44:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002f46:	68fb      	ldr	r3, [r7, #12]
 8002f48:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002f4a:	b29a      	uxth	r2, r3
 8002f4c:	68fb      	ldr	r3, [r7, #12]
 8002f4e:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002f50:	68fb      	ldr	r3, [r7, #12]
 8002f52:	4a4d      	ldr	r2, [pc, #308]	; (8003088 <HAL_I2C_Mem_Write+0x1f0>)
 8002f54:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002f56:	88f8      	ldrh	r0, [r7, #6]
 8002f58:	893a      	ldrh	r2, [r7, #8]
 8002f5a:	8979      	ldrh	r1, [r7, #10]
 8002f5c:	697b      	ldr	r3, [r7, #20]
 8002f5e:	9301      	str	r3, [sp, #4]
 8002f60:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002f62:	9300      	str	r3, [sp, #0]
 8002f64:	4603      	mov	r3, r0
 8002f66:	68f8      	ldr	r0, [r7, #12]
 8002f68:	f000 f9e0 	bl	800332c <I2C_RequestMemoryWrite>
 8002f6c:	4603      	mov	r3, r0
 8002f6e:	2b00      	cmp	r3, #0
 8002f70:	d052      	beq.n	8003018 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8002f72:	2301      	movs	r3, #1
 8002f74:	e081      	b.n	800307a <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002f76:	697a      	ldr	r2, [r7, #20]
 8002f78:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002f7a:	68f8      	ldr	r0, [r7, #12]
 8002f7c:	f000 fb42 	bl	8003604 <I2C_WaitOnTXEFlagUntilTimeout>
 8002f80:	4603      	mov	r3, r0
 8002f82:	2b00      	cmp	r3, #0
 8002f84:	d00d      	beq.n	8002fa2 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002f86:	68fb      	ldr	r3, [r7, #12]
 8002f88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f8a:	2b04      	cmp	r3, #4
 8002f8c:	d107      	bne.n	8002f9e <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002f8e:	68fb      	ldr	r3, [r7, #12]
 8002f90:	681b      	ldr	r3, [r3, #0]
 8002f92:	681a      	ldr	r2, [r3, #0]
 8002f94:	68fb      	ldr	r3, [r7, #12]
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002f9c:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002f9e:	2301      	movs	r3, #1
 8002fa0:	e06b      	b.n	800307a <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002fa2:	68fb      	ldr	r3, [r7, #12]
 8002fa4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fa6:	781a      	ldrb	r2, [r3, #0]
 8002fa8:	68fb      	ldr	r3, [r7, #12]
 8002faa:	681b      	ldr	r3, [r3, #0]
 8002fac:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002fae:	68fb      	ldr	r3, [r7, #12]
 8002fb0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fb2:	1c5a      	adds	r2, r3, #1
 8002fb4:	68fb      	ldr	r3, [r7, #12]
 8002fb6:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8002fb8:	68fb      	ldr	r3, [r7, #12]
 8002fba:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002fbc:	3b01      	subs	r3, #1
 8002fbe:	b29a      	uxth	r2, r3
 8002fc0:	68fb      	ldr	r3, [r7, #12]
 8002fc2:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8002fc4:	68fb      	ldr	r3, [r7, #12]
 8002fc6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002fc8:	b29b      	uxth	r3, r3
 8002fca:	3b01      	subs	r3, #1
 8002fcc:	b29a      	uxth	r2, r3
 8002fce:	68fb      	ldr	r3, [r7, #12]
 8002fd0:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8002fd2:	68fb      	ldr	r3, [r7, #12]
 8002fd4:	681b      	ldr	r3, [r3, #0]
 8002fd6:	695b      	ldr	r3, [r3, #20]
 8002fd8:	f003 0304 	and.w	r3, r3, #4
 8002fdc:	2b04      	cmp	r3, #4
 8002fde:	d11b      	bne.n	8003018 <HAL_I2C_Mem_Write+0x180>
 8002fe0:	68fb      	ldr	r3, [r7, #12]
 8002fe2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002fe4:	2b00      	cmp	r3, #0
 8002fe6:	d017      	beq.n	8003018 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002fe8:	68fb      	ldr	r3, [r7, #12]
 8002fea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fec:	781a      	ldrb	r2, [r3, #0]
 8002fee:	68fb      	ldr	r3, [r7, #12]
 8002ff0:	681b      	ldr	r3, [r3, #0]
 8002ff2:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002ff4:	68fb      	ldr	r3, [r7, #12]
 8002ff6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ff8:	1c5a      	adds	r2, r3, #1
 8002ffa:	68fb      	ldr	r3, [r7, #12]
 8002ffc:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8002ffe:	68fb      	ldr	r3, [r7, #12]
 8003000:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003002:	3b01      	subs	r3, #1
 8003004:	b29a      	uxth	r2, r3
 8003006:	68fb      	ldr	r3, [r7, #12]
 8003008:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 800300a:	68fb      	ldr	r3, [r7, #12]
 800300c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800300e:	b29b      	uxth	r3, r3
 8003010:	3b01      	subs	r3, #1
 8003012:	b29a      	uxth	r2, r3
 8003014:	68fb      	ldr	r3, [r7, #12]
 8003016:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8003018:	68fb      	ldr	r3, [r7, #12]
 800301a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800301c:	2b00      	cmp	r3, #0
 800301e:	d1aa      	bne.n	8002f76 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003020:	697a      	ldr	r2, [r7, #20]
 8003022:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003024:	68f8      	ldr	r0, [r7, #12]
 8003026:	f000 fb2e 	bl	8003686 <I2C_WaitOnBTFFlagUntilTimeout>
 800302a:	4603      	mov	r3, r0
 800302c:	2b00      	cmp	r3, #0
 800302e:	d00d      	beq.n	800304c <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003030:	68fb      	ldr	r3, [r7, #12]
 8003032:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003034:	2b04      	cmp	r3, #4
 8003036:	d107      	bne.n	8003048 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003038:	68fb      	ldr	r3, [r7, #12]
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	681a      	ldr	r2, [r3, #0]
 800303e:	68fb      	ldr	r3, [r7, #12]
 8003040:	681b      	ldr	r3, [r3, #0]
 8003042:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003046:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8003048:	2301      	movs	r3, #1
 800304a:	e016      	b.n	800307a <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800304c:	68fb      	ldr	r3, [r7, #12]
 800304e:	681b      	ldr	r3, [r3, #0]
 8003050:	681a      	ldr	r2, [r3, #0]
 8003052:	68fb      	ldr	r3, [r7, #12]
 8003054:	681b      	ldr	r3, [r3, #0]
 8003056:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800305a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800305c:	68fb      	ldr	r3, [r7, #12]
 800305e:	2220      	movs	r2, #32
 8003060:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003064:	68fb      	ldr	r3, [r7, #12]
 8003066:	2200      	movs	r2, #0
 8003068:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800306c:	68fb      	ldr	r3, [r7, #12]
 800306e:	2200      	movs	r2, #0
 8003070:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8003074:	2300      	movs	r3, #0
 8003076:	e000      	b.n	800307a <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8003078:	2302      	movs	r3, #2
  }
}
 800307a:	4618      	mov	r0, r3
 800307c:	3718      	adds	r7, #24
 800307e:	46bd      	mov	sp, r7
 8003080:	bd80      	pop	{r7, pc}
 8003082:	bf00      	nop
 8003084:	00100002 	.word	0x00100002
 8003088:	ffff0000 	.word	0xffff0000

0800308c <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 800308c:	b580      	push	{r7, lr}
 800308e:	b088      	sub	sp, #32
 8003090:	af02      	add	r7, sp, #8
 8003092:	60f8      	str	r0, [r7, #12]
 8003094:	607a      	str	r2, [r7, #4]
 8003096:	603b      	str	r3, [r7, #0]
 8003098:	460b      	mov	r3, r1
 800309a:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 800309c:	68fb      	ldr	r3, [r7, #12]
 800309e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80030a0:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80030a2:	697b      	ldr	r3, [r7, #20]
 80030a4:	2b08      	cmp	r3, #8
 80030a6:	d006      	beq.n	80030b6 <I2C_MasterRequestWrite+0x2a>
 80030a8:	697b      	ldr	r3, [r7, #20]
 80030aa:	2b01      	cmp	r3, #1
 80030ac:	d003      	beq.n	80030b6 <I2C_MasterRequestWrite+0x2a>
 80030ae:	697b      	ldr	r3, [r7, #20]
 80030b0:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80030b4:	d108      	bne.n	80030c8 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80030b6:	68fb      	ldr	r3, [r7, #12]
 80030b8:	681b      	ldr	r3, [r3, #0]
 80030ba:	681a      	ldr	r2, [r3, #0]
 80030bc:	68fb      	ldr	r3, [r7, #12]
 80030be:	681b      	ldr	r3, [r3, #0]
 80030c0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80030c4:	601a      	str	r2, [r3, #0]
 80030c6:	e00b      	b.n	80030e0 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 80030c8:	68fb      	ldr	r3, [r7, #12]
 80030ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030cc:	2b12      	cmp	r3, #18
 80030ce:	d107      	bne.n	80030e0 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80030d0:	68fb      	ldr	r3, [r7, #12]
 80030d2:	681b      	ldr	r3, [r3, #0]
 80030d4:	681a      	ldr	r2, [r3, #0]
 80030d6:	68fb      	ldr	r3, [r7, #12]
 80030d8:	681b      	ldr	r3, [r3, #0]
 80030da:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80030de:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80030e0:	683b      	ldr	r3, [r7, #0]
 80030e2:	9300      	str	r3, [sp, #0]
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	2200      	movs	r2, #0
 80030e8:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80030ec:	68f8      	ldr	r0, [r7, #12]
 80030ee:	f000 f9b3 	bl	8003458 <I2C_WaitOnFlagUntilTimeout>
 80030f2:	4603      	mov	r3, r0
 80030f4:	2b00      	cmp	r3, #0
 80030f6:	d00d      	beq.n	8003114 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80030f8:	68fb      	ldr	r3, [r7, #12]
 80030fa:	681b      	ldr	r3, [r3, #0]
 80030fc:	681b      	ldr	r3, [r3, #0]
 80030fe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003102:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003106:	d103      	bne.n	8003110 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003108:	68fb      	ldr	r3, [r7, #12]
 800310a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800310e:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8003110:	2303      	movs	r3, #3
 8003112:	e035      	b.n	8003180 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003114:	68fb      	ldr	r3, [r7, #12]
 8003116:	691b      	ldr	r3, [r3, #16]
 8003118:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800311c:	d108      	bne.n	8003130 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800311e:	897b      	ldrh	r3, [r7, #10]
 8003120:	b2db      	uxtb	r3, r3
 8003122:	461a      	mov	r2, r3
 8003124:	68fb      	ldr	r3, [r7, #12]
 8003126:	681b      	ldr	r3, [r3, #0]
 8003128:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800312c:	611a      	str	r2, [r3, #16]
 800312e:	e01b      	b.n	8003168 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8003130:	897b      	ldrh	r3, [r7, #10]
 8003132:	11db      	asrs	r3, r3, #7
 8003134:	b2db      	uxtb	r3, r3
 8003136:	f003 0306 	and.w	r3, r3, #6
 800313a:	b2db      	uxtb	r3, r3
 800313c:	f063 030f 	orn	r3, r3, #15
 8003140:	b2da      	uxtb	r2, r3
 8003142:	68fb      	ldr	r3, [r7, #12]
 8003144:	681b      	ldr	r3, [r3, #0]
 8003146:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8003148:	683b      	ldr	r3, [r7, #0]
 800314a:	687a      	ldr	r2, [r7, #4]
 800314c:	490e      	ldr	r1, [pc, #56]	; (8003188 <I2C_MasterRequestWrite+0xfc>)
 800314e:	68f8      	ldr	r0, [r7, #12]
 8003150:	f000 f9d9 	bl	8003506 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003154:	4603      	mov	r3, r0
 8003156:	2b00      	cmp	r3, #0
 8003158:	d001      	beq.n	800315e <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 800315a:	2301      	movs	r3, #1
 800315c:	e010      	b.n	8003180 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 800315e:	897b      	ldrh	r3, [r7, #10]
 8003160:	b2da      	uxtb	r2, r3
 8003162:	68fb      	ldr	r3, [r7, #12]
 8003164:	681b      	ldr	r3, [r3, #0]
 8003166:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003168:	683b      	ldr	r3, [r7, #0]
 800316a:	687a      	ldr	r2, [r7, #4]
 800316c:	4907      	ldr	r1, [pc, #28]	; (800318c <I2C_MasterRequestWrite+0x100>)
 800316e:	68f8      	ldr	r0, [r7, #12]
 8003170:	f000 f9c9 	bl	8003506 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003174:	4603      	mov	r3, r0
 8003176:	2b00      	cmp	r3, #0
 8003178:	d001      	beq.n	800317e <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 800317a:	2301      	movs	r3, #1
 800317c:	e000      	b.n	8003180 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 800317e:	2300      	movs	r3, #0
}
 8003180:	4618      	mov	r0, r3
 8003182:	3718      	adds	r7, #24
 8003184:	46bd      	mov	sp, r7
 8003186:	bd80      	pop	{r7, pc}
 8003188:	00010008 	.word	0x00010008
 800318c:	00010002 	.word	0x00010002

08003190 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8003190:	b580      	push	{r7, lr}
 8003192:	b088      	sub	sp, #32
 8003194:	af02      	add	r7, sp, #8
 8003196:	60f8      	str	r0, [r7, #12]
 8003198:	607a      	str	r2, [r7, #4]
 800319a:	603b      	str	r3, [r7, #0]
 800319c:	460b      	mov	r3, r1
 800319e:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80031a0:	68fb      	ldr	r3, [r7, #12]
 80031a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80031a4:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80031a6:	68fb      	ldr	r3, [r7, #12]
 80031a8:	681b      	ldr	r3, [r3, #0]
 80031aa:	681a      	ldr	r2, [r3, #0]
 80031ac:	68fb      	ldr	r3, [r7, #12]
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80031b4:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80031b6:	697b      	ldr	r3, [r7, #20]
 80031b8:	2b08      	cmp	r3, #8
 80031ba:	d006      	beq.n	80031ca <I2C_MasterRequestRead+0x3a>
 80031bc:	697b      	ldr	r3, [r7, #20]
 80031be:	2b01      	cmp	r3, #1
 80031c0:	d003      	beq.n	80031ca <I2C_MasterRequestRead+0x3a>
 80031c2:	697b      	ldr	r3, [r7, #20]
 80031c4:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80031c8:	d108      	bne.n	80031dc <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80031ca:	68fb      	ldr	r3, [r7, #12]
 80031cc:	681b      	ldr	r3, [r3, #0]
 80031ce:	681a      	ldr	r2, [r3, #0]
 80031d0:	68fb      	ldr	r3, [r7, #12]
 80031d2:	681b      	ldr	r3, [r3, #0]
 80031d4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80031d8:	601a      	str	r2, [r3, #0]
 80031da:	e00b      	b.n	80031f4 <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 80031dc:	68fb      	ldr	r3, [r7, #12]
 80031de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031e0:	2b11      	cmp	r3, #17
 80031e2:	d107      	bne.n	80031f4 <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80031e4:	68fb      	ldr	r3, [r7, #12]
 80031e6:	681b      	ldr	r3, [r3, #0]
 80031e8:	681a      	ldr	r2, [r3, #0]
 80031ea:	68fb      	ldr	r3, [r7, #12]
 80031ec:	681b      	ldr	r3, [r3, #0]
 80031ee:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80031f2:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80031f4:	683b      	ldr	r3, [r7, #0]
 80031f6:	9300      	str	r3, [sp, #0]
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	2200      	movs	r2, #0
 80031fc:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003200:	68f8      	ldr	r0, [r7, #12]
 8003202:	f000 f929 	bl	8003458 <I2C_WaitOnFlagUntilTimeout>
 8003206:	4603      	mov	r3, r0
 8003208:	2b00      	cmp	r3, #0
 800320a:	d00d      	beq.n	8003228 <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800320c:	68fb      	ldr	r3, [r7, #12]
 800320e:	681b      	ldr	r3, [r3, #0]
 8003210:	681b      	ldr	r3, [r3, #0]
 8003212:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003216:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800321a:	d103      	bne.n	8003224 <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800321c:	68fb      	ldr	r3, [r7, #12]
 800321e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003222:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8003224:	2303      	movs	r3, #3
 8003226:	e079      	b.n	800331c <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003228:	68fb      	ldr	r3, [r7, #12]
 800322a:	691b      	ldr	r3, [r3, #16]
 800322c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003230:	d108      	bne.n	8003244 <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8003232:	897b      	ldrh	r3, [r7, #10]
 8003234:	b2db      	uxtb	r3, r3
 8003236:	f043 0301 	orr.w	r3, r3, #1
 800323a:	b2da      	uxtb	r2, r3
 800323c:	68fb      	ldr	r3, [r7, #12]
 800323e:	681b      	ldr	r3, [r3, #0]
 8003240:	611a      	str	r2, [r3, #16]
 8003242:	e05f      	b.n	8003304 <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8003244:	897b      	ldrh	r3, [r7, #10]
 8003246:	11db      	asrs	r3, r3, #7
 8003248:	b2db      	uxtb	r3, r3
 800324a:	f003 0306 	and.w	r3, r3, #6
 800324e:	b2db      	uxtb	r3, r3
 8003250:	f063 030f 	orn	r3, r3, #15
 8003254:	b2da      	uxtb	r2, r3
 8003256:	68fb      	ldr	r3, [r7, #12]
 8003258:	681b      	ldr	r3, [r3, #0]
 800325a:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 800325c:	683b      	ldr	r3, [r7, #0]
 800325e:	687a      	ldr	r2, [r7, #4]
 8003260:	4930      	ldr	r1, [pc, #192]	; (8003324 <I2C_MasterRequestRead+0x194>)
 8003262:	68f8      	ldr	r0, [r7, #12]
 8003264:	f000 f94f 	bl	8003506 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003268:	4603      	mov	r3, r0
 800326a:	2b00      	cmp	r3, #0
 800326c:	d001      	beq.n	8003272 <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 800326e:	2301      	movs	r3, #1
 8003270:	e054      	b.n	800331c <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8003272:	897b      	ldrh	r3, [r7, #10]
 8003274:	b2da      	uxtb	r2, r3
 8003276:	68fb      	ldr	r3, [r7, #12]
 8003278:	681b      	ldr	r3, [r3, #0]
 800327a:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800327c:	683b      	ldr	r3, [r7, #0]
 800327e:	687a      	ldr	r2, [r7, #4]
 8003280:	4929      	ldr	r1, [pc, #164]	; (8003328 <I2C_MasterRequestRead+0x198>)
 8003282:	68f8      	ldr	r0, [r7, #12]
 8003284:	f000 f93f 	bl	8003506 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003288:	4603      	mov	r3, r0
 800328a:	2b00      	cmp	r3, #0
 800328c:	d001      	beq.n	8003292 <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 800328e:	2301      	movs	r3, #1
 8003290:	e044      	b.n	800331c <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003292:	2300      	movs	r3, #0
 8003294:	613b      	str	r3, [r7, #16]
 8003296:	68fb      	ldr	r3, [r7, #12]
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	695b      	ldr	r3, [r3, #20]
 800329c:	613b      	str	r3, [r7, #16]
 800329e:	68fb      	ldr	r3, [r7, #12]
 80032a0:	681b      	ldr	r3, [r3, #0]
 80032a2:	699b      	ldr	r3, [r3, #24]
 80032a4:	613b      	str	r3, [r7, #16]
 80032a6:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80032a8:	68fb      	ldr	r3, [r7, #12]
 80032aa:	681b      	ldr	r3, [r3, #0]
 80032ac:	681a      	ldr	r2, [r3, #0]
 80032ae:	68fb      	ldr	r3, [r7, #12]
 80032b0:	681b      	ldr	r3, [r3, #0]
 80032b2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80032b6:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80032b8:	683b      	ldr	r3, [r7, #0]
 80032ba:	9300      	str	r3, [sp, #0]
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	2200      	movs	r2, #0
 80032c0:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80032c4:	68f8      	ldr	r0, [r7, #12]
 80032c6:	f000 f8c7 	bl	8003458 <I2C_WaitOnFlagUntilTimeout>
 80032ca:	4603      	mov	r3, r0
 80032cc:	2b00      	cmp	r3, #0
 80032ce:	d00d      	beq.n	80032ec <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80032d0:	68fb      	ldr	r3, [r7, #12]
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	681b      	ldr	r3, [r3, #0]
 80032d6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80032da:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80032de:	d103      	bne.n	80032e8 <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80032e0:	68fb      	ldr	r3, [r7, #12]
 80032e2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80032e6:	641a      	str	r2, [r3, #64]	; 0x40
      }
      return HAL_TIMEOUT;
 80032e8:	2303      	movs	r3, #3
 80032ea:	e017      	b.n	800331c <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 80032ec:	897b      	ldrh	r3, [r7, #10]
 80032ee:	11db      	asrs	r3, r3, #7
 80032f0:	b2db      	uxtb	r3, r3
 80032f2:	f003 0306 	and.w	r3, r3, #6
 80032f6:	b2db      	uxtb	r3, r3
 80032f8:	f063 030e 	orn	r3, r3, #14
 80032fc:	b2da      	uxtb	r2, r3
 80032fe:	68fb      	ldr	r3, [r7, #12]
 8003300:	681b      	ldr	r3, [r3, #0]
 8003302:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003304:	683b      	ldr	r3, [r7, #0]
 8003306:	687a      	ldr	r2, [r7, #4]
 8003308:	4907      	ldr	r1, [pc, #28]	; (8003328 <I2C_MasterRequestRead+0x198>)
 800330a:	68f8      	ldr	r0, [r7, #12]
 800330c:	f000 f8fb 	bl	8003506 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003310:	4603      	mov	r3, r0
 8003312:	2b00      	cmp	r3, #0
 8003314:	d001      	beq.n	800331a <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 8003316:	2301      	movs	r3, #1
 8003318:	e000      	b.n	800331c <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 800331a:	2300      	movs	r3, #0
}
 800331c:	4618      	mov	r0, r3
 800331e:	3718      	adds	r7, #24
 8003320:	46bd      	mov	sp, r7
 8003322:	bd80      	pop	{r7, pc}
 8003324:	00010008 	.word	0x00010008
 8003328:	00010002 	.word	0x00010002

0800332c <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 800332c:	b580      	push	{r7, lr}
 800332e:	b088      	sub	sp, #32
 8003330:	af02      	add	r7, sp, #8
 8003332:	60f8      	str	r0, [r7, #12]
 8003334:	4608      	mov	r0, r1
 8003336:	4611      	mov	r1, r2
 8003338:	461a      	mov	r2, r3
 800333a:	4603      	mov	r3, r0
 800333c:	817b      	strh	r3, [r7, #10]
 800333e:	460b      	mov	r3, r1
 8003340:	813b      	strh	r3, [r7, #8]
 8003342:	4613      	mov	r3, r2
 8003344:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003346:	68fb      	ldr	r3, [r7, #12]
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	681a      	ldr	r2, [r3, #0]
 800334c:	68fb      	ldr	r3, [r7, #12]
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003354:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003356:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003358:	9300      	str	r3, [sp, #0]
 800335a:	6a3b      	ldr	r3, [r7, #32]
 800335c:	2200      	movs	r2, #0
 800335e:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003362:	68f8      	ldr	r0, [r7, #12]
 8003364:	f000 f878 	bl	8003458 <I2C_WaitOnFlagUntilTimeout>
 8003368:	4603      	mov	r3, r0
 800336a:	2b00      	cmp	r3, #0
 800336c:	d00d      	beq.n	800338a <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800336e:	68fb      	ldr	r3, [r7, #12]
 8003370:	681b      	ldr	r3, [r3, #0]
 8003372:	681b      	ldr	r3, [r3, #0]
 8003374:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003378:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800337c:	d103      	bne.n	8003386 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800337e:	68fb      	ldr	r3, [r7, #12]
 8003380:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003384:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8003386:	2303      	movs	r3, #3
 8003388:	e05f      	b.n	800344a <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800338a:	897b      	ldrh	r3, [r7, #10]
 800338c:	b2db      	uxtb	r3, r3
 800338e:	461a      	mov	r2, r3
 8003390:	68fb      	ldr	r3, [r7, #12]
 8003392:	681b      	ldr	r3, [r3, #0]
 8003394:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8003398:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800339a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800339c:	6a3a      	ldr	r2, [r7, #32]
 800339e:	492d      	ldr	r1, [pc, #180]	; (8003454 <I2C_RequestMemoryWrite+0x128>)
 80033a0:	68f8      	ldr	r0, [r7, #12]
 80033a2:	f000 f8b0 	bl	8003506 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80033a6:	4603      	mov	r3, r0
 80033a8:	2b00      	cmp	r3, #0
 80033aa:	d001      	beq.n	80033b0 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 80033ac:	2301      	movs	r3, #1
 80033ae:	e04c      	b.n	800344a <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80033b0:	2300      	movs	r3, #0
 80033b2:	617b      	str	r3, [r7, #20]
 80033b4:	68fb      	ldr	r3, [r7, #12]
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	695b      	ldr	r3, [r3, #20]
 80033ba:	617b      	str	r3, [r7, #20]
 80033bc:	68fb      	ldr	r3, [r7, #12]
 80033be:	681b      	ldr	r3, [r3, #0]
 80033c0:	699b      	ldr	r3, [r3, #24]
 80033c2:	617b      	str	r3, [r7, #20]
 80033c4:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80033c6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80033c8:	6a39      	ldr	r1, [r7, #32]
 80033ca:	68f8      	ldr	r0, [r7, #12]
 80033cc:	f000 f91a 	bl	8003604 <I2C_WaitOnTXEFlagUntilTimeout>
 80033d0:	4603      	mov	r3, r0
 80033d2:	2b00      	cmp	r3, #0
 80033d4:	d00d      	beq.n	80033f2 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80033d6:	68fb      	ldr	r3, [r7, #12]
 80033d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033da:	2b04      	cmp	r3, #4
 80033dc:	d107      	bne.n	80033ee <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80033de:	68fb      	ldr	r3, [r7, #12]
 80033e0:	681b      	ldr	r3, [r3, #0]
 80033e2:	681a      	ldr	r2, [r3, #0]
 80033e4:	68fb      	ldr	r3, [r7, #12]
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80033ec:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80033ee:	2301      	movs	r3, #1
 80033f0:	e02b      	b.n	800344a <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80033f2:	88fb      	ldrh	r3, [r7, #6]
 80033f4:	2b01      	cmp	r3, #1
 80033f6:	d105      	bne.n	8003404 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80033f8:	893b      	ldrh	r3, [r7, #8]
 80033fa:	b2da      	uxtb	r2, r3
 80033fc:	68fb      	ldr	r3, [r7, #12]
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	611a      	str	r2, [r3, #16]
 8003402:	e021      	b.n	8003448 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8003404:	893b      	ldrh	r3, [r7, #8]
 8003406:	0a1b      	lsrs	r3, r3, #8
 8003408:	b29b      	uxth	r3, r3
 800340a:	b2da      	uxtb	r2, r3
 800340c:	68fb      	ldr	r3, [r7, #12]
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003412:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003414:	6a39      	ldr	r1, [r7, #32]
 8003416:	68f8      	ldr	r0, [r7, #12]
 8003418:	f000 f8f4 	bl	8003604 <I2C_WaitOnTXEFlagUntilTimeout>
 800341c:	4603      	mov	r3, r0
 800341e:	2b00      	cmp	r3, #0
 8003420:	d00d      	beq.n	800343e <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003422:	68fb      	ldr	r3, [r7, #12]
 8003424:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003426:	2b04      	cmp	r3, #4
 8003428:	d107      	bne.n	800343a <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800342a:	68fb      	ldr	r3, [r7, #12]
 800342c:	681b      	ldr	r3, [r3, #0]
 800342e:	681a      	ldr	r2, [r3, #0]
 8003430:	68fb      	ldr	r3, [r7, #12]
 8003432:	681b      	ldr	r3, [r3, #0]
 8003434:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003438:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800343a:	2301      	movs	r3, #1
 800343c:	e005      	b.n	800344a <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800343e:	893b      	ldrh	r3, [r7, #8]
 8003440:	b2da      	uxtb	r2, r3
 8003442:	68fb      	ldr	r3, [r7, #12]
 8003444:	681b      	ldr	r3, [r3, #0]
 8003446:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8003448:	2300      	movs	r3, #0
}
 800344a:	4618      	mov	r0, r3
 800344c:	3718      	adds	r7, #24
 800344e:	46bd      	mov	sp, r7
 8003450:	bd80      	pop	{r7, pc}
 8003452:	bf00      	nop
 8003454:	00010002 	.word	0x00010002

08003458 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8003458:	b580      	push	{r7, lr}
 800345a:	b084      	sub	sp, #16
 800345c:	af00      	add	r7, sp, #0
 800345e:	60f8      	str	r0, [r7, #12]
 8003460:	60b9      	str	r1, [r7, #8]
 8003462:	603b      	str	r3, [r7, #0]
 8003464:	4613      	mov	r3, r2
 8003466:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003468:	e025      	b.n	80034b6 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800346a:	683b      	ldr	r3, [r7, #0]
 800346c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003470:	d021      	beq.n	80034b6 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003472:	f7fe fdf5 	bl	8002060 <HAL_GetTick>
 8003476:	4602      	mov	r2, r0
 8003478:	69bb      	ldr	r3, [r7, #24]
 800347a:	1ad3      	subs	r3, r2, r3
 800347c:	683a      	ldr	r2, [r7, #0]
 800347e:	429a      	cmp	r2, r3
 8003480:	d302      	bcc.n	8003488 <I2C_WaitOnFlagUntilTimeout+0x30>
 8003482:	683b      	ldr	r3, [r7, #0]
 8003484:	2b00      	cmp	r3, #0
 8003486:	d116      	bne.n	80034b6 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8003488:	68fb      	ldr	r3, [r7, #12]
 800348a:	2200      	movs	r2, #0
 800348c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 800348e:	68fb      	ldr	r3, [r7, #12]
 8003490:	2220      	movs	r2, #32
 8003492:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8003496:	68fb      	ldr	r3, [r7, #12]
 8003498:	2200      	movs	r2, #0
 800349a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800349e:	68fb      	ldr	r3, [r7, #12]
 80034a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034a2:	f043 0220 	orr.w	r2, r3, #32
 80034a6:	68fb      	ldr	r3, [r7, #12]
 80034a8:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80034aa:	68fb      	ldr	r3, [r7, #12]
 80034ac:	2200      	movs	r2, #0
 80034ae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80034b2:	2301      	movs	r3, #1
 80034b4:	e023      	b.n	80034fe <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80034b6:	68bb      	ldr	r3, [r7, #8]
 80034b8:	0c1b      	lsrs	r3, r3, #16
 80034ba:	b2db      	uxtb	r3, r3
 80034bc:	2b01      	cmp	r3, #1
 80034be:	d10d      	bne.n	80034dc <I2C_WaitOnFlagUntilTimeout+0x84>
 80034c0:	68fb      	ldr	r3, [r7, #12]
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	695b      	ldr	r3, [r3, #20]
 80034c6:	43da      	mvns	r2, r3
 80034c8:	68bb      	ldr	r3, [r7, #8]
 80034ca:	4013      	ands	r3, r2
 80034cc:	b29b      	uxth	r3, r3
 80034ce:	2b00      	cmp	r3, #0
 80034d0:	bf0c      	ite	eq
 80034d2:	2301      	moveq	r3, #1
 80034d4:	2300      	movne	r3, #0
 80034d6:	b2db      	uxtb	r3, r3
 80034d8:	461a      	mov	r2, r3
 80034da:	e00c      	b.n	80034f6 <I2C_WaitOnFlagUntilTimeout+0x9e>
 80034dc:	68fb      	ldr	r3, [r7, #12]
 80034de:	681b      	ldr	r3, [r3, #0]
 80034e0:	699b      	ldr	r3, [r3, #24]
 80034e2:	43da      	mvns	r2, r3
 80034e4:	68bb      	ldr	r3, [r7, #8]
 80034e6:	4013      	ands	r3, r2
 80034e8:	b29b      	uxth	r3, r3
 80034ea:	2b00      	cmp	r3, #0
 80034ec:	bf0c      	ite	eq
 80034ee:	2301      	moveq	r3, #1
 80034f0:	2300      	movne	r3, #0
 80034f2:	b2db      	uxtb	r3, r3
 80034f4:	461a      	mov	r2, r3
 80034f6:	79fb      	ldrb	r3, [r7, #7]
 80034f8:	429a      	cmp	r2, r3
 80034fa:	d0b6      	beq.n	800346a <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80034fc:	2300      	movs	r3, #0
}
 80034fe:	4618      	mov	r0, r3
 8003500:	3710      	adds	r7, #16
 8003502:	46bd      	mov	sp, r7
 8003504:	bd80      	pop	{r7, pc}

08003506 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8003506:	b580      	push	{r7, lr}
 8003508:	b084      	sub	sp, #16
 800350a:	af00      	add	r7, sp, #0
 800350c:	60f8      	str	r0, [r7, #12]
 800350e:	60b9      	str	r1, [r7, #8]
 8003510:	607a      	str	r2, [r7, #4]
 8003512:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003514:	e051      	b.n	80035ba <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003516:	68fb      	ldr	r3, [r7, #12]
 8003518:	681b      	ldr	r3, [r3, #0]
 800351a:	695b      	ldr	r3, [r3, #20]
 800351c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003520:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003524:	d123      	bne.n	800356e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003526:	68fb      	ldr	r3, [r7, #12]
 8003528:	681b      	ldr	r3, [r3, #0]
 800352a:	681a      	ldr	r2, [r3, #0]
 800352c:	68fb      	ldr	r3, [r7, #12]
 800352e:	681b      	ldr	r3, [r3, #0]
 8003530:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003534:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003536:	68fb      	ldr	r3, [r7, #12]
 8003538:	681b      	ldr	r3, [r3, #0]
 800353a:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800353e:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8003540:	68fb      	ldr	r3, [r7, #12]
 8003542:	2200      	movs	r2, #0
 8003544:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003546:	68fb      	ldr	r3, [r7, #12]
 8003548:	2220      	movs	r2, #32
 800354a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800354e:	68fb      	ldr	r3, [r7, #12]
 8003550:	2200      	movs	r2, #0
 8003552:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003556:	68fb      	ldr	r3, [r7, #12]
 8003558:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800355a:	f043 0204 	orr.w	r2, r3, #4
 800355e:	68fb      	ldr	r3, [r7, #12]
 8003560:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003562:	68fb      	ldr	r3, [r7, #12]
 8003564:	2200      	movs	r2, #0
 8003566:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800356a:	2301      	movs	r3, #1
 800356c:	e046      	b.n	80035fc <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003574:	d021      	beq.n	80035ba <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003576:	f7fe fd73 	bl	8002060 <HAL_GetTick>
 800357a:	4602      	mov	r2, r0
 800357c:	683b      	ldr	r3, [r7, #0]
 800357e:	1ad3      	subs	r3, r2, r3
 8003580:	687a      	ldr	r2, [r7, #4]
 8003582:	429a      	cmp	r2, r3
 8003584:	d302      	bcc.n	800358c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	2b00      	cmp	r3, #0
 800358a:	d116      	bne.n	80035ba <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800358c:	68fb      	ldr	r3, [r7, #12]
 800358e:	2200      	movs	r2, #0
 8003590:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003592:	68fb      	ldr	r3, [r7, #12]
 8003594:	2220      	movs	r2, #32
 8003596:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800359a:	68fb      	ldr	r3, [r7, #12]
 800359c:	2200      	movs	r2, #0
 800359e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80035a2:	68fb      	ldr	r3, [r7, #12]
 80035a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035a6:	f043 0220 	orr.w	r2, r3, #32
 80035aa:	68fb      	ldr	r3, [r7, #12]
 80035ac:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80035ae:	68fb      	ldr	r3, [r7, #12]
 80035b0:	2200      	movs	r2, #0
 80035b2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80035b6:	2301      	movs	r3, #1
 80035b8:	e020      	b.n	80035fc <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80035ba:	68bb      	ldr	r3, [r7, #8]
 80035bc:	0c1b      	lsrs	r3, r3, #16
 80035be:	b2db      	uxtb	r3, r3
 80035c0:	2b01      	cmp	r3, #1
 80035c2:	d10c      	bne.n	80035de <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 80035c4:	68fb      	ldr	r3, [r7, #12]
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	695b      	ldr	r3, [r3, #20]
 80035ca:	43da      	mvns	r2, r3
 80035cc:	68bb      	ldr	r3, [r7, #8]
 80035ce:	4013      	ands	r3, r2
 80035d0:	b29b      	uxth	r3, r3
 80035d2:	2b00      	cmp	r3, #0
 80035d4:	bf14      	ite	ne
 80035d6:	2301      	movne	r3, #1
 80035d8:	2300      	moveq	r3, #0
 80035da:	b2db      	uxtb	r3, r3
 80035dc:	e00b      	b.n	80035f6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 80035de:	68fb      	ldr	r3, [r7, #12]
 80035e0:	681b      	ldr	r3, [r3, #0]
 80035e2:	699b      	ldr	r3, [r3, #24]
 80035e4:	43da      	mvns	r2, r3
 80035e6:	68bb      	ldr	r3, [r7, #8]
 80035e8:	4013      	ands	r3, r2
 80035ea:	b29b      	uxth	r3, r3
 80035ec:	2b00      	cmp	r3, #0
 80035ee:	bf14      	ite	ne
 80035f0:	2301      	movne	r3, #1
 80035f2:	2300      	moveq	r3, #0
 80035f4:	b2db      	uxtb	r3, r3
 80035f6:	2b00      	cmp	r3, #0
 80035f8:	d18d      	bne.n	8003516 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 80035fa:	2300      	movs	r3, #0
}
 80035fc:	4618      	mov	r0, r3
 80035fe:	3710      	adds	r7, #16
 8003600:	46bd      	mov	sp, r7
 8003602:	bd80      	pop	{r7, pc}

08003604 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003604:	b580      	push	{r7, lr}
 8003606:	b084      	sub	sp, #16
 8003608:	af00      	add	r7, sp, #0
 800360a:	60f8      	str	r0, [r7, #12]
 800360c:	60b9      	str	r1, [r7, #8]
 800360e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003610:	e02d      	b.n	800366e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003612:	68f8      	ldr	r0, [r7, #12]
 8003614:	f000 f8ce 	bl	80037b4 <I2C_IsAcknowledgeFailed>
 8003618:	4603      	mov	r3, r0
 800361a:	2b00      	cmp	r3, #0
 800361c:	d001      	beq.n	8003622 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800361e:	2301      	movs	r3, #1
 8003620:	e02d      	b.n	800367e <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003622:	68bb      	ldr	r3, [r7, #8]
 8003624:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003628:	d021      	beq.n	800366e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800362a:	f7fe fd19 	bl	8002060 <HAL_GetTick>
 800362e:	4602      	mov	r2, r0
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	1ad3      	subs	r3, r2, r3
 8003634:	68ba      	ldr	r2, [r7, #8]
 8003636:	429a      	cmp	r2, r3
 8003638:	d302      	bcc.n	8003640 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800363a:	68bb      	ldr	r3, [r7, #8]
 800363c:	2b00      	cmp	r3, #0
 800363e:	d116      	bne.n	800366e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003640:	68fb      	ldr	r3, [r7, #12]
 8003642:	2200      	movs	r2, #0
 8003644:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003646:	68fb      	ldr	r3, [r7, #12]
 8003648:	2220      	movs	r2, #32
 800364a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800364e:	68fb      	ldr	r3, [r7, #12]
 8003650:	2200      	movs	r2, #0
 8003652:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003656:	68fb      	ldr	r3, [r7, #12]
 8003658:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800365a:	f043 0220 	orr.w	r2, r3, #32
 800365e:	68fb      	ldr	r3, [r7, #12]
 8003660:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003662:	68fb      	ldr	r3, [r7, #12]
 8003664:	2200      	movs	r2, #0
 8003666:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800366a:	2301      	movs	r3, #1
 800366c:	e007      	b.n	800367e <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800366e:	68fb      	ldr	r3, [r7, #12]
 8003670:	681b      	ldr	r3, [r3, #0]
 8003672:	695b      	ldr	r3, [r3, #20]
 8003674:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003678:	2b80      	cmp	r3, #128	; 0x80
 800367a:	d1ca      	bne.n	8003612 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800367c:	2300      	movs	r3, #0
}
 800367e:	4618      	mov	r0, r3
 8003680:	3710      	adds	r7, #16
 8003682:	46bd      	mov	sp, r7
 8003684:	bd80      	pop	{r7, pc}

08003686 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003686:	b580      	push	{r7, lr}
 8003688:	b084      	sub	sp, #16
 800368a:	af00      	add	r7, sp, #0
 800368c:	60f8      	str	r0, [r7, #12]
 800368e:	60b9      	str	r1, [r7, #8]
 8003690:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003692:	e02d      	b.n	80036f0 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003694:	68f8      	ldr	r0, [r7, #12]
 8003696:	f000 f88d 	bl	80037b4 <I2C_IsAcknowledgeFailed>
 800369a:	4603      	mov	r3, r0
 800369c:	2b00      	cmp	r3, #0
 800369e:	d001      	beq.n	80036a4 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80036a0:	2301      	movs	r3, #1
 80036a2:	e02d      	b.n	8003700 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80036a4:	68bb      	ldr	r3, [r7, #8]
 80036a6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80036aa:	d021      	beq.n	80036f0 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80036ac:	f7fe fcd8 	bl	8002060 <HAL_GetTick>
 80036b0:	4602      	mov	r2, r0
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	1ad3      	subs	r3, r2, r3
 80036b6:	68ba      	ldr	r2, [r7, #8]
 80036b8:	429a      	cmp	r2, r3
 80036ba:	d302      	bcc.n	80036c2 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80036bc:	68bb      	ldr	r3, [r7, #8]
 80036be:	2b00      	cmp	r3, #0
 80036c0:	d116      	bne.n	80036f0 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80036c2:	68fb      	ldr	r3, [r7, #12]
 80036c4:	2200      	movs	r2, #0
 80036c6:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80036c8:	68fb      	ldr	r3, [r7, #12]
 80036ca:	2220      	movs	r2, #32
 80036cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80036d0:	68fb      	ldr	r3, [r7, #12]
 80036d2:	2200      	movs	r2, #0
 80036d4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80036d8:	68fb      	ldr	r3, [r7, #12]
 80036da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036dc:	f043 0220 	orr.w	r2, r3, #32
 80036e0:	68fb      	ldr	r3, [r7, #12]
 80036e2:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80036e4:	68fb      	ldr	r3, [r7, #12]
 80036e6:	2200      	movs	r2, #0
 80036e8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80036ec:	2301      	movs	r3, #1
 80036ee:	e007      	b.n	8003700 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80036f0:	68fb      	ldr	r3, [r7, #12]
 80036f2:	681b      	ldr	r3, [r3, #0]
 80036f4:	695b      	ldr	r3, [r3, #20]
 80036f6:	f003 0304 	and.w	r3, r3, #4
 80036fa:	2b04      	cmp	r3, #4
 80036fc:	d1ca      	bne.n	8003694 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80036fe:	2300      	movs	r3, #0
}
 8003700:	4618      	mov	r0, r3
 8003702:	3710      	adds	r7, #16
 8003704:	46bd      	mov	sp, r7
 8003706:	bd80      	pop	{r7, pc}

08003708 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003708:	b580      	push	{r7, lr}
 800370a:	b084      	sub	sp, #16
 800370c:	af00      	add	r7, sp, #0
 800370e:	60f8      	str	r0, [r7, #12]
 8003710:	60b9      	str	r1, [r7, #8]
 8003712:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003714:	e042      	b.n	800379c <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8003716:	68fb      	ldr	r3, [r7, #12]
 8003718:	681b      	ldr	r3, [r3, #0]
 800371a:	695b      	ldr	r3, [r3, #20]
 800371c:	f003 0310 	and.w	r3, r3, #16
 8003720:	2b10      	cmp	r3, #16
 8003722:	d119      	bne.n	8003758 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003724:	68fb      	ldr	r3, [r7, #12]
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	f06f 0210 	mvn.w	r2, #16
 800372c:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800372e:	68fb      	ldr	r3, [r7, #12]
 8003730:	2200      	movs	r2, #0
 8003732:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003734:	68fb      	ldr	r3, [r7, #12]
 8003736:	2220      	movs	r2, #32
 8003738:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800373c:	68fb      	ldr	r3, [r7, #12]
 800373e:	2200      	movs	r2, #0
 8003740:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8003744:	68fb      	ldr	r3, [r7, #12]
 8003746:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003748:	68fb      	ldr	r3, [r7, #12]
 800374a:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800374c:	68fb      	ldr	r3, [r7, #12]
 800374e:	2200      	movs	r2, #0
 8003750:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8003754:	2301      	movs	r3, #1
 8003756:	e029      	b.n	80037ac <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003758:	f7fe fc82 	bl	8002060 <HAL_GetTick>
 800375c:	4602      	mov	r2, r0
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	1ad3      	subs	r3, r2, r3
 8003762:	68ba      	ldr	r2, [r7, #8]
 8003764:	429a      	cmp	r2, r3
 8003766:	d302      	bcc.n	800376e <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8003768:	68bb      	ldr	r3, [r7, #8]
 800376a:	2b00      	cmp	r3, #0
 800376c:	d116      	bne.n	800379c <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 800376e:	68fb      	ldr	r3, [r7, #12]
 8003770:	2200      	movs	r2, #0
 8003772:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003774:	68fb      	ldr	r3, [r7, #12]
 8003776:	2220      	movs	r2, #32
 8003778:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800377c:	68fb      	ldr	r3, [r7, #12]
 800377e:	2200      	movs	r2, #0
 8003780:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003784:	68fb      	ldr	r3, [r7, #12]
 8003786:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003788:	f043 0220 	orr.w	r2, r3, #32
 800378c:	68fb      	ldr	r3, [r7, #12]
 800378e:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003790:	68fb      	ldr	r3, [r7, #12]
 8003792:	2200      	movs	r2, #0
 8003794:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8003798:	2301      	movs	r3, #1
 800379a:	e007      	b.n	80037ac <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800379c:	68fb      	ldr	r3, [r7, #12]
 800379e:	681b      	ldr	r3, [r3, #0]
 80037a0:	695b      	ldr	r3, [r3, #20]
 80037a2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80037a6:	2b40      	cmp	r3, #64	; 0x40
 80037a8:	d1b5      	bne.n	8003716 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 80037aa:	2300      	movs	r3, #0
}
 80037ac:	4618      	mov	r0, r3
 80037ae:	3710      	adds	r7, #16
 80037b0:	46bd      	mov	sp, r7
 80037b2:	bd80      	pop	{r7, pc}

080037b4 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80037b4:	b480      	push	{r7}
 80037b6:	b083      	sub	sp, #12
 80037b8:	af00      	add	r7, sp, #0
 80037ba:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	681b      	ldr	r3, [r3, #0]
 80037c0:	695b      	ldr	r3, [r3, #20]
 80037c2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80037c6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80037ca:	d11b      	bne.n	8003804 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80037d4:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	2200      	movs	r2, #0
 80037da:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	2220      	movs	r2, #32
 80037e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	2200      	movs	r2, #0
 80037e8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037f0:	f043 0204 	orr.w	r2, r3, #4
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	2200      	movs	r2, #0
 80037fc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8003800:	2301      	movs	r3, #1
 8003802:	e000      	b.n	8003806 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8003804:	2300      	movs	r3, #0
}
 8003806:	4618      	mov	r0, r3
 8003808:	370c      	adds	r7, #12
 800380a:	46bd      	mov	sp, r7
 800380c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003810:	4770      	bx	lr
	...

08003814 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003814:	b580      	push	{r7, lr}
 8003816:	b086      	sub	sp, #24
 8003818:	af00      	add	r7, sp, #0
 800381a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	2b00      	cmp	r3, #0
 8003820:	d101      	bne.n	8003826 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003822:	2301      	movs	r3, #1
 8003824:	e267      	b.n	8003cf6 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	681b      	ldr	r3, [r3, #0]
 800382a:	f003 0301 	and.w	r3, r3, #1
 800382e:	2b00      	cmp	r3, #0
 8003830:	d075      	beq.n	800391e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003832:	4b88      	ldr	r3, [pc, #544]	; (8003a54 <HAL_RCC_OscConfig+0x240>)
 8003834:	689b      	ldr	r3, [r3, #8]
 8003836:	f003 030c 	and.w	r3, r3, #12
 800383a:	2b04      	cmp	r3, #4
 800383c:	d00c      	beq.n	8003858 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800383e:	4b85      	ldr	r3, [pc, #532]	; (8003a54 <HAL_RCC_OscConfig+0x240>)
 8003840:	689b      	ldr	r3, [r3, #8]
 8003842:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003846:	2b08      	cmp	r3, #8
 8003848:	d112      	bne.n	8003870 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800384a:	4b82      	ldr	r3, [pc, #520]	; (8003a54 <HAL_RCC_OscConfig+0x240>)
 800384c:	685b      	ldr	r3, [r3, #4]
 800384e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003852:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003856:	d10b      	bne.n	8003870 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003858:	4b7e      	ldr	r3, [pc, #504]	; (8003a54 <HAL_RCC_OscConfig+0x240>)
 800385a:	681b      	ldr	r3, [r3, #0]
 800385c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003860:	2b00      	cmp	r3, #0
 8003862:	d05b      	beq.n	800391c <HAL_RCC_OscConfig+0x108>
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	685b      	ldr	r3, [r3, #4]
 8003868:	2b00      	cmp	r3, #0
 800386a:	d157      	bne.n	800391c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800386c:	2301      	movs	r3, #1
 800386e:	e242      	b.n	8003cf6 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	685b      	ldr	r3, [r3, #4]
 8003874:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003878:	d106      	bne.n	8003888 <HAL_RCC_OscConfig+0x74>
 800387a:	4b76      	ldr	r3, [pc, #472]	; (8003a54 <HAL_RCC_OscConfig+0x240>)
 800387c:	681b      	ldr	r3, [r3, #0]
 800387e:	4a75      	ldr	r2, [pc, #468]	; (8003a54 <HAL_RCC_OscConfig+0x240>)
 8003880:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003884:	6013      	str	r3, [r2, #0]
 8003886:	e01d      	b.n	80038c4 <HAL_RCC_OscConfig+0xb0>
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	685b      	ldr	r3, [r3, #4]
 800388c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003890:	d10c      	bne.n	80038ac <HAL_RCC_OscConfig+0x98>
 8003892:	4b70      	ldr	r3, [pc, #448]	; (8003a54 <HAL_RCC_OscConfig+0x240>)
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	4a6f      	ldr	r2, [pc, #444]	; (8003a54 <HAL_RCC_OscConfig+0x240>)
 8003898:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800389c:	6013      	str	r3, [r2, #0]
 800389e:	4b6d      	ldr	r3, [pc, #436]	; (8003a54 <HAL_RCC_OscConfig+0x240>)
 80038a0:	681b      	ldr	r3, [r3, #0]
 80038a2:	4a6c      	ldr	r2, [pc, #432]	; (8003a54 <HAL_RCC_OscConfig+0x240>)
 80038a4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80038a8:	6013      	str	r3, [r2, #0]
 80038aa:	e00b      	b.n	80038c4 <HAL_RCC_OscConfig+0xb0>
 80038ac:	4b69      	ldr	r3, [pc, #420]	; (8003a54 <HAL_RCC_OscConfig+0x240>)
 80038ae:	681b      	ldr	r3, [r3, #0]
 80038b0:	4a68      	ldr	r2, [pc, #416]	; (8003a54 <HAL_RCC_OscConfig+0x240>)
 80038b2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80038b6:	6013      	str	r3, [r2, #0]
 80038b8:	4b66      	ldr	r3, [pc, #408]	; (8003a54 <HAL_RCC_OscConfig+0x240>)
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	4a65      	ldr	r2, [pc, #404]	; (8003a54 <HAL_RCC_OscConfig+0x240>)
 80038be:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80038c2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	685b      	ldr	r3, [r3, #4]
 80038c8:	2b00      	cmp	r3, #0
 80038ca:	d013      	beq.n	80038f4 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80038cc:	f7fe fbc8 	bl	8002060 <HAL_GetTick>
 80038d0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80038d2:	e008      	b.n	80038e6 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80038d4:	f7fe fbc4 	bl	8002060 <HAL_GetTick>
 80038d8:	4602      	mov	r2, r0
 80038da:	693b      	ldr	r3, [r7, #16]
 80038dc:	1ad3      	subs	r3, r2, r3
 80038de:	2b64      	cmp	r3, #100	; 0x64
 80038e0:	d901      	bls.n	80038e6 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80038e2:	2303      	movs	r3, #3
 80038e4:	e207      	b.n	8003cf6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80038e6:	4b5b      	ldr	r3, [pc, #364]	; (8003a54 <HAL_RCC_OscConfig+0x240>)
 80038e8:	681b      	ldr	r3, [r3, #0]
 80038ea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80038ee:	2b00      	cmp	r3, #0
 80038f0:	d0f0      	beq.n	80038d4 <HAL_RCC_OscConfig+0xc0>
 80038f2:	e014      	b.n	800391e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80038f4:	f7fe fbb4 	bl	8002060 <HAL_GetTick>
 80038f8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80038fa:	e008      	b.n	800390e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80038fc:	f7fe fbb0 	bl	8002060 <HAL_GetTick>
 8003900:	4602      	mov	r2, r0
 8003902:	693b      	ldr	r3, [r7, #16]
 8003904:	1ad3      	subs	r3, r2, r3
 8003906:	2b64      	cmp	r3, #100	; 0x64
 8003908:	d901      	bls.n	800390e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800390a:	2303      	movs	r3, #3
 800390c:	e1f3      	b.n	8003cf6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800390e:	4b51      	ldr	r3, [pc, #324]	; (8003a54 <HAL_RCC_OscConfig+0x240>)
 8003910:	681b      	ldr	r3, [r3, #0]
 8003912:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003916:	2b00      	cmp	r3, #0
 8003918:	d1f0      	bne.n	80038fc <HAL_RCC_OscConfig+0xe8>
 800391a:	e000      	b.n	800391e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800391c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	681b      	ldr	r3, [r3, #0]
 8003922:	f003 0302 	and.w	r3, r3, #2
 8003926:	2b00      	cmp	r3, #0
 8003928:	d063      	beq.n	80039f2 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800392a:	4b4a      	ldr	r3, [pc, #296]	; (8003a54 <HAL_RCC_OscConfig+0x240>)
 800392c:	689b      	ldr	r3, [r3, #8]
 800392e:	f003 030c 	and.w	r3, r3, #12
 8003932:	2b00      	cmp	r3, #0
 8003934:	d00b      	beq.n	800394e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003936:	4b47      	ldr	r3, [pc, #284]	; (8003a54 <HAL_RCC_OscConfig+0x240>)
 8003938:	689b      	ldr	r3, [r3, #8]
 800393a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800393e:	2b08      	cmp	r3, #8
 8003940:	d11c      	bne.n	800397c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003942:	4b44      	ldr	r3, [pc, #272]	; (8003a54 <HAL_RCC_OscConfig+0x240>)
 8003944:	685b      	ldr	r3, [r3, #4]
 8003946:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800394a:	2b00      	cmp	r3, #0
 800394c:	d116      	bne.n	800397c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800394e:	4b41      	ldr	r3, [pc, #260]	; (8003a54 <HAL_RCC_OscConfig+0x240>)
 8003950:	681b      	ldr	r3, [r3, #0]
 8003952:	f003 0302 	and.w	r3, r3, #2
 8003956:	2b00      	cmp	r3, #0
 8003958:	d005      	beq.n	8003966 <HAL_RCC_OscConfig+0x152>
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	68db      	ldr	r3, [r3, #12]
 800395e:	2b01      	cmp	r3, #1
 8003960:	d001      	beq.n	8003966 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8003962:	2301      	movs	r3, #1
 8003964:	e1c7      	b.n	8003cf6 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003966:	4b3b      	ldr	r3, [pc, #236]	; (8003a54 <HAL_RCC_OscConfig+0x240>)
 8003968:	681b      	ldr	r3, [r3, #0]
 800396a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	691b      	ldr	r3, [r3, #16]
 8003972:	00db      	lsls	r3, r3, #3
 8003974:	4937      	ldr	r1, [pc, #220]	; (8003a54 <HAL_RCC_OscConfig+0x240>)
 8003976:	4313      	orrs	r3, r2
 8003978:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800397a:	e03a      	b.n	80039f2 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	68db      	ldr	r3, [r3, #12]
 8003980:	2b00      	cmp	r3, #0
 8003982:	d020      	beq.n	80039c6 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003984:	4b34      	ldr	r3, [pc, #208]	; (8003a58 <HAL_RCC_OscConfig+0x244>)
 8003986:	2201      	movs	r2, #1
 8003988:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800398a:	f7fe fb69 	bl	8002060 <HAL_GetTick>
 800398e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003990:	e008      	b.n	80039a4 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003992:	f7fe fb65 	bl	8002060 <HAL_GetTick>
 8003996:	4602      	mov	r2, r0
 8003998:	693b      	ldr	r3, [r7, #16]
 800399a:	1ad3      	subs	r3, r2, r3
 800399c:	2b02      	cmp	r3, #2
 800399e:	d901      	bls.n	80039a4 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80039a0:	2303      	movs	r3, #3
 80039a2:	e1a8      	b.n	8003cf6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80039a4:	4b2b      	ldr	r3, [pc, #172]	; (8003a54 <HAL_RCC_OscConfig+0x240>)
 80039a6:	681b      	ldr	r3, [r3, #0]
 80039a8:	f003 0302 	and.w	r3, r3, #2
 80039ac:	2b00      	cmp	r3, #0
 80039ae:	d0f0      	beq.n	8003992 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80039b0:	4b28      	ldr	r3, [pc, #160]	; (8003a54 <HAL_RCC_OscConfig+0x240>)
 80039b2:	681b      	ldr	r3, [r3, #0]
 80039b4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	691b      	ldr	r3, [r3, #16]
 80039bc:	00db      	lsls	r3, r3, #3
 80039be:	4925      	ldr	r1, [pc, #148]	; (8003a54 <HAL_RCC_OscConfig+0x240>)
 80039c0:	4313      	orrs	r3, r2
 80039c2:	600b      	str	r3, [r1, #0]
 80039c4:	e015      	b.n	80039f2 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80039c6:	4b24      	ldr	r3, [pc, #144]	; (8003a58 <HAL_RCC_OscConfig+0x244>)
 80039c8:	2200      	movs	r2, #0
 80039ca:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80039cc:	f7fe fb48 	bl	8002060 <HAL_GetTick>
 80039d0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80039d2:	e008      	b.n	80039e6 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80039d4:	f7fe fb44 	bl	8002060 <HAL_GetTick>
 80039d8:	4602      	mov	r2, r0
 80039da:	693b      	ldr	r3, [r7, #16]
 80039dc:	1ad3      	subs	r3, r2, r3
 80039de:	2b02      	cmp	r3, #2
 80039e0:	d901      	bls.n	80039e6 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80039e2:	2303      	movs	r3, #3
 80039e4:	e187      	b.n	8003cf6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80039e6:	4b1b      	ldr	r3, [pc, #108]	; (8003a54 <HAL_RCC_OscConfig+0x240>)
 80039e8:	681b      	ldr	r3, [r3, #0]
 80039ea:	f003 0302 	and.w	r3, r3, #2
 80039ee:	2b00      	cmp	r3, #0
 80039f0:	d1f0      	bne.n	80039d4 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	681b      	ldr	r3, [r3, #0]
 80039f6:	f003 0308 	and.w	r3, r3, #8
 80039fa:	2b00      	cmp	r3, #0
 80039fc:	d036      	beq.n	8003a6c <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	695b      	ldr	r3, [r3, #20]
 8003a02:	2b00      	cmp	r3, #0
 8003a04:	d016      	beq.n	8003a34 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003a06:	4b15      	ldr	r3, [pc, #84]	; (8003a5c <HAL_RCC_OscConfig+0x248>)
 8003a08:	2201      	movs	r2, #1
 8003a0a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003a0c:	f7fe fb28 	bl	8002060 <HAL_GetTick>
 8003a10:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003a12:	e008      	b.n	8003a26 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003a14:	f7fe fb24 	bl	8002060 <HAL_GetTick>
 8003a18:	4602      	mov	r2, r0
 8003a1a:	693b      	ldr	r3, [r7, #16]
 8003a1c:	1ad3      	subs	r3, r2, r3
 8003a1e:	2b02      	cmp	r3, #2
 8003a20:	d901      	bls.n	8003a26 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8003a22:	2303      	movs	r3, #3
 8003a24:	e167      	b.n	8003cf6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003a26:	4b0b      	ldr	r3, [pc, #44]	; (8003a54 <HAL_RCC_OscConfig+0x240>)
 8003a28:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003a2a:	f003 0302 	and.w	r3, r3, #2
 8003a2e:	2b00      	cmp	r3, #0
 8003a30:	d0f0      	beq.n	8003a14 <HAL_RCC_OscConfig+0x200>
 8003a32:	e01b      	b.n	8003a6c <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003a34:	4b09      	ldr	r3, [pc, #36]	; (8003a5c <HAL_RCC_OscConfig+0x248>)
 8003a36:	2200      	movs	r2, #0
 8003a38:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003a3a:	f7fe fb11 	bl	8002060 <HAL_GetTick>
 8003a3e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003a40:	e00e      	b.n	8003a60 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003a42:	f7fe fb0d 	bl	8002060 <HAL_GetTick>
 8003a46:	4602      	mov	r2, r0
 8003a48:	693b      	ldr	r3, [r7, #16]
 8003a4a:	1ad3      	subs	r3, r2, r3
 8003a4c:	2b02      	cmp	r3, #2
 8003a4e:	d907      	bls.n	8003a60 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003a50:	2303      	movs	r3, #3
 8003a52:	e150      	b.n	8003cf6 <HAL_RCC_OscConfig+0x4e2>
 8003a54:	40023800 	.word	0x40023800
 8003a58:	42470000 	.word	0x42470000
 8003a5c:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003a60:	4b88      	ldr	r3, [pc, #544]	; (8003c84 <HAL_RCC_OscConfig+0x470>)
 8003a62:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003a64:	f003 0302 	and.w	r3, r3, #2
 8003a68:	2b00      	cmp	r3, #0
 8003a6a:	d1ea      	bne.n	8003a42 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	681b      	ldr	r3, [r3, #0]
 8003a70:	f003 0304 	and.w	r3, r3, #4
 8003a74:	2b00      	cmp	r3, #0
 8003a76:	f000 8097 	beq.w	8003ba8 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003a7a:	2300      	movs	r3, #0
 8003a7c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003a7e:	4b81      	ldr	r3, [pc, #516]	; (8003c84 <HAL_RCC_OscConfig+0x470>)
 8003a80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a82:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003a86:	2b00      	cmp	r3, #0
 8003a88:	d10f      	bne.n	8003aaa <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003a8a:	2300      	movs	r3, #0
 8003a8c:	60bb      	str	r3, [r7, #8]
 8003a8e:	4b7d      	ldr	r3, [pc, #500]	; (8003c84 <HAL_RCC_OscConfig+0x470>)
 8003a90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a92:	4a7c      	ldr	r2, [pc, #496]	; (8003c84 <HAL_RCC_OscConfig+0x470>)
 8003a94:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003a98:	6413      	str	r3, [r2, #64]	; 0x40
 8003a9a:	4b7a      	ldr	r3, [pc, #488]	; (8003c84 <HAL_RCC_OscConfig+0x470>)
 8003a9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a9e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003aa2:	60bb      	str	r3, [r7, #8]
 8003aa4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003aa6:	2301      	movs	r3, #1
 8003aa8:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003aaa:	4b77      	ldr	r3, [pc, #476]	; (8003c88 <HAL_RCC_OscConfig+0x474>)
 8003aac:	681b      	ldr	r3, [r3, #0]
 8003aae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003ab2:	2b00      	cmp	r3, #0
 8003ab4:	d118      	bne.n	8003ae8 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003ab6:	4b74      	ldr	r3, [pc, #464]	; (8003c88 <HAL_RCC_OscConfig+0x474>)
 8003ab8:	681b      	ldr	r3, [r3, #0]
 8003aba:	4a73      	ldr	r2, [pc, #460]	; (8003c88 <HAL_RCC_OscConfig+0x474>)
 8003abc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003ac0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003ac2:	f7fe facd 	bl	8002060 <HAL_GetTick>
 8003ac6:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003ac8:	e008      	b.n	8003adc <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003aca:	f7fe fac9 	bl	8002060 <HAL_GetTick>
 8003ace:	4602      	mov	r2, r0
 8003ad0:	693b      	ldr	r3, [r7, #16]
 8003ad2:	1ad3      	subs	r3, r2, r3
 8003ad4:	2b02      	cmp	r3, #2
 8003ad6:	d901      	bls.n	8003adc <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8003ad8:	2303      	movs	r3, #3
 8003ada:	e10c      	b.n	8003cf6 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003adc:	4b6a      	ldr	r3, [pc, #424]	; (8003c88 <HAL_RCC_OscConfig+0x474>)
 8003ade:	681b      	ldr	r3, [r3, #0]
 8003ae0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003ae4:	2b00      	cmp	r3, #0
 8003ae6:	d0f0      	beq.n	8003aca <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	689b      	ldr	r3, [r3, #8]
 8003aec:	2b01      	cmp	r3, #1
 8003aee:	d106      	bne.n	8003afe <HAL_RCC_OscConfig+0x2ea>
 8003af0:	4b64      	ldr	r3, [pc, #400]	; (8003c84 <HAL_RCC_OscConfig+0x470>)
 8003af2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003af4:	4a63      	ldr	r2, [pc, #396]	; (8003c84 <HAL_RCC_OscConfig+0x470>)
 8003af6:	f043 0301 	orr.w	r3, r3, #1
 8003afa:	6713      	str	r3, [r2, #112]	; 0x70
 8003afc:	e01c      	b.n	8003b38 <HAL_RCC_OscConfig+0x324>
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	689b      	ldr	r3, [r3, #8]
 8003b02:	2b05      	cmp	r3, #5
 8003b04:	d10c      	bne.n	8003b20 <HAL_RCC_OscConfig+0x30c>
 8003b06:	4b5f      	ldr	r3, [pc, #380]	; (8003c84 <HAL_RCC_OscConfig+0x470>)
 8003b08:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003b0a:	4a5e      	ldr	r2, [pc, #376]	; (8003c84 <HAL_RCC_OscConfig+0x470>)
 8003b0c:	f043 0304 	orr.w	r3, r3, #4
 8003b10:	6713      	str	r3, [r2, #112]	; 0x70
 8003b12:	4b5c      	ldr	r3, [pc, #368]	; (8003c84 <HAL_RCC_OscConfig+0x470>)
 8003b14:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003b16:	4a5b      	ldr	r2, [pc, #364]	; (8003c84 <HAL_RCC_OscConfig+0x470>)
 8003b18:	f043 0301 	orr.w	r3, r3, #1
 8003b1c:	6713      	str	r3, [r2, #112]	; 0x70
 8003b1e:	e00b      	b.n	8003b38 <HAL_RCC_OscConfig+0x324>
 8003b20:	4b58      	ldr	r3, [pc, #352]	; (8003c84 <HAL_RCC_OscConfig+0x470>)
 8003b22:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003b24:	4a57      	ldr	r2, [pc, #348]	; (8003c84 <HAL_RCC_OscConfig+0x470>)
 8003b26:	f023 0301 	bic.w	r3, r3, #1
 8003b2a:	6713      	str	r3, [r2, #112]	; 0x70
 8003b2c:	4b55      	ldr	r3, [pc, #340]	; (8003c84 <HAL_RCC_OscConfig+0x470>)
 8003b2e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003b30:	4a54      	ldr	r2, [pc, #336]	; (8003c84 <HAL_RCC_OscConfig+0x470>)
 8003b32:	f023 0304 	bic.w	r3, r3, #4
 8003b36:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	689b      	ldr	r3, [r3, #8]
 8003b3c:	2b00      	cmp	r3, #0
 8003b3e:	d015      	beq.n	8003b6c <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003b40:	f7fe fa8e 	bl	8002060 <HAL_GetTick>
 8003b44:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003b46:	e00a      	b.n	8003b5e <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003b48:	f7fe fa8a 	bl	8002060 <HAL_GetTick>
 8003b4c:	4602      	mov	r2, r0
 8003b4e:	693b      	ldr	r3, [r7, #16]
 8003b50:	1ad3      	subs	r3, r2, r3
 8003b52:	f241 3288 	movw	r2, #5000	; 0x1388
 8003b56:	4293      	cmp	r3, r2
 8003b58:	d901      	bls.n	8003b5e <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8003b5a:	2303      	movs	r3, #3
 8003b5c:	e0cb      	b.n	8003cf6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003b5e:	4b49      	ldr	r3, [pc, #292]	; (8003c84 <HAL_RCC_OscConfig+0x470>)
 8003b60:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003b62:	f003 0302 	and.w	r3, r3, #2
 8003b66:	2b00      	cmp	r3, #0
 8003b68:	d0ee      	beq.n	8003b48 <HAL_RCC_OscConfig+0x334>
 8003b6a:	e014      	b.n	8003b96 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003b6c:	f7fe fa78 	bl	8002060 <HAL_GetTick>
 8003b70:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003b72:	e00a      	b.n	8003b8a <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003b74:	f7fe fa74 	bl	8002060 <HAL_GetTick>
 8003b78:	4602      	mov	r2, r0
 8003b7a:	693b      	ldr	r3, [r7, #16]
 8003b7c:	1ad3      	subs	r3, r2, r3
 8003b7e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003b82:	4293      	cmp	r3, r2
 8003b84:	d901      	bls.n	8003b8a <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8003b86:	2303      	movs	r3, #3
 8003b88:	e0b5      	b.n	8003cf6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003b8a:	4b3e      	ldr	r3, [pc, #248]	; (8003c84 <HAL_RCC_OscConfig+0x470>)
 8003b8c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003b8e:	f003 0302 	and.w	r3, r3, #2
 8003b92:	2b00      	cmp	r3, #0
 8003b94:	d1ee      	bne.n	8003b74 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003b96:	7dfb      	ldrb	r3, [r7, #23]
 8003b98:	2b01      	cmp	r3, #1
 8003b9a:	d105      	bne.n	8003ba8 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003b9c:	4b39      	ldr	r3, [pc, #228]	; (8003c84 <HAL_RCC_OscConfig+0x470>)
 8003b9e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ba0:	4a38      	ldr	r2, [pc, #224]	; (8003c84 <HAL_RCC_OscConfig+0x470>)
 8003ba2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003ba6:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	699b      	ldr	r3, [r3, #24]
 8003bac:	2b00      	cmp	r3, #0
 8003bae:	f000 80a1 	beq.w	8003cf4 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003bb2:	4b34      	ldr	r3, [pc, #208]	; (8003c84 <HAL_RCC_OscConfig+0x470>)
 8003bb4:	689b      	ldr	r3, [r3, #8]
 8003bb6:	f003 030c 	and.w	r3, r3, #12
 8003bba:	2b08      	cmp	r3, #8
 8003bbc:	d05c      	beq.n	8003c78 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	699b      	ldr	r3, [r3, #24]
 8003bc2:	2b02      	cmp	r3, #2
 8003bc4:	d141      	bne.n	8003c4a <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003bc6:	4b31      	ldr	r3, [pc, #196]	; (8003c8c <HAL_RCC_OscConfig+0x478>)
 8003bc8:	2200      	movs	r2, #0
 8003bca:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003bcc:	f7fe fa48 	bl	8002060 <HAL_GetTick>
 8003bd0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003bd2:	e008      	b.n	8003be6 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003bd4:	f7fe fa44 	bl	8002060 <HAL_GetTick>
 8003bd8:	4602      	mov	r2, r0
 8003bda:	693b      	ldr	r3, [r7, #16]
 8003bdc:	1ad3      	subs	r3, r2, r3
 8003bde:	2b02      	cmp	r3, #2
 8003be0:	d901      	bls.n	8003be6 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8003be2:	2303      	movs	r3, #3
 8003be4:	e087      	b.n	8003cf6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003be6:	4b27      	ldr	r3, [pc, #156]	; (8003c84 <HAL_RCC_OscConfig+0x470>)
 8003be8:	681b      	ldr	r3, [r3, #0]
 8003bea:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003bee:	2b00      	cmp	r3, #0
 8003bf0:	d1f0      	bne.n	8003bd4 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	69da      	ldr	r2, [r3, #28]
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	6a1b      	ldr	r3, [r3, #32]
 8003bfa:	431a      	orrs	r2, r3
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c00:	019b      	lsls	r3, r3, #6
 8003c02:	431a      	orrs	r2, r3
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003c08:	085b      	lsrs	r3, r3, #1
 8003c0a:	3b01      	subs	r3, #1
 8003c0c:	041b      	lsls	r3, r3, #16
 8003c0e:	431a      	orrs	r2, r3
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c14:	061b      	lsls	r3, r3, #24
 8003c16:	491b      	ldr	r1, [pc, #108]	; (8003c84 <HAL_RCC_OscConfig+0x470>)
 8003c18:	4313      	orrs	r3, r2
 8003c1a:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003c1c:	4b1b      	ldr	r3, [pc, #108]	; (8003c8c <HAL_RCC_OscConfig+0x478>)
 8003c1e:	2201      	movs	r2, #1
 8003c20:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003c22:	f7fe fa1d 	bl	8002060 <HAL_GetTick>
 8003c26:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003c28:	e008      	b.n	8003c3c <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003c2a:	f7fe fa19 	bl	8002060 <HAL_GetTick>
 8003c2e:	4602      	mov	r2, r0
 8003c30:	693b      	ldr	r3, [r7, #16]
 8003c32:	1ad3      	subs	r3, r2, r3
 8003c34:	2b02      	cmp	r3, #2
 8003c36:	d901      	bls.n	8003c3c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8003c38:	2303      	movs	r3, #3
 8003c3a:	e05c      	b.n	8003cf6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003c3c:	4b11      	ldr	r3, [pc, #68]	; (8003c84 <HAL_RCC_OscConfig+0x470>)
 8003c3e:	681b      	ldr	r3, [r3, #0]
 8003c40:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003c44:	2b00      	cmp	r3, #0
 8003c46:	d0f0      	beq.n	8003c2a <HAL_RCC_OscConfig+0x416>
 8003c48:	e054      	b.n	8003cf4 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003c4a:	4b10      	ldr	r3, [pc, #64]	; (8003c8c <HAL_RCC_OscConfig+0x478>)
 8003c4c:	2200      	movs	r2, #0
 8003c4e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003c50:	f7fe fa06 	bl	8002060 <HAL_GetTick>
 8003c54:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003c56:	e008      	b.n	8003c6a <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003c58:	f7fe fa02 	bl	8002060 <HAL_GetTick>
 8003c5c:	4602      	mov	r2, r0
 8003c5e:	693b      	ldr	r3, [r7, #16]
 8003c60:	1ad3      	subs	r3, r2, r3
 8003c62:	2b02      	cmp	r3, #2
 8003c64:	d901      	bls.n	8003c6a <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8003c66:	2303      	movs	r3, #3
 8003c68:	e045      	b.n	8003cf6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003c6a:	4b06      	ldr	r3, [pc, #24]	; (8003c84 <HAL_RCC_OscConfig+0x470>)
 8003c6c:	681b      	ldr	r3, [r3, #0]
 8003c6e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003c72:	2b00      	cmp	r3, #0
 8003c74:	d1f0      	bne.n	8003c58 <HAL_RCC_OscConfig+0x444>
 8003c76:	e03d      	b.n	8003cf4 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	699b      	ldr	r3, [r3, #24]
 8003c7c:	2b01      	cmp	r3, #1
 8003c7e:	d107      	bne.n	8003c90 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8003c80:	2301      	movs	r3, #1
 8003c82:	e038      	b.n	8003cf6 <HAL_RCC_OscConfig+0x4e2>
 8003c84:	40023800 	.word	0x40023800
 8003c88:	40007000 	.word	0x40007000
 8003c8c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003c90:	4b1b      	ldr	r3, [pc, #108]	; (8003d00 <HAL_RCC_OscConfig+0x4ec>)
 8003c92:	685b      	ldr	r3, [r3, #4]
 8003c94:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	699b      	ldr	r3, [r3, #24]
 8003c9a:	2b01      	cmp	r3, #1
 8003c9c:	d028      	beq.n	8003cf0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003c9e:	68fb      	ldr	r3, [r7, #12]
 8003ca0:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003ca8:	429a      	cmp	r2, r3
 8003caa:	d121      	bne.n	8003cf0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003cac:	68fb      	ldr	r3, [r7, #12]
 8003cae:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003cb6:	429a      	cmp	r2, r3
 8003cb8:	d11a      	bne.n	8003cf0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003cba:	68fa      	ldr	r2, [r7, #12]
 8003cbc:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003cc0:	4013      	ands	r3, r2
 8003cc2:	687a      	ldr	r2, [r7, #4]
 8003cc4:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003cc6:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003cc8:	4293      	cmp	r3, r2
 8003cca:	d111      	bne.n	8003cf0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003ccc:	68fb      	ldr	r3, [r7, #12]
 8003cce:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003cd6:	085b      	lsrs	r3, r3, #1
 8003cd8:	3b01      	subs	r3, #1
 8003cda:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003cdc:	429a      	cmp	r2, r3
 8003cde:	d107      	bne.n	8003cf0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003ce0:	68fb      	ldr	r3, [r7, #12]
 8003ce2:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003cea:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003cec:	429a      	cmp	r2, r3
 8003cee:	d001      	beq.n	8003cf4 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8003cf0:	2301      	movs	r3, #1
 8003cf2:	e000      	b.n	8003cf6 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8003cf4:	2300      	movs	r3, #0
}
 8003cf6:	4618      	mov	r0, r3
 8003cf8:	3718      	adds	r7, #24
 8003cfa:	46bd      	mov	sp, r7
 8003cfc:	bd80      	pop	{r7, pc}
 8003cfe:	bf00      	nop
 8003d00:	40023800 	.word	0x40023800

08003d04 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003d04:	b580      	push	{r7, lr}
 8003d06:	b084      	sub	sp, #16
 8003d08:	af00      	add	r7, sp, #0
 8003d0a:	6078      	str	r0, [r7, #4]
 8003d0c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	2b00      	cmp	r3, #0
 8003d12:	d101      	bne.n	8003d18 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003d14:	2301      	movs	r3, #1
 8003d16:	e0cc      	b.n	8003eb2 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003d18:	4b68      	ldr	r3, [pc, #416]	; (8003ebc <HAL_RCC_ClockConfig+0x1b8>)
 8003d1a:	681b      	ldr	r3, [r3, #0]
 8003d1c:	f003 0307 	and.w	r3, r3, #7
 8003d20:	683a      	ldr	r2, [r7, #0]
 8003d22:	429a      	cmp	r2, r3
 8003d24:	d90c      	bls.n	8003d40 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003d26:	4b65      	ldr	r3, [pc, #404]	; (8003ebc <HAL_RCC_ClockConfig+0x1b8>)
 8003d28:	683a      	ldr	r2, [r7, #0]
 8003d2a:	b2d2      	uxtb	r2, r2
 8003d2c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003d2e:	4b63      	ldr	r3, [pc, #396]	; (8003ebc <HAL_RCC_ClockConfig+0x1b8>)
 8003d30:	681b      	ldr	r3, [r3, #0]
 8003d32:	f003 0307 	and.w	r3, r3, #7
 8003d36:	683a      	ldr	r2, [r7, #0]
 8003d38:	429a      	cmp	r2, r3
 8003d3a:	d001      	beq.n	8003d40 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003d3c:	2301      	movs	r3, #1
 8003d3e:	e0b8      	b.n	8003eb2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	681b      	ldr	r3, [r3, #0]
 8003d44:	f003 0302 	and.w	r3, r3, #2
 8003d48:	2b00      	cmp	r3, #0
 8003d4a:	d020      	beq.n	8003d8e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	681b      	ldr	r3, [r3, #0]
 8003d50:	f003 0304 	and.w	r3, r3, #4
 8003d54:	2b00      	cmp	r3, #0
 8003d56:	d005      	beq.n	8003d64 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003d58:	4b59      	ldr	r3, [pc, #356]	; (8003ec0 <HAL_RCC_ClockConfig+0x1bc>)
 8003d5a:	689b      	ldr	r3, [r3, #8]
 8003d5c:	4a58      	ldr	r2, [pc, #352]	; (8003ec0 <HAL_RCC_ClockConfig+0x1bc>)
 8003d5e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003d62:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	681b      	ldr	r3, [r3, #0]
 8003d68:	f003 0308 	and.w	r3, r3, #8
 8003d6c:	2b00      	cmp	r3, #0
 8003d6e:	d005      	beq.n	8003d7c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003d70:	4b53      	ldr	r3, [pc, #332]	; (8003ec0 <HAL_RCC_ClockConfig+0x1bc>)
 8003d72:	689b      	ldr	r3, [r3, #8]
 8003d74:	4a52      	ldr	r2, [pc, #328]	; (8003ec0 <HAL_RCC_ClockConfig+0x1bc>)
 8003d76:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003d7a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003d7c:	4b50      	ldr	r3, [pc, #320]	; (8003ec0 <HAL_RCC_ClockConfig+0x1bc>)
 8003d7e:	689b      	ldr	r3, [r3, #8]
 8003d80:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	689b      	ldr	r3, [r3, #8]
 8003d88:	494d      	ldr	r1, [pc, #308]	; (8003ec0 <HAL_RCC_ClockConfig+0x1bc>)
 8003d8a:	4313      	orrs	r3, r2
 8003d8c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	681b      	ldr	r3, [r3, #0]
 8003d92:	f003 0301 	and.w	r3, r3, #1
 8003d96:	2b00      	cmp	r3, #0
 8003d98:	d044      	beq.n	8003e24 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	685b      	ldr	r3, [r3, #4]
 8003d9e:	2b01      	cmp	r3, #1
 8003da0:	d107      	bne.n	8003db2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003da2:	4b47      	ldr	r3, [pc, #284]	; (8003ec0 <HAL_RCC_ClockConfig+0x1bc>)
 8003da4:	681b      	ldr	r3, [r3, #0]
 8003da6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003daa:	2b00      	cmp	r3, #0
 8003dac:	d119      	bne.n	8003de2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003dae:	2301      	movs	r3, #1
 8003db0:	e07f      	b.n	8003eb2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	685b      	ldr	r3, [r3, #4]
 8003db6:	2b02      	cmp	r3, #2
 8003db8:	d003      	beq.n	8003dc2 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003dbe:	2b03      	cmp	r3, #3
 8003dc0:	d107      	bne.n	8003dd2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003dc2:	4b3f      	ldr	r3, [pc, #252]	; (8003ec0 <HAL_RCC_ClockConfig+0x1bc>)
 8003dc4:	681b      	ldr	r3, [r3, #0]
 8003dc6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003dca:	2b00      	cmp	r3, #0
 8003dcc:	d109      	bne.n	8003de2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003dce:	2301      	movs	r3, #1
 8003dd0:	e06f      	b.n	8003eb2 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003dd2:	4b3b      	ldr	r3, [pc, #236]	; (8003ec0 <HAL_RCC_ClockConfig+0x1bc>)
 8003dd4:	681b      	ldr	r3, [r3, #0]
 8003dd6:	f003 0302 	and.w	r3, r3, #2
 8003dda:	2b00      	cmp	r3, #0
 8003ddc:	d101      	bne.n	8003de2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003dde:	2301      	movs	r3, #1
 8003de0:	e067      	b.n	8003eb2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003de2:	4b37      	ldr	r3, [pc, #220]	; (8003ec0 <HAL_RCC_ClockConfig+0x1bc>)
 8003de4:	689b      	ldr	r3, [r3, #8]
 8003de6:	f023 0203 	bic.w	r2, r3, #3
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	685b      	ldr	r3, [r3, #4]
 8003dee:	4934      	ldr	r1, [pc, #208]	; (8003ec0 <HAL_RCC_ClockConfig+0x1bc>)
 8003df0:	4313      	orrs	r3, r2
 8003df2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003df4:	f7fe f934 	bl	8002060 <HAL_GetTick>
 8003df8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003dfa:	e00a      	b.n	8003e12 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003dfc:	f7fe f930 	bl	8002060 <HAL_GetTick>
 8003e00:	4602      	mov	r2, r0
 8003e02:	68fb      	ldr	r3, [r7, #12]
 8003e04:	1ad3      	subs	r3, r2, r3
 8003e06:	f241 3288 	movw	r2, #5000	; 0x1388
 8003e0a:	4293      	cmp	r3, r2
 8003e0c:	d901      	bls.n	8003e12 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003e0e:	2303      	movs	r3, #3
 8003e10:	e04f      	b.n	8003eb2 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003e12:	4b2b      	ldr	r3, [pc, #172]	; (8003ec0 <HAL_RCC_ClockConfig+0x1bc>)
 8003e14:	689b      	ldr	r3, [r3, #8]
 8003e16:	f003 020c 	and.w	r2, r3, #12
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	685b      	ldr	r3, [r3, #4]
 8003e1e:	009b      	lsls	r3, r3, #2
 8003e20:	429a      	cmp	r2, r3
 8003e22:	d1eb      	bne.n	8003dfc <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003e24:	4b25      	ldr	r3, [pc, #148]	; (8003ebc <HAL_RCC_ClockConfig+0x1b8>)
 8003e26:	681b      	ldr	r3, [r3, #0]
 8003e28:	f003 0307 	and.w	r3, r3, #7
 8003e2c:	683a      	ldr	r2, [r7, #0]
 8003e2e:	429a      	cmp	r2, r3
 8003e30:	d20c      	bcs.n	8003e4c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003e32:	4b22      	ldr	r3, [pc, #136]	; (8003ebc <HAL_RCC_ClockConfig+0x1b8>)
 8003e34:	683a      	ldr	r2, [r7, #0]
 8003e36:	b2d2      	uxtb	r2, r2
 8003e38:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003e3a:	4b20      	ldr	r3, [pc, #128]	; (8003ebc <HAL_RCC_ClockConfig+0x1b8>)
 8003e3c:	681b      	ldr	r3, [r3, #0]
 8003e3e:	f003 0307 	and.w	r3, r3, #7
 8003e42:	683a      	ldr	r2, [r7, #0]
 8003e44:	429a      	cmp	r2, r3
 8003e46:	d001      	beq.n	8003e4c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003e48:	2301      	movs	r3, #1
 8003e4a:	e032      	b.n	8003eb2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	681b      	ldr	r3, [r3, #0]
 8003e50:	f003 0304 	and.w	r3, r3, #4
 8003e54:	2b00      	cmp	r3, #0
 8003e56:	d008      	beq.n	8003e6a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003e58:	4b19      	ldr	r3, [pc, #100]	; (8003ec0 <HAL_RCC_ClockConfig+0x1bc>)
 8003e5a:	689b      	ldr	r3, [r3, #8]
 8003e5c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	68db      	ldr	r3, [r3, #12]
 8003e64:	4916      	ldr	r1, [pc, #88]	; (8003ec0 <HAL_RCC_ClockConfig+0x1bc>)
 8003e66:	4313      	orrs	r3, r2
 8003e68:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	681b      	ldr	r3, [r3, #0]
 8003e6e:	f003 0308 	and.w	r3, r3, #8
 8003e72:	2b00      	cmp	r3, #0
 8003e74:	d009      	beq.n	8003e8a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003e76:	4b12      	ldr	r3, [pc, #72]	; (8003ec0 <HAL_RCC_ClockConfig+0x1bc>)
 8003e78:	689b      	ldr	r3, [r3, #8]
 8003e7a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	691b      	ldr	r3, [r3, #16]
 8003e82:	00db      	lsls	r3, r3, #3
 8003e84:	490e      	ldr	r1, [pc, #56]	; (8003ec0 <HAL_RCC_ClockConfig+0x1bc>)
 8003e86:	4313      	orrs	r3, r2
 8003e88:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003e8a:	f000 f821 	bl	8003ed0 <HAL_RCC_GetSysClockFreq>
 8003e8e:	4602      	mov	r2, r0
 8003e90:	4b0b      	ldr	r3, [pc, #44]	; (8003ec0 <HAL_RCC_ClockConfig+0x1bc>)
 8003e92:	689b      	ldr	r3, [r3, #8]
 8003e94:	091b      	lsrs	r3, r3, #4
 8003e96:	f003 030f 	and.w	r3, r3, #15
 8003e9a:	490a      	ldr	r1, [pc, #40]	; (8003ec4 <HAL_RCC_ClockConfig+0x1c0>)
 8003e9c:	5ccb      	ldrb	r3, [r1, r3]
 8003e9e:	fa22 f303 	lsr.w	r3, r2, r3
 8003ea2:	4a09      	ldr	r2, [pc, #36]	; (8003ec8 <HAL_RCC_ClockConfig+0x1c4>)
 8003ea4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8003ea6:	4b09      	ldr	r3, [pc, #36]	; (8003ecc <HAL_RCC_ClockConfig+0x1c8>)
 8003ea8:	681b      	ldr	r3, [r3, #0]
 8003eaa:	4618      	mov	r0, r3
 8003eac:	f7fe f894 	bl	8001fd8 <HAL_InitTick>

  return HAL_OK;
 8003eb0:	2300      	movs	r3, #0
}
 8003eb2:	4618      	mov	r0, r3
 8003eb4:	3710      	adds	r7, #16
 8003eb6:	46bd      	mov	sp, r7
 8003eb8:	bd80      	pop	{r7, pc}
 8003eba:	bf00      	nop
 8003ebc:	40023c00 	.word	0x40023c00
 8003ec0:	40023800 	.word	0x40023800
 8003ec4:	08005638 	.word	0x08005638
 8003ec8:	2000000c 	.word	0x2000000c
 8003ecc:	20000018 	.word	0x20000018

08003ed0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003ed0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003ed4:	b090      	sub	sp, #64	; 0x40
 8003ed6:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8003ed8:	2300      	movs	r3, #0
 8003eda:	637b      	str	r3, [r7, #52]	; 0x34
 8003edc:	2300      	movs	r3, #0
 8003ede:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003ee0:	2300      	movs	r3, #0
 8003ee2:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 8003ee4:	2300      	movs	r3, #0
 8003ee6:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003ee8:	4b59      	ldr	r3, [pc, #356]	; (8004050 <HAL_RCC_GetSysClockFreq+0x180>)
 8003eea:	689b      	ldr	r3, [r3, #8]
 8003eec:	f003 030c 	and.w	r3, r3, #12
 8003ef0:	2b08      	cmp	r3, #8
 8003ef2:	d00d      	beq.n	8003f10 <HAL_RCC_GetSysClockFreq+0x40>
 8003ef4:	2b08      	cmp	r3, #8
 8003ef6:	f200 80a1 	bhi.w	800403c <HAL_RCC_GetSysClockFreq+0x16c>
 8003efa:	2b00      	cmp	r3, #0
 8003efc:	d002      	beq.n	8003f04 <HAL_RCC_GetSysClockFreq+0x34>
 8003efe:	2b04      	cmp	r3, #4
 8003f00:	d003      	beq.n	8003f0a <HAL_RCC_GetSysClockFreq+0x3a>
 8003f02:	e09b      	b.n	800403c <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003f04:	4b53      	ldr	r3, [pc, #332]	; (8004054 <HAL_RCC_GetSysClockFreq+0x184>)
 8003f06:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 8003f08:	e09b      	b.n	8004042 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003f0a:	4b53      	ldr	r3, [pc, #332]	; (8004058 <HAL_RCC_GetSysClockFreq+0x188>)
 8003f0c:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8003f0e:	e098      	b.n	8004042 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003f10:	4b4f      	ldr	r3, [pc, #316]	; (8004050 <HAL_RCC_GetSysClockFreq+0x180>)
 8003f12:	685b      	ldr	r3, [r3, #4]
 8003f14:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003f18:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003f1a:	4b4d      	ldr	r3, [pc, #308]	; (8004050 <HAL_RCC_GetSysClockFreq+0x180>)
 8003f1c:	685b      	ldr	r3, [r3, #4]
 8003f1e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003f22:	2b00      	cmp	r3, #0
 8003f24:	d028      	beq.n	8003f78 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003f26:	4b4a      	ldr	r3, [pc, #296]	; (8004050 <HAL_RCC_GetSysClockFreq+0x180>)
 8003f28:	685b      	ldr	r3, [r3, #4]
 8003f2a:	099b      	lsrs	r3, r3, #6
 8003f2c:	2200      	movs	r2, #0
 8003f2e:	623b      	str	r3, [r7, #32]
 8003f30:	627a      	str	r2, [r7, #36]	; 0x24
 8003f32:	6a3b      	ldr	r3, [r7, #32]
 8003f34:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8003f38:	2100      	movs	r1, #0
 8003f3a:	4b47      	ldr	r3, [pc, #284]	; (8004058 <HAL_RCC_GetSysClockFreq+0x188>)
 8003f3c:	fb03 f201 	mul.w	r2, r3, r1
 8003f40:	2300      	movs	r3, #0
 8003f42:	fb00 f303 	mul.w	r3, r0, r3
 8003f46:	4413      	add	r3, r2
 8003f48:	4a43      	ldr	r2, [pc, #268]	; (8004058 <HAL_RCC_GetSysClockFreq+0x188>)
 8003f4a:	fba0 1202 	umull	r1, r2, r0, r2
 8003f4e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003f50:	460a      	mov	r2, r1
 8003f52:	62ba      	str	r2, [r7, #40]	; 0x28
 8003f54:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003f56:	4413      	add	r3, r2
 8003f58:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003f5a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003f5c:	2200      	movs	r2, #0
 8003f5e:	61bb      	str	r3, [r7, #24]
 8003f60:	61fa      	str	r2, [r7, #28]
 8003f62:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003f66:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8003f6a:	f7fc f991 	bl	8000290 <__aeabi_uldivmod>
 8003f6e:	4602      	mov	r2, r0
 8003f70:	460b      	mov	r3, r1
 8003f72:	4613      	mov	r3, r2
 8003f74:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003f76:	e053      	b.n	8004020 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003f78:	4b35      	ldr	r3, [pc, #212]	; (8004050 <HAL_RCC_GetSysClockFreq+0x180>)
 8003f7a:	685b      	ldr	r3, [r3, #4]
 8003f7c:	099b      	lsrs	r3, r3, #6
 8003f7e:	2200      	movs	r2, #0
 8003f80:	613b      	str	r3, [r7, #16]
 8003f82:	617a      	str	r2, [r7, #20]
 8003f84:	693b      	ldr	r3, [r7, #16]
 8003f86:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8003f8a:	f04f 0b00 	mov.w	fp, #0
 8003f8e:	4652      	mov	r2, sl
 8003f90:	465b      	mov	r3, fp
 8003f92:	f04f 0000 	mov.w	r0, #0
 8003f96:	f04f 0100 	mov.w	r1, #0
 8003f9a:	0159      	lsls	r1, r3, #5
 8003f9c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003fa0:	0150      	lsls	r0, r2, #5
 8003fa2:	4602      	mov	r2, r0
 8003fa4:	460b      	mov	r3, r1
 8003fa6:	ebb2 080a 	subs.w	r8, r2, sl
 8003faa:	eb63 090b 	sbc.w	r9, r3, fp
 8003fae:	f04f 0200 	mov.w	r2, #0
 8003fb2:	f04f 0300 	mov.w	r3, #0
 8003fb6:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8003fba:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8003fbe:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8003fc2:	ebb2 0408 	subs.w	r4, r2, r8
 8003fc6:	eb63 0509 	sbc.w	r5, r3, r9
 8003fca:	f04f 0200 	mov.w	r2, #0
 8003fce:	f04f 0300 	mov.w	r3, #0
 8003fd2:	00eb      	lsls	r3, r5, #3
 8003fd4:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003fd8:	00e2      	lsls	r2, r4, #3
 8003fda:	4614      	mov	r4, r2
 8003fdc:	461d      	mov	r5, r3
 8003fde:	eb14 030a 	adds.w	r3, r4, sl
 8003fe2:	603b      	str	r3, [r7, #0]
 8003fe4:	eb45 030b 	adc.w	r3, r5, fp
 8003fe8:	607b      	str	r3, [r7, #4]
 8003fea:	f04f 0200 	mov.w	r2, #0
 8003fee:	f04f 0300 	mov.w	r3, #0
 8003ff2:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003ff6:	4629      	mov	r1, r5
 8003ff8:	028b      	lsls	r3, r1, #10
 8003ffa:	4621      	mov	r1, r4
 8003ffc:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004000:	4621      	mov	r1, r4
 8004002:	028a      	lsls	r2, r1, #10
 8004004:	4610      	mov	r0, r2
 8004006:	4619      	mov	r1, r3
 8004008:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800400a:	2200      	movs	r2, #0
 800400c:	60bb      	str	r3, [r7, #8]
 800400e:	60fa      	str	r2, [r7, #12]
 8004010:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004014:	f7fc f93c 	bl	8000290 <__aeabi_uldivmod>
 8004018:	4602      	mov	r2, r0
 800401a:	460b      	mov	r3, r1
 800401c:	4613      	mov	r3, r2
 800401e:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8004020:	4b0b      	ldr	r3, [pc, #44]	; (8004050 <HAL_RCC_GetSysClockFreq+0x180>)
 8004022:	685b      	ldr	r3, [r3, #4]
 8004024:	0c1b      	lsrs	r3, r3, #16
 8004026:	f003 0303 	and.w	r3, r3, #3
 800402a:	3301      	adds	r3, #1
 800402c:	005b      	lsls	r3, r3, #1
 800402e:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 8004030:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8004032:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004034:	fbb2 f3f3 	udiv	r3, r2, r3
 8004038:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800403a:	e002      	b.n	8004042 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800403c:	4b05      	ldr	r3, [pc, #20]	; (8004054 <HAL_RCC_GetSysClockFreq+0x184>)
 800403e:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8004040:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004042:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8004044:	4618      	mov	r0, r3
 8004046:	3740      	adds	r7, #64	; 0x40
 8004048:	46bd      	mov	sp, r7
 800404a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800404e:	bf00      	nop
 8004050:	40023800 	.word	0x40023800
 8004054:	00f42400 	.word	0x00f42400
 8004058:	017d7840 	.word	0x017d7840

0800405c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800405c:	b480      	push	{r7}
 800405e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004060:	4b03      	ldr	r3, [pc, #12]	; (8004070 <HAL_RCC_GetHCLKFreq+0x14>)
 8004062:	681b      	ldr	r3, [r3, #0]
}
 8004064:	4618      	mov	r0, r3
 8004066:	46bd      	mov	sp, r7
 8004068:	f85d 7b04 	ldr.w	r7, [sp], #4
 800406c:	4770      	bx	lr
 800406e:	bf00      	nop
 8004070:	2000000c 	.word	0x2000000c

08004074 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004074:	b580      	push	{r7, lr}
 8004076:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8004078:	f7ff fff0 	bl	800405c <HAL_RCC_GetHCLKFreq>
 800407c:	4602      	mov	r2, r0
 800407e:	4b05      	ldr	r3, [pc, #20]	; (8004094 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004080:	689b      	ldr	r3, [r3, #8]
 8004082:	0a9b      	lsrs	r3, r3, #10
 8004084:	f003 0307 	and.w	r3, r3, #7
 8004088:	4903      	ldr	r1, [pc, #12]	; (8004098 <HAL_RCC_GetPCLK1Freq+0x24>)
 800408a:	5ccb      	ldrb	r3, [r1, r3]
 800408c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004090:	4618      	mov	r0, r3
 8004092:	bd80      	pop	{r7, pc}
 8004094:	40023800 	.word	0x40023800
 8004098:	08005648 	.word	0x08005648

0800409c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800409c:	b580      	push	{r7, lr}
 800409e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80040a0:	f7ff ffdc 	bl	800405c <HAL_RCC_GetHCLKFreq>
 80040a4:	4602      	mov	r2, r0
 80040a6:	4b05      	ldr	r3, [pc, #20]	; (80040bc <HAL_RCC_GetPCLK2Freq+0x20>)
 80040a8:	689b      	ldr	r3, [r3, #8]
 80040aa:	0b5b      	lsrs	r3, r3, #13
 80040ac:	f003 0307 	and.w	r3, r3, #7
 80040b0:	4903      	ldr	r1, [pc, #12]	; (80040c0 <HAL_RCC_GetPCLK2Freq+0x24>)
 80040b2:	5ccb      	ldrb	r3, [r1, r3]
 80040b4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80040b8:	4618      	mov	r0, r3
 80040ba:	bd80      	pop	{r7, pc}
 80040bc:	40023800 	.word	0x40023800
 80040c0:	08005648 	.word	0x08005648

080040c4 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80040c4:	b580      	push	{r7, lr}
 80040c6:	b082      	sub	sp, #8
 80040c8:	af00      	add	r7, sp, #0
 80040ca:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	2b00      	cmp	r3, #0
 80040d0:	d101      	bne.n	80040d6 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80040d2:	2301      	movs	r3, #1
 80040d4:	e07b      	b.n	80041ce <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040da:	2b00      	cmp	r3, #0
 80040dc:	d108      	bne.n	80040f0 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	685b      	ldr	r3, [r3, #4]
 80040e2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80040e6:	d009      	beq.n	80040fc <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	2200      	movs	r2, #0
 80040ec:	61da      	str	r2, [r3, #28]
 80040ee:	e005      	b.n	80040fc <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	2200      	movs	r2, #0
 80040f4:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	2200      	movs	r2, #0
 80040fa:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	2200      	movs	r2, #0
 8004100:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004108:	b2db      	uxtb	r3, r3
 800410a:	2b00      	cmp	r3, #0
 800410c:	d106      	bne.n	800411c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	2200      	movs	r2, #0
 8004112:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8004116:	6878      	ldr	r0, [r7, #4]
 8004118:	f7fc fff6 	bl	8001108 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	2202      	movs	r2, #2
 8004120:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	681b      	ldr	r3, [r3, #0]
 8004128:	681a      	ldr	r2, [r3, #0]
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	681b      	ldr	r3, [r3, #0]
 800412e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004132:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	685b      	ldr	r3, [r3, #4]
 8004138:	f403 7282 	and.w	r2, r3, #260	; 0x104
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	689b      	ldr	r3, [r3, #8]
 8004140:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8004144:	431a      	orrs	r2, r3
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	68db      	ldr	r3, [r3, #12]
 800414a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800414e:	431a      	orrs	r2, r3
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	691b      	ldr	r3, [r3, #16]
 8004154:	f003 0302 	and.w	r3, r3, #2
 8004158:	431a      	orrs	r2, r3
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	695b      	ldr	r3, [r3, #20]
 800415e:	f003 0301 	and.w	r3, r3, #1
 8004162:	431a      	orrs	r2, r3
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	699b      	ldr	r3, [r3, #24]
 8004168:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800416c:	431a      	orrs	r2, r3
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	69db      	ldr	r3, [r3, #28]
 8004172:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004176:	431a      	orrs	r2, r3
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	6a1b      	ldr	r3, [r3, #32]
 800417c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004180:	ea42 0103 	orr.w	r1, r2, r3
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004188:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	681b      	ldr	r3, [r3, #0]
 8004190:	430a      	orrs	r2, r1
 8004192:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	699b      	ldr	r3, [r3, #24]
 8004198:	0c1b      	lsrs	r3, r3, #16
 800419a:	f003 0104 	and.w	r1, r3, #4
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041a2:	f003 0210 	and.w	r2, r3, #16
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	681b      	ldr	r3, [r3, #0]
 80041aa:	430a      	orrs	r2, r1
 80041ac:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	681b      	ldr	r3, [r3, #0]
 80041b2:	69da      	ldr	r2, [r3, #28]
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	681b      	ldr	r3, [r3, #0]
 80041b8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80041bc:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	2200      	movs	r2, #0
 80041c2:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	2201      	movs	r2, #1
 80041c8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 80041cc:	2300      	movs	r3, #0
}
 80041ce:	4618      	mov	r0, r3
 80041d0:	3708      	adds	r7, #8
 80041d2:	46bd      	mov	sp, r7
 80041d4:	bd80      	pop	{r7, pc}

080041d6 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80041d6:	b580      	push	{r7, lr}
 80041d8:	b082      	sub	sp, #8
 80041da:	af00      	add	r7, sp, #0
 80041dc:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	2b00      	cmp	r3, #0
 80041e2:	d101      	bne.n	80041e8 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80041e4:	2301      	movs	r3, #1
 80041e6:	e041      	b.n	800426c <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80041ee:	b2db      	uxtb	r3, r3
 80041f0:	2b00      	cmp	r3, #0
 80041f2:	d106      	bne.n	8004202 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	2200      	movs	r2, #0
 80041f8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80041fc:	6878      	ldr	r0, [r7, #4]
 80041fe:	f7fc ffeb 	bl	80011d8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	2202      	movs	r2, #2
 8004206:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	681a      	ldr	r2, [r3, #0]
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	3304      	adds	r3, #4
 8004212:	4619      	mov	r1, r3
 8004214:	4610      	mov	r0, r2
 8004216:	f000 f887 	bl	8004328 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	2201      	movs	r2, #1
 800421e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	2201      	movs	r2, #1
 8004226:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	2201      	movs	r2, #1
 800422e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	2201      	movs	r2, #1
 8004236:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	2201      	movs	r2, #1
 800423e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	2201      	movs	r2, #1
 8004246:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	2201      	movs	r2, #1
 800424e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	2201      	movs	r2, #1
 8004256:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	2201      	movs	r2, #1
 800425e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	2201      	movs	r2, #1
 8004266:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800426a:	2300      	movs	r3, #0
}
 800426c:	4618      	mov	r0, r3
 800426e:	3708      	adds	r7, #8
 8004270:	46bd      	mov	sp, r7
 8004272:	bd80      	pop	{r7, pc}

08004274 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8004274:	b480      	push	{r7}
 8004276:	b085      	sub	sp, #20
 8004278:	af00      	add	r7, sp, #0
 800427a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004282:	b2db      	uxtb	r3, r3
 8004284:	2b01      	cmp	r3, #1
 8004286:	d001      	beq.n	800428c <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8004288:	2301      	movs	r3, #1
 800428a:	e03c      	b.n	8004306 <HAL_TIM_Base_Start+0x92>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	2202      	movs	r2, #2
 8004290:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	681b      	ldr	r3, [r3, #0]
 8004298:	4a1e      	ldr	r2, [pc, #120]	; (8004314 <HAL_TIM_Base_Start+0xa0>)
 800429a:	4293      	cmp	r3, r2
 800429c:	d018      	beq.n	80042d0 <HAL_TIM_Base_Start+0x5c>
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	681b      	ldr	r3, [r3, #0]
 80042a2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80042a6:	d013      	beq.n	80042d0 <HAL_TIM_Base_Start+0x5c>
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	681b      	ldr	r3, [r3, #0]
 80042ac:	4a1a      	ldr	r2, [pc, #104]	; (8004318 <HAL_TIM_Base_Start+0xa4>)
 80042ae:	4293      	cmp	r3, r2
 80042b0:	d00e      	beq.n	80042d0 <HAL_TIM_Base_Start+0x5c>
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	681b      	ldr	r3, [r3, #0]
 80042b6:	4a19      	ldr	r2, [pc, #100]	; (800431c <HAL_TIM_Base_Start+0xa8>)
 80042b8:	4293      	cmp	r3, r2
 80042ba:	d009      	beq.n	80042d0 <HAL_TIM_Base_Start+0x5c>
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	681b      	ldr	r3, [r3, #0]
 80042c0:	4a17      	ldr	r2, [pc, #92]	; (8004320 <HAL_TIM_Base_Start+0xac>)
 80042c2:	4293      	cmp	r3, r2
 80042c4:	d004      	beq.n	80042d0 <HAL_TIM_Base_Start+0x5c>
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	681b      	ldr	r3, [r3, #0]
 80042ca:	4a16      	ldr	r2, [pc, #88]	; (8004324 <HAL_TIM_Base_Start+0xb0>)
 80042cc:	4293      	cmp	r3, r2
 80042ce:	d111      	bne.n	80042f4 <HAL_TIM_Base_Start+0x80>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	681b      	ldr	r3, [r3, #0]
 80042d4:	689b      	ldr	r3, [r3, #8]
 80042d6:	f003 0307 	and.w	r3, r3, #7
 80042da:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80042dc:	68fb      	ldr	r3, [r7, #12]
 80042de:	2b06      	cmp	r3, #6
 80042e0:	d010      	beq.n	8004304 <HAL_TIM_Base_Start+0x90>
    {
      __HAL_TIM_ENABLE(htim);
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	681b      	ldr	r3, [r3, #0]
 80042e6:	681a      	ldr	r2, [r3, #0]
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	681b      	ldr	r3, [r3, #0]
 80042ec:	f042 0201 	orr.w	r2, r2, #1
 80042f0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80042f2:	e007      	b.n	8004304 <HAL_TIM_Base_Start+0x90>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	681b      	ldr	r3, [r3, #0]
 80042f8:	681a      	ldr	r2, [r3, #0]
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	681b      	ldr	r3, [r3, #0]
 80042fe:	f042 0201 	orr.w	r2, r2, #1
 8004302:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004304:	2300      	movs	r3, #0
}
 8004306:	4618      	mov	r0, r3
 8004308:	3714      	adds	r7, #20
 800430a:	46bd      	mov	sp, r7
 800430c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004310:	4770      	bx	lr
 8004312:	bf00      	nop
 8004314:	40010000 	.word	0x40010000
 8004318:	40000400 	.word	0x40000400
 800431c:	40000800 	.word	0x40000800
 8004320:	40000c00 	.word	0x40000c00
 8004324:	40014000 	.word	0x40014000

08004328 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004328:	b480      	push	{r7}
 800432a:	b085      	sub	sp, #20
 800432c:	af00      	add	r7, sp, #0
 800432e:	6078      	str	r0, [r7, #4]
 8004330:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	681b      	ldr	r3, [r3, #0]
 8004336:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	4a34      	ldr	r2, [pc, #208]	; (800440c <TIM_Base_SetConfig+0xe4>)
 800433c:	4293      	cmp	r3, r2
 800433e:	d00f      	beq.n	8004360 <TIM_Base_SetConfig+0x38>
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004346:	d00b      	beq.n	8004360 <TIM_Base_SetConfig+0x38>
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	4a31      	ldr	r2, [pc, #196]	; (8004410 <TIM_Base_SetConfig+0xe8>)
 800434c:	4293      	cmp	r3, r2
 800434e:	d007      	beq.n	8004360 <TIM_Base_SetConfig+0x38>
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	4a30      	ldr	r2, [pc, #192]	; (8004414 <TIM_Base_SetConfig+0xec>)
 8004354:	4293      	cmp	r3, r2
 8004356:	d003      	beq.n	8004360 <TIM_Base_SetConfig+0x38>
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	4a2f      	ldr	r2, [pc, #188]	; (8004418 <TIM_Base_SetConfig+0xf0>)
 800435c:	4293      	cmp	r3, r2
 800435e:	d108      	bne.n	8004372 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004360:	68fb      	ldr	r3, [r7, #12]
 8004362:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004366:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004368:	683b      	ldr	r3, [r7, #0]
 800436a:	685b      	ldr	r3, [r3, #4]
 800436c:	68fa      	ldr	r2, [r7, #12]
 800436e:	4313      	orrs	r3, r2
 8004370:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	4a25      	ldr	r2, [pc, #148]	; (800440c <TIM_Base_SetConfig+0xe4>)
 8004376:	4293      	cmp	r3, r2
 8004378:	d01b      	beq.n	80043b2 <TIM_Base_SetConfig+0x8a>
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004380:	d017      	beq.n	80043b2 <TIM_Base_SetConfig+0x8a>
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	4a22      	ldr	r2, [pc, #136]	; (8004410 <TIM_Base_SetConfig+0xe8>)
 8004386:	4293      	cmp	r3, r2
 8004388:	d013      	beq.n	80043b2 <TIM_Base_SetConfig+0x8a>
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	4a21      	ldr	r2, [pc, #132]	; (8004414 <TIM_Base_SetConfig+0xec>)
 800438e:	4293      	cmp	r3, r2
 8004390:	d00f      	beq.n	80043b2 <TIM_Base_SetConfig+0x8a>
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	4a20      	ldr	r2, [pc, #128]	; (8004418 <TIM_Base_SetConfig+0xf0>)
 8004396:	4293      	cmp	r3, r2
 8004398:	d00b      	beq.n	80043b2 <TIM_Base_SetConfig+0x8a>
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	4a1f      	ldr	r2, [pc, #124]	; (800441c <TIM_Base_SetConfig+0xf4>)
 800439e:	4293      	cmp	r3, r2
 80043a0:	d007      	beq.n	80043b2 <TIM_Base_SetConfig+0x8a>
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	4a1e      	ldr	r2, [pc, #120]	; (8004420 <TIM_Base_SetConfig+0xf8>)
 80043a6:	4293      	cmp	r3, r2
 80043a8:	d003      	beq.n	80043b2 <TIM_Base_SetConfig+0x8a>
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	4a1d      	ldr	r2, [pc, #116]	; (8004424 <TIM_Base_SetConfig+0xfc>)
 80043ae:	4293      	cmp	r3, r2
 80043b0:	d108      	bne.n	80043c4 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80043b2:	68fb      	ldr	r3, [r7, #12]
 80043b4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80043b8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80043ba:	683b      	ldr	r3, [r7, #0]
 80043bc:	68db      	ldr	r3, [r3, #12]
 80043be:	68fa      	ldr	r2, [r7, #12]
 80043c0:	4313      	orrs	r3, r2
 80043c2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80043c4:	68fb      	ldr	r3, [r7, #12]
 80043c6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80043ca:	683b      	ldr	r3, [r7, #0]
 80043cc:	695b      	ldr	r3, [r3, #20]
 80043ce:	4313      	orrs	r3, r2
 80043d0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	68fa      	ldr	r2, [r7, #12]
 80043d6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80043d8:	683b      	ldr	r3, [r7, #0]
 80043da:	689a      	ldr	r2, [r3, #8]
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80043e0:	683b      	ldr	r3, [r7, #0]
 80043e2:	681a      	ldr	r2, [r3, #0]
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	4a08      	ldr	r2, [pc, #32]	; (800440c <TIM_Base_SetConfig+0xe4>)
 80043ec:	4293      	cmp	r3, r2
 80043ee:	d103      	bne.n	80043f8 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80043f0:	683b      	ldr	r3, [r7, #0]
 80043f2:	691a      	ldr	r2, [r3, #16]
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	2201      	movs	r2, #1
 80043fc:	615a      	str	r2, [r3, #20]
}
 80043fe:	bf00      	nop
 8004400:	3714      	adds	r7, #20
 8004402:	46bd      	mov	sp, r7
 8004404:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004408:	4770      	bx	lr
 800440a:	bf00      	nop
 800440c:	40010000 	.word	0x40010000
 8004410:	40000400 	.word	0x40000400
 8004414:	40000800 	.word	0x40000800
 8004418:	40000c00 	.word	0x40000c00
 800441c:	40014000 	.word	0x40014000
 8004420:	40014400 	.word	0x40014400
 8004424:	40014800 	.word	0x40014800

08004428 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004428:	b580      	push	{r7, lr}
 800442a:	b082      	sub	sp, #8
 800442c:	af00      	add	r7, sp, #0
 800442e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	2b00      	cmp	r3, #0
 8004434:	d101      	bne.n	800443a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004436:	2301      	movs	r3, #1
 8004438:	e03f      	b.n	80044ba <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004440:	b2db      	uxtb	r3, r3
 8004442:	2b00      	cmp	r3, #0
 8004444:	d106      	bne.n	8004454 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	2200      	movs	r2, #0
 800444a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800444e:	6878      	ldr	r0, [r7, #4]
 8004450:	f7fc fee4 	bl	800121c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	2224      	movs	r2, #36	; 0x24
 8004458:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	681b      	ldr	r3, [r3, #0]
 8004460:	68da      	ldr	r2, [r3, #12]
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	681b      	ldr	r3, [r3, #0]
 8004466:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800446a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800446c:	6878      	ldr	r0, [r7, #4]
 800446e:	f000 f929 	bl	80046c4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	681b      	ldr	r3, [r3, #0]
 8004476:	691a      	ldr	r2, [r3, #16]
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	681b      	ldr	r3, [r3, #0]
 800447c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004480:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	681b      	ldr	r3, [r3, #0]
 8004486:	695a      	ldr	r2, [r3, #20]
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	681b      	ldr	r3, [r3, #0]
 800448c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004490:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	681b      	ldr	r3, [r3, #0]
 8004496:	68da      	ldr	r2, [r3, #12]
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	681b      	ldr	r3, [r3, #0]
 800449c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80044a0:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	2200      	movs	r2, #0
 80044a6:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	2220      	movs	r2, #32
 80044ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	2220      	movs	r2, #32
 80044b4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80044b8:	2300      	movs	r3, #0
}
 80044ba:	4618      	mov	r0, r3
 80044bc:	3708      	adds	r7, #8
 80044be:	46bd      	mov	sp, r7
 80044c0:	bd80      	pop	{r7, pc}

080044c2 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80044c2:	b580      	push	{r7, lr}
 80044c4:	b08a      	sub	sp, #40	; 0x28
 80044c6:	af02      	add	r7, sp, #8
 80044c8:	60f8      	str	r0, [r7, #12]
 80044ca:	60b9      	str	r1, [r7, #8]
 80044cc:	603b      	str	r3, [r7, #0]
 80044ce:	4613      	mov	r3, r2
 80044d0:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80044d2:	2300      	movs	r3, #0
 80044d4:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80044d6:	68fb      	ldr	r3, [r7, #12]
 80044d8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80044dc:	b2db      	uxtb	r3, r3
 80044de:	2b20      	cmp	r3, #32
 80044e0:	d17c      	bne.n	80045dc <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 80044e2:	68bb      	ldr	r3, [r7, #8]
 80044e4:	2b00      	cmp	r3, #0
 80044e6:	d002      	beq.n	80044ee <HAL_UART_Transmit+0x2c>
 80044e8:	88fb      	ldrh	r3, [r7, #6]
 80044ea:	2b00      	cmp	r3, #0
 80044ec:	d101      	bne.n	80044f2 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80044ee:	2301      	movs	r3, #1
 80044f0:	e075      	b.n	80045de <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80044f2:	68fb      	ldr	r3, [r7, #12]
 80044f4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80044f8:	2b01      	cmp	r3, #1
 80044fa:	d101      	bne.n	8004500 <HAL_UART_Transmit+0x3e>
 80044fc:	2302      	movs	r3, #2
 80044fe:	e06e      	b.n	80045de <HAL_UART_Transmit+0x11c>
 8004500:	68fb      	ldr	r3, [r7, #12]
 8004502:	2201      	movs	r2, #1
 8004504:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004508:	68fb      	ldr	r3, [r7, #12]
 800450a:	2200      	movs	r2, #0
 800450c:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800450e:	68fb      	ldr	r3, [r7, #12]
 8004510:	2221      	movs	r2, #33	; 0x21
 8004512:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004516:	f7fd fda3 	bl	8002060 <HAL_GetTick>
 800451a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800451c:	68fb      	ldr	r3, [r7, #12]
 800451e:	88fa      	ldrh	r2, [r7, #6]
 8004520:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8004522:	68fb      	ldr	r3, [r7, #12]
 8004524:	88fa      	ldrh	r2, [r7, #6]
 8004526:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004528:	68fb      	ldr	r3, [r7, #12]
 800452a:	689b      	ldr	r3, [r3, #8]
 800452c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004530:	d108      	bne.n	8004544 <HAL_UART_Transmit+0x82>
 8004532:	68fb      	ldr	r3, [r7, #12]
 8004534:	691b      	ldr	r3, [r3, #16]
 8004536:	2b00      	cmp	r3, #0
 8004538:	d104      	bne.n	8004544 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 800453a:	2300      	movs	r3, #0
 800453c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800453e:	68bb      	ldr	r3, [r7, #8]
 8004540:	61bb      	str	r3, [r7, #24]
 8004542:	e003      	b.n	800454c <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8004544:	68bb      	ldr	r3, [r7, #8]
 8004546:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004548:	2300      	movs	r3, #0
 800454a:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800454c:	68fb      	ldr	r3, [r7, #12]
 800454e:	2200      	movs	r2, #0
 8004550:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8004554:	e02a      	b.n	80045ac <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004556:	683b      	ldr	r3, [r7, #0]
 8004558:	9300      	str	r3, [sp, #0]
 800455a:	697b      	ldr	r3, [r7, #20]
 800455c:	2200      	movs	r2, #0
 800455e:	2180      	movs	r1, #128	; 0x80
 8004560:	68f8      	ldr	r0, [r7, #12]
 8004562:	f000 f840 	bl	80045e6 <UART_WaitOnFlagUntilTimeout>
 8004566:	4603      	mov	r3, r0
 8004568:	2b00      	cmp	r3, #0
 800456a:	d001      	beq.n	8004570 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 800456c:	2303      	movs	r3, #3
 800456e:	e036      	b.n	80045de <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8004570:	69fb      	ldr	r3, [r7, #28]
 8004572:	2b00      	cmp	r3, #0
 8004574:	d10b      	bne.n	800458e <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004576:	69bb      	ldr	r3, [r7, #24]
 8004578:	881b      	ldrh	r3, [r3, #0]
 800457a:	461a      	mov	r2, r3
 800457c:	68fb      	ldr	r3, [r7, #12]
 800457e:	681b      	ldr	r3, [r3, #0]
 8004580:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004584:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8004586:	69bb      	ldr	r3, [r7, #24]
 8004588:	3302      	adds	r3, #2
 800458a:	61bb      	str	r3, [r7, #24]
 800458c:	e007      	b.n	800459e <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800458e:	69fb      	ldr	r3, [r7, #28]
 8004590:	781a      	ldrb	r2, [r3, #0]
 8004592:	68fb      	ldr	r3, [r7, #12]
 8004594:	681b      	ldr	r3, [r3, #0]
 8004596:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8004598:	69fb      	ldr	r3, [r7, #28]
 800459a:	3301      	adds	r3, #1
 800459c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800459e:	68fb      	ldr	r3, [r7, #12]
 80045a0:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80045a2:	b29b      	uxth	r3, r3
 80045a4:	3b01      	subs	r3, #1
 80045a6:	b29a      	uxth	r2, r3
 80045a8:	68fb      	ldr	r3, [r7, #12]
 80045aa:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80045ac:	68fb      	ldr	r3, [r7, #12]
 80045ae:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80045b0:	b29b      	uxth	r3, r3
 80045b2:	2b00      	cmp	r3, #0
 80045b4:	d1cf      	bne.n	8004556 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80045b6:	683b      	ldr	r3, [r7, #0]
 80045b8:	9300      	str	r3, [sp, #0]
 80045ba:	697b      	ldr	r3, [r7, #20]
 80045bc:	2200      	movs	r2, #0
 80045be:	2140      	movs	r1, #64	; 0x40
 80045c0:	68f8      	ldr	r0, [r7, #12]
 80045c2:	f000 f810 	bl	80045e6 <UART_WaitOnFlagUntilTimeout>
 80045c6:	4603      	mov	r3, r0
 80045c8:	2b00      	cmp	r3, #0
 80045ca:	d001      	beq.n	80045d0 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 80045cc:	2303      	movs	r3, #3
 80045ce:	e006      	b.n	80045de <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80045d0:	68fb      	ldr	r3, [r7, #12]
 80045d2:	2220      	movs	r2, #32
 80045d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 80045d8:	2300      	movs	r3, #0
 80045da:	e000      	b.n	80045de <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 80045dc:	2302      	movs	r3, #2
  }
}
 80045de:	4618      	mov	r0, r3
 80045e0:	3720      	adds	r7, #32
 80045e2:	46bd      	mov	sp, r7
 80045e4:	bd80      	pop	{r7, pc}

080045e6 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80045e6:	b580      	push	{r7, lr}
 80045e8:	b090      	sub	sp, #64	; 0x40
 80045ea:	af00      	add	r7, sp, #0
 80045ec:	60f8      	str	r0, [r7, #12]
 80045ee:	60b9      	str	r1, [r7, #8]
 80045f0:	603b      	str	r3, [r7, #0]
 80045f2:	4613      	mov	r3, r2
 80045f4:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80045f6:	e050      	b.n	800469a <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80045f8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80045fa:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80045fe:	d04c      	beq.n	800469a <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8004600:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004602:	2b00      	cmp	r3, #0
 8004604:	d007      	beq.n	8004616 <UART_WaitOnFlagUntilTimeout+0x30>
 8004606:	f7fd fd2b 	bl	8002060 <HAL_GetTick>
 800460a:	4602      	mov	r2, r0
 800460c:	683b      	ldr	r3, [r7, #0]
 800460e:	1ad3      	subs	r3, r2, r3
 8004610:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004612:	429a      	cmp	r2, r3
 8004614:	d241      	bcs.n	800469a <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004616:	68fb      	ldr	r3, [r7, #12]
 8004618:	681b      	ldr	r3, [r3, #0]
 800461a:	330c      	adds	r3, #12
 800461c:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800461e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004620:	e853 3f00 	ldrex	r3, [r3]
 8004624:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004626:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004628:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800462c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800462e:	68fb      	ldr	r3, [r7, #12]
 8004630:	681b      	ldr	r3, [r3, #0]
 8004632:	330c      	adds	r3, #12
 8004634:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8004636:	637a      	str	r2, [r7, #52]	; 0x34
 8004638:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800463a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800463c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800463e:	e841 2300 	strex	r3, r2, [r1]
 8004642:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8004644:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004646:	2b00      	cmp	r3, #0
 8004648:	d1e5      	bne.n	8004616 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800464a:	68fb      	ldr	r3, [r7, #12]
 800464c:	681b      	ldr	r3, [r3, #0]
 800464e:	3314      	adds	r3, #20
 8004650:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004652:	697b      	ldr	r3, [r7, #20]
 8004654:	e853 3f00 	ldrex	r3, [r3]
 8004658:	613b      	str	r3, [r7, #16]
   return(result);
 800465a:	693b      	ldr	r3, [r7, #16]
 800465c:	f023 0301 	bic.w	r3, r3, #1
 8004660:	63bb      	str	r3, [r7, #56]	; 0x38
 8004662:	68fb      	ldr	r3, [r7, #12]
 8004664:	681b      	ldr	r3, [r3, #0]
 8004666:	3314      	adds	r3, #20
 8004668:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800466a:	623a      	str	r2, [r7, #32]
 800466c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800466e:	69f9      	ldr	r1, [r7, #28]
 8004670:	6a3a      	ldr	r2, [r7, #32]
 8004672:	e841 2300 	strex	r3, r2, [r1]
 8004676:	61bb      	str	r3, [r7, #24]
   return(result);
 8004678:	69bb      	ldr	r3, [r7, #24]
 800467a:	2b00      	cmp	r3, #0
 800467c:	d1e5      	bne.n	800464a <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 800467e:	68fb      	ldr	r3, [r7, #12]
 8004680:	2220      	movs	r2, #32
 8004682:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8004686:	68fb      	ldr	r3, [r7, #12]
 8004688:	2220      	movs	r2, #32
 800468a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800468e:	68fb      	ldr	r3, [r7, #12]
 8004690:	2200      	movs	r2, #0
 8004692:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8004696:	2303      	movs	r3, #3
 8004698:	e00f      	b.n	80046ba <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800469a:	68fb      	ldr	r3, [r7, #12]
 800469c:	681b      	ldr	r3, [r3, #0]
 800469e:	681a      	ldr	r2, [r3, #0]
 80046a0:	68bb      	ldr	r3, [r7, #8]
 80046a2:	4013      	ands	r3, r2
 80046a4:	68ba      	ldr	r2, [r7, #8]
 80046a6:	429a      	cmp	r2, r3
 80046a8:	bf0c      	ite	eq
 80046aa:	2301      	moveq	r3, #1
 80046ac:	2300      	movne	r3, #0
 80046ae:	b2db      	uxtb	r3, r3
 80046b0:	461a      	mov	r2, r3
 80046b2:	79fb      	ldrb	r3, [r7, #7]
 80046b4:	429a      	cmp	r2, r3
 80046b6:	d09f      	beq.n	80045f8 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80046b8:	2300      	movs	r3, #0
}
 80046ba:	4618      	mov	r0, r3
 80046bc:	3740      	adds	r7, #64	; 0x40
 80046be:	46bd      	mov	sp, r7
 80046c0:	bd80      	pop	{r7, pc}
	...

080046c4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80046c4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80046c8:	b0c0      	sub	sp, #256	; 0x100
 80046ca:	af00      	add	r7, sp, #0
 80046cc:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80046d0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80046d4:	681b      	ldr	r3, [r3, #0]
 80046d6:	691b      	ldr	r3, [r3, #16]
 80046d8:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80046dc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80046e0:	68d9      	ldr	r1, [r3, #12]
 80046e2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80046e6:	681a      	ldr	r2, [r3, #0]
 80046e8:	ea40 0301 	orr.w	r3, r0, r1
 80046ec:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80046ee:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80046f2:	689a      	ldr	r2, [r3, #8]
 80046f4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80046f8:	691b      	ldr	r3, [r3, #16]
 80046fa:	431a      	orrs	r2, r3
 80046fc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004700:	695b      	ldr	r3, [r3, #20]
 8004702:	431a      	orrs	r2, r3
 8004704:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004708:	69db      	ldr	r3, [r3, #28]
 800470a:	4313      	orrs	r3, r2
 800470c:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8004710:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004714:	681b      	ldr	r3, [r3, #0]
 8004716:	68db      	ldr	r3, [r3, #12]
 8004718:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 800471c:	f021 010c 	bic.w	r1, r1, #12
 8004720:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004724:	681a      	ldr	r2, [r3, #0]
 8004726:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800472a:	430b      	orrs	r3, r1
 800472c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800472e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004732:	681b      	ldr	r3, [r3, #0]
 8004734:	695b      	ldr	r3, [r3, #20]
 8004736:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800473a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800473e:	6999      	ldr	r1, [r3, #24]
 8004740:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004744:	681a      	ldr	r2, [r3, #0]
 8004746:	ea40 0301 	orr.w	r3, r0, r1
 800474a:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800474c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004750:	681a      	ldr	r2, [r3, #0]
 8004752:	4b8f      	ldr	r3, [pc, #572]	; (8004990 <UART_SetConfig+0x2cc>)
 8004754:	429a      	cmp	r2, r3
 8004756:	d005      	beq.n	8004764 <UART_SetConfig+0xa0>
 8004758:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800475c:	681a      	ldr	r2, [r3, #0]
 800475e:	4b8d      	ldr	r3, [pc, #564]	; (8004994 <UART_SetConfig+0x2d0>)
 8004760:	429a      	cmp	r2, r3
 8004762:	d104      	bne.n	800476e <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8004764:	f7ff fc9a 	bl	800409c <HAL_RCC_GetPCLK2Freq>
 8004768:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 800476c:	e003      	b.n	8004776 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800476e:	f7ff fc81 	bl	8004074 <HAL_RCC_GetPCLK1Freq>
 8004772:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004776:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800477a:	69db      	ldr	r3, [r3, #28]
 800477c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004780:	f040 810c 	bne.w	800499c <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004784:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004788:	2200      	movs	r2, #0
 800478a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800478e:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8004792:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8004796:	4622      	mov	r2, r4
 8004798:	462b      	mov	r3, r5
 800479a:	1891      	adds	r1, r2, r2
 800479c:	65b9      	str	r1, [r7, #88]	; 0x58
 800479e:	415b      	adcs	r3, r3
 80047a0:	65fb      	str	r3, [r7, #92]	; 0x5c
 80047a2:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80047a6:	4621      	mov	r1, r4
 80047a8:	eb12 0801 	adds.w	r8, r2, r1
 80047ac:	4629      	mov	r1, r5
 80047ae:	eb43 0901 	adc.w	r9, r3, r1
 80047b2:	f04f 0200 	mov.w	r2, #0
 80047b6:	f04f 0300 	mov.w	r3, #0
 80047ba:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80047be:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80047c2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80047c6:	4690      	mov	r8, r2
 80047c8:	4699      	mov	r9, r3
 80047ca:	4623      	mov	r3, r4
 80047cc:	eb18 0303 	adds.w	r3, r8, r3
 80047d0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80047d4:	462b      	mov	r3, r5
 80047d6:	eb49 0303 	adc.w	r3, r9, r3
 80047da:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80047de:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80047e2:	685b      	ldr	r3, [r3, #4]
 80047e4:	2200      	movs	r2, #0
 80047e6:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80047ea:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 80047ee:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 80047f2:	460b      	mov	r3, r1
 80047f4:	18db      	adds	r3, r3, r3
 80047f6:	653b      	str	r3, [r7, #80]	; 0x50
 80047f8:	4613      	mov	r3, r2
 80047fa:	eb42 0303 	adc.w	r3, r2, r3
 80047fe:	657b      	str	r3, [r7, #84]	; 0x54
 8004800:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8004804:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8004808:	f7fb fd42 	bl	8000290 <__aeabi_uldivmod>
 800480c:	4602      	mov	r2, r0
 800480e:	460b      	mov	r3, r1
 8004810:	4b61      	ldr	r3, [pc, #388]	; (8004998 <UART_SetConfig+0x2d4>)
 8004812:	fba3 2302 	umull	r2, r3, r3, r2
 8004816:	095b      	lsrs	r3, r3, #5
 8004818:	011c      	lsls	r4, r3, #4
 800481a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800481e:	2200      	movs	r2, #0
 8004820:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8004824:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8004828:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 800482c:	4642      	mov	r2, r8
 800482e:	464b      	mov	r3, r9
 8004830:	1891      	adds	r1, r2, r2
 8004832:	64b9      	str	r1, [r7, #72]	; 0x48
 8004834:	415b      	adcs	r3, r3
 8004836:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004838:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800483c:	4641      	mov	r1, r8
 800483e:	eb12 0a01 	adds.w	sl, r2, r1
 8004842:	4649      	mov	r1, r9
 8004844:	eb43 0b01 	adc.w	fp, r3, r1
 8004848:	f04f 0200 	mov.w	r2, #0
 800484c:	f04f 0300 	mov.w	r3, #0
 8004850:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8004854:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8004858:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800485c:	4692      	mov	sl, r2
 800485e:	469b      	mov	fp, r3
 8004860:	4643      	mov	r3, r8
 8004862:	eb1a 0303 	adds.w	r3, sl, r3
 8004866:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800486a:	464b      	mov	r3, r9
 800486c:	eb4b 0303 	adc.w	r3, fp, r3
 8004870:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8004874:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004878:	685b      	ldr	r3, [r3, #4]
 800487a:	2200      	movs	r2, #0
 800487c:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8004880:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8004884:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8004888:	460b      	mov	r3, r1
 800488a:	18db      	adds	r3, r3, r3
 800488c:	643b      	str	r3, [r7, #64]	; 0x40
 800488e:	4613      	mov	r3, r2
 8004890:	eb42 0303 	adc.w	r3, r2, r3
 8004894:	647b      	str	r3, [r7, #68]	; 0x44
 8004896:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800489a:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 800489e:	f7fb fcf7 	bl	8000290 <__aeabi_uldivmod>
 80048a2:	4602      	mov	r2, r0
 80048a4:	460b      	mov	r3, r1
 80048a6:	4611      	mov	r1, r2
 80048a8:	4b3b      	ldr	r3, [pc, #236]	; (8004998 <UART_SetConfig+0x2d4>)
 80048aa:	fba3 2301 	umull	r2, r3, r3, r1
 80048ae:	095b      	lsrs	r3, r3, #5
 80048b0:	2264      	movs	r2, #100	; 0x64
 80048b2:	fb02 f303 	mul.w	r3, r2, r3
 80048b6:	1acb      	subs	r3, r1, r3
 80048b8:	00db      	lsls	r3, r3, #3
 80048ba:	f103 0232 	add.w	r2, r3, #50	; 0x32
 80048be:	4b36      	ldr	r3, [pc, #216]	; (8004998 <UART_SetConfig+0x2d4>)
 80048c0:	fba3 2302 	umull	r2, r3, r3, r2
 80048c4:	095b      	lsrs	r3, r3, #5
 80048c6:	005b      	lsls	r3, r3, #1
 80048c8:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80048cc:	441c      	add	r4, r3
 80048ce:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80048d2:	2200      	movs	r2, #0
 80048d4:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80048d8:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 80048dc:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 80048e0:	4642      	mov	r2, r8
 80048e2:	464b      	mov	r3, r9
 80048e4:	1891      	adds	r1, r2, r2
 80048e6:	63b9      	str	r1, [r7, #56]	; 0x38
 80048e8:	415b      	adcs	r3, r3
 80048ea:	63fb      	str	r3, [r7, #60]	; 0x3c
 80048ec:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80048f0:	4641      	mov	r1, r8
 80048f2:	1851      	adds	r1, r2, r1
 80048f4:	6339      	str	r1, [r7, #48]	; 0x30
 80048f6:	4649      	mov	r1, r9
 80048f8:	414b      	adcs	r3, r1
 80048fa:	637b      	str	r3, [r7, #52]	; 0x34
 80048fc:	f04f 0200 	mov.w	r2, #0
 8004900:	f04f 0300 	mov.w	r3, #0
 8004904:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8004908:	4659      	mov	r1, fp
 800490a:	00cb      	lsls	r3, r1, #3
 800490c:	4651      	mov	r1, sl
 800490e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004912:	4651      	mov	r1, sl
 8004914:	00ca      	lsls	r2, r1, #3
 8004916:	4610      	mov	r0, r2
 8004918:	4619      	mov	r1, r3
 800491a:	4603      	mov	r3, r0
 800491c:	4642      	mov	r2, r8
 800491e:	189b      	adds	r3, r3, r2
 8004920:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8004924:	464b      	mov	r3, r9
 8004926:	460a      	mov	r2, r1
 8004928:	eb42 0303 	adc.w	r3, r2, r3
 800492c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8004930:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004934:	685b      	ldr	r3, [r3, #4]
 8004936:	2200      	movs	r2, #0
 8004938:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800493c:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8004940:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8004944:	460b      	mov	r3, r1
 8004946:	18db      	adds	r3, r3, r3
 8004948:	62bb      	str	r3, [r7, #40]	; 0x28
 800494a:	4613      	mov	r3, r2
 800494c:	eb42 0303 	adc.w	r3, r2, r3
 8004950:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004952:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8004956:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 800495a:	f7fb fc99 	bl	8000290 <__aeabi_uldivmod>
 800495e:	4602      	mov	r2, r0
 8004960:	460b      	mov	r3, r1
 8004962:	4b0d      	ldr	r3, [pc, #52]	; (8004998 <UART_SetConfig+0x2d4>)
 8004964:	fba3 1302 	umull	r1, r3, r3, r2
 8004968:	095b      	lsrs	r3, r3, #5
 800496a:	2164      	movs	r1, #100	; 0x64
 800496c:	fb01 f303 	mul.w	r3, r1, r3
 8004970:	1ad3      	subs	r3, r2, r3
 8004972:	00db      	lsls	r3, r3, #3
 8004974:	3332      	adds	r3, #50	; 0x32
 8004976:	4a08      	ldr	r2, [pc, #32]	; (8004998 <UART_SetConfig+0x2d4>)
 8004978:	fba2 2303 	umull	r2, r3, r2, r3
 800497c:	095b      	lsrs	r3, r3, #5
 800497e:	f003 0207 	and.w	r2, r3, #7
 8004982:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004986:	681b      	ldr	r3, [r3, #0]
 8004988:	4422      	add	r2, r4
 800498a:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800498c:	e105      	b.n	8004b9a <UART_SetConfig+0x4d6>
 800498e:	bf00      	nop
 8004990:	40011000 	.word	0x40011000
 8004994:	40011400 	.word	0x40011400
 8004998:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800499c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80049a0:	2200      	movs	r2, #0
 80049a2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80049a6:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 80049aa:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 80049ae:	4642      	mov	r2, r8
 80049b0:	464b      	mov	r3, r9
 80049b2:	1891      	adds	r1, r2, r2
 80049b4:	6239      	str	r1, [r7, #32]
 80049b6:	415b      	adcs	r3, r3
 80049b8:	627b      	str	r3, [r7, #36]	; 0x24
 80049ba:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80049be:	4641      	mov	r1, r8
 80049c0:	1854      	adds	r4, r2, r1
 80049c2:	4649      	mov	r1, r9
 80049c4:	eb43 0501 	adc.w	r5, r3, r1
 80049c8:	f04f 0200 	mov.w	r2, #0
 80049cc:	f04f 0300 	mov.w	r3, #0
 80049d0:	00eb      	lsls	r3, r5, #3
 80049d2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80049d6:	00e2      	lsls	r2, r4, #3
 80049d8:	4614      	mov	r4, r2
 80049da:	461d      	mov	r5, r3
 80049dc:	4643      	mov	r3, r8
 80049de:	18e3      	adds	r3, r4, r3
 80049e0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80049e4:	464b      	mov	r3, r9
 80049e6:	eb45 0303 	adc.w	r3, r5, r3
 80049ea:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80049ee:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80049f2:	685b      	ldr	r3, [r3, #4]
 80049f4:	2200      	movs	r2, #0
 80049f6:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80049fa:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80049fe:	f04f 0200 	mov.w	r2, #0
 8004a02:	f04f 0300 	mov.w	r3, #0
 8004a06:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8004a0a:	4629      	mov	r1, r5
 8004a0c:	008b      	lsls	r3, r1, #2
 8004a0e:	4621      	mov	r1, r4
 8004a10:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004a14:	4621      	mov	r1, r4
 8004a16:	008a      	lsls	r2, r1, #2
 8004a18:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8004a1c:	f7fb fc38 	bl	8000290 <__aeabi_uldivmod>
 8004a20:	4602      	mov	r2, r0
 8004a22:	460b      	mov	r3, r1
 8004a24:	4b60      	ldr	r3, [pc, #384]	; (8004ba8 <UART_SetConfig+0x4e4>)
 8004a26:	fba3 2302 	umull	r2, r3, r3, r2
 8004a2a:	095b      	lsrs	r3, r3, #5
 8004a2c:	011c      	lsls	r4, r3, #4
 8004a2e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004a32:	2200      	movs	r2, #0
 8004a34:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8004a38:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8004a3c:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8004a40:	4642      	mov	r2, r8
 8004a42:	464b      	mov	r3, r9
 8004a44:	1891      	adds	r1, r2, r2
 8004a46:	61b9      	str	r1, [r7, #24]
 8004a48:	415b      	adcs	r3, r3
 8004a4a:	61fb      	str	r3, [r7, #28]
 8004a4c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004a50:	4641      	mov	r1, r8
 8004a52:	1851      	adds	r1, r2, r1
 8004a54:	6139      	str	r1, [r7, #16]
 8004a56:	4649      	mov	r1, r9
 8004a58:	414b      	adcs	r3, r1
 8004a5a:	617b      	str	r3, [r7, #20]
 8004a5c:	f04f 0200 	mov.w	r2, #0
 8004a60:	f04f 0300 	mov.w	r3, #0
 8004a64:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004a68:	4659      	mov	r1, fp
 8004a6a:	00cb      	lsls	r3, r1, #3
 8004a6c:	4651      	mov	r1, sl
 8004a6e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004a72:	4651      	mov	r1, sl
 8004a74:	00ca      	lsls	r2, r1, #3
 8004a76:	4610      	mov	r0, r2
 8004a78:	4619      	mov	r1, r3
 8004a7a:	4603      	mov	r3, r0
 8004a7c:	4642      	mov	r2, r8
 8004a7e:	189b      	adds	r3, r3, r2
 8004a80:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8004a84:	464b      	mov	r3, r9
 8004a86:	460a      	mov	r2, r1
 8004a88:	eb42 0303 	adc.w	r3, r2, r3
 8004a8c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8004a90:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004a94:	685b      	ldr	r3, [r3, #4]
 8004a96:	2200      	movs	r2, #0
 8004a98:	67bb      	str	r3, [r7, #120]	; 0x78
 8004a9a:	67fa      	str	r2, [r7, #124]	; 0x7c
 8004a9c:	f04f 0200 	mov.w	r2, #0
 8004aa0:	f04f 0300 	mov.w	r3, #0
 8004aa4:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8004aa8:	4649      	mov	r1, r9
 8004aaa:	008b      	lsls	r3, r1, #2
 8004aac:	4641      	mov	r1, r8
 8004aae:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004ab2:	4641      	mov	r1, r8
 8004ab4:	008a      	lsls	r2, r1, #2
 8004ab6:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8004aba:	f7fb fbe9 	bl	8000290 <__aeabi_uldivmod>
 8004abe:	4602      	mov	r2, r0
 8004ac0:	460b      	mov	r3, r1
 8004ac2:	4b39      	ldr	r3, [pc, #228]	; (8004ba8 <UART_SetConfig+0x4e4>)
 8004ac4:	fba3 1302 	umull	r1, r3, r3, r2
 8004ac8:	095b      	lsrs	r3, r3, #5
 8004aca:	2164      	movs	r1, #100	; 0x64
 8004acc:	fb01 f303 	mul.w	r3, r1, r3
 8004ad0:	1ad3      	subs	r3, r2, r3
 8004ad2:	011b      	lsls	r3, r3, #4
 8004ad4:	3332      	adds	r3, #50	; 0x32
 8004ad6:	4a34      	ldr	r2, [pc, #208]	; (8004ba8 <UART_SetConfig+0x4e4>)
 8004ad8:	fba2 2303 	umull	r2, r3, r2, r3
 8004adc:	095b      	lsrs	r3, r3, #5
 8004ade:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004ae2:	441c      	add	r4, r3
 8004ae4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004ae8:	2200      	movs	r2, #0
 8004aea:	673b      	str	r3, [r7, #112]	; 0x70
 8004aec:	677a      	str	r2, [r7, #116]	; 0x74
 8004aee:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8004af2:	4642      	mov	r2, r8
 8004af4:	464b      	mov	r3, r9
 8004af6:	1891      	adds	r1, r2, r2
 8004af8:	60b9      	str	r1, [r7, #8]
 8004afa:	415b      	adcs	r3, r3
 8004afc:	60fb      	str	r3, [r7, #12]
 8004afe:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004b02:	4641      	mov	r1, r8
 8004b04:	1851      	adds	r1, r2, r1
 8004b06:	6039      	str	r1, [r7, #0]
 8004b08:	4649      	mov	r1, r9
 8004b0a:	414b      	adcs	r3, r1
 8004b0c:	607b      	str	r3, [r7, #4]
 8004b0e:	f04f 0200 	mov.w	r2, #0
 8004b12:	f04f 0300 	mov.w	r3, #0
 8004b16:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8004b1a:	4659      	mov	r1, fp
 8004b1c:	00cb      	lsls	r3, r1, #3
 8004b1e:	4651      	mov	r1, sl
 8004b20:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004b24:	4651      	mov	r1, sl
 8004b26:	00ca      	lsls	r2, r1, #3
 8004b28:	4610      	mov	r0, r2
 8004b2a:	4619      	mov	r1, r3
 8004b2c:	4603      	mov	r3, r0
 8004b2e:	4642      	mov	r2, r8
 8004b30:	189b      	adds	r3, r3, r2
 8004b32:	66bb      	str	r3, [r7, #104]	; 0x68
 8004b34:	464b      	mov	r3, r9
 8004b36:	460a      	mov	r2, r1
 8004b38:	eb42 0303 	adc.w	r3, r2, r3
 8004b3c:	66fb      	str	r3, [r7, #108]	; 0x6c
 8004b3e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004b42:	685b      	ldr	r3, [r3, #4]
 8004b44:	2200      	movs	r2, #0
 8004b46:	663b      	str	r3, [r7, #96]	; 0x60
 8004b48:	667a      	str	r2, [r7, #100]	; 0x64
 8004b4a:	f04f 0200 	mov.w	r2, #0
 8004b4e:	f04f 0300 	mov.w	r3, #0
 8004b52:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8004b56:	4649      	mov	r1, r9
 8004b58:	008b      	lsls	r3, r1, #2
 8004b5a:	4641      	mov	r1, r8
 8004b5c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004b60:	4641      	mov	r1, r8
 8004b62:	008a      	lsls	r2, r1, #2
 8004b64:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8004b68:	f7fb fb92 	bl	8000290 <__aeabi_uldivmod>
 8004b6c:	4602      	mov	r2, r0
 8004b6e:	460b      	mov	r3, r1
 8004b70:	4b0d      	ldr	r3, [pc, #52]	; (8004ba8 <UART_SetConfig+0x4e4>)
 8004b72:	fba3 1302 	umull	r1, r3, r3, r2
 8004b76:	095b      	lsrs	r3, r3, #5
 8004b78:	2164      	movs	r1, #100	; 0x64
 8004b7a:	fb01 f303 	mul.w	r3, r1, r3
 8004b7e:	1ad3      	subs	r3, r2, r3
 8004b80:	011b      	lsls	r3, r3, #4
 8004b82:	3332      	adds	r3, #50	; 0x32
 8004b84:	4a08      	ldr	r2, [pc, #32]	; (8004ba8 <UART_SetConfig+0x4e4>)
 8004b86:	fba2 2303 	umull	r2, r3, r2, r3
 8004b8a:	095b      	lsrs	r3, r3, #5
 8004b8c:	f003 020f 	and.w	r2, r3, #15
 8004b90:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004b94:	681b      	ldr	r3, [r3, #0]
 8004b96:	4422      	add	r2, r4
 8004b98:	609a      	str	r2, [r3, #8]
}
 8004b9a:	bf00      	nop
 8004b9c:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8004ba0:	46bd      	mov	sp, r7
 8004ba2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004ba6:	bf00      	nop
 8004ba8:	51eb851f 	.word	0x51eb851f

08004bac <__libc_init_array>:
 8004bac:	b570      	push	{r4, r5, r6, lr}
 8004bae:	4d0d      	ldr	r5, [pc, #52]	; (8004be4 <__libc_init_array+0x38>)
 8004bb0:	4c0d      	ldr	r4, [pc, #52]	; (8004be8 <__libc_init_array+0x3c>)
 8004bb2:	1b64      	subs	r4, r4, r5
 8004bb4:	10a4      	asrs	r4, r4, #2
 8004bb6:	2600      	movs	r6, #0
 8004bb8:	42a6      	cmp	r6, r4
 8004bba:	d109      	bne.n	8004bd0 <__libc_init_array+0x24>
 8004bbc:	4d0b      	ldr	r5, [pc, #44]	; (8004bec <__libc_init_array+0x40>)
 8004bbe:	4c0c      	ldr	r4, [pc, #48]	; (8004bf0 <__libc_init_array+0x44>)
 8004bc0:	f000 fc9c 	bl	80054fc <_init>
 8004bc4:	1b64      	subs	r4, r4, r5
 8004bc6:	10a4      	asrs	r4, r4, #2
 8004bc8:	2600      	movs	r6, #0
 8004bca:	42a6      	cmp	r6, r4
 8004bcc:	d105      	bne.n	8004bda <__libc_init_array+0x2e>
 8004bce:	bd70      	pop	{r4, r5, r6, pc}
 8004bd0:	f855 3b04 	ldr.w	r3, [r5], #4
 8004bd4:	4798      	blx	r3
 8004bd6:	3601      	adds	r6, #1
 8004bd8:	e7ee      	b.n	8004bb8 <__libc_init_array+0xc>
 8004bda:	f855 3b04 	ldr.w	r3, [r5], #4
 8004bde:	4798      	blx	r3
 8004be0:	3601      	adds	r6, #1
 8004be2:	e7f2      	b.n	8004bca <__libc_init_array+0x1e>
 8004be4:	0800d5f8 	.word	0x0800d5f8
 8004be8:	0800d5f8 	.word	0x0800d5f8
 8004bec:	0800d5f8 	.word	0x0800d5f8
 8004bf0:	0800d5fc 	.word	0x0800d5fc

08004bf4 <memcpy>:
 8004bf4:	440a      	add	r2, r1
 8004bf6:	4291      	cmp	r1, r2
 8004bf8:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8004bfc:	d100      	bne.n	8004c00 <memcpy+0xc>
 8004bfe:	4770      	bx	lr
 8004c00:	b510      	push	{r4, lr}
 8004c02:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004c06:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004c0a:	4291      	cmp	r1, r2
 8004c0c:	d1f9      	bne.n	8004c02 <memcpy+0xe>
 8004c0e:	bd10      	pop	{r4, pc}

08004c10 <memset>:
 8004c10:	4402      	add	r2, r0
 8004c12:	4603      	mov	r3, r0
 8004c14:	4293      	cmp	r3, r2
 8004c16:	d100      	bne.n	8004c1a <memset+0xa>
 8004c18:	4770      	bx	lr
 8004c1a:	f803 1b01 	strb.w	r1, [r3], #1
 8004c1e:	e7f9      	b.n	8004c14 <memset+0x4>

08004c20 <siprintf>:
 8004c20:	b40e      	push	{r1, r2, r3}
 8004c22:	b500      	push	{lr}
 8004c24:	b09c      	sub	sp, #112	; 0x70
 8004c26:	ab1d      	add	r3, sp, #116	; 0x74
 8004c28:	9002      	str	r0, [sp, #8]
 8004c2a:	9006      	str	r0, [sp, #24]
 8004c2c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8004c30:	4809      	ldr	r0, [pc, #36]	; (8004c58 <siprintf+0x38>)
 8004c32:	9107      	str	r1, [sp, #28]
 8004c34:	9104      	str	r1, [sp, #16]
 8004c36:	4909      	ldr	r1, [pc, #36]	; (8004c5c <siprintf+0x3c>)
 8004c38:	f853 2b04 	ldr.w	r2, [r3], #4
 8004c3c:	9105      	str	r1, [sp, #20]
 8004c3e:	6800      	ldr	r0, [r0, #0]
 8004c40:	9301      	str	r3, [sp, #4]
 8004c42:	a902      	add	r1, sp, #8
 8004c44:	f000 f868 	bl	8004d18 <_svfiprintf_r>
 8004c48:	9b02      	ldr	r3, [sp, #8]
 8004c4a:	2200      	movs	r2, #0
 8004c4c:	701a      	strb	r2, [r3, #0]
 8004c4e:	b01c      	add	sp, #112	; 0x70
 8004c50:	f85d eb04 	ldr.w	lr, [sp], #4
 8004c54:	b003      	add	sp, #12
 8004c56:	4770      	bx	lr
 8004c58:	20000020 	.word	0x20000020
 8004c5c:	ffff0208 	.word	0xffff0208

08004c60 <__ssputs_r>:
 8004c60:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004c64:	688e      	ldr	r6, [r1, #8]
 8004c66:	429e      	cmp	r6, r3
 8004c68:	4682      	mov	sl, r0
 8004c6a:	460c      	mov	r4, r1
 8004c6c:	4690      	mov	r8, r2
 8004c6e:	461f      	mov	r7, r3
 8004c70:	d838      	bhi.n	8004ce4 <__ssputs_r+0x84>
 8004c72:	898a      	ldrh	r2, [r1, #12]
 8004c74:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8004c78:	d032      	beq.n	8004ce0 <__ssputs_r+0x80>
 8004c7a:	6825      	ldr	r5, [r4, #0]
 8004c7c:	6909      	ldr	r1, [r1, #16]
 8004c7e:	eba5 0901 	sub.w	r9, r5, r1
 8004c82:	6965      	ldr	r5, [r4, #20]
 8004c84:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8004c88:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8004c8c:	3301      	adds	r3, #1
 8004c8e:	444b      	add	r3, r9
 8004c90:	106d      	asrs	r5, r5, #1
 8004c92:	429d      	cmp	r5, r3
 8004c94:	bf38      	it	cc
 8004c96:	461d      	movcc	r5, r3
 8004c98:	0553      	lsls	r3, r2, #21
 8004c9a:	d531      	bpl.n	8004d00 <__ssputs_r+0xa0>
 8004c9c:	4629      	mov	r1, r5
 8004c9e:	f000 fb55 	bl	800534c <_malloc_r>
 8004ca2:	4606      	mov	r6, r0
 8004ca4:	b950      	cbnz	r0, 8004cbc <__ssputs_r+0x5c>
 8004ca6:	230c      	movs	r3, #12
 8004ca8:	f8ca 3000 	str.w	r3, [sl]
 8004cac:	89a3      	ldrh	r3, [r4, #12]
 8004cae:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004cb2:	81a3      	strh	r3, [r4, #12]
 8004cb4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004cb8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004cbc:	6921      	ldr	r1, [r4, #16]
 8004cbe:	464a      	mov	r2, r9
 8004cc0:	f7ff ff98 	bl	8004bf4 <memcpy>
 8004cc4:	89a3      	ldrh	r3, [r4, #12]
 8004cc6:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8004cca:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004cce:	81a3      	strh	r3, [r4, #12]
 8004cd0:	6126      	str	r6, [r4, #16]
 8004cd2:	6165      	str	r5, [r4, #20]
 8004cd4:	444e      	add	r6, r9
 8004cd6:	eba5 0509 	sub.w	r5, r5, r9
 8004cda:	6026      	str	r6, [r4, #0]
 8004cdc:	60a5      	str	r5, [r4, #8]
 8004cde:	463e      	mov	r6, r7
 8004ce0:	42be      	cmp	r6, r7
 8004ce2:	d900      	bls.n	8004ce6 <__ssputs_r+0x86>
 8004ce4:	463e      	mov	r6, r7
 8004ce6:	6820      	ldr	r0, [r4, #0]
 8004ce8:	4632      	mov	r2, r6
 8004cea:	4641      	mov	r1, r8
 8004cec:	f000 faa8 	bl	8005240 <memmove>
 8004cf0:	68a3      	ldr	r3, [r4, #8]
 8004cf2:	1b9b      	subs	r3, r3, r6
 8004cf4:	60a3      	str	r3, [r4, #8]
 8004cf6:	6823      	ldr	r3, [r4, #0]
 8004cf8:	4433      	add	r3, r6
 8004cfa:	6023      	str	r3, [r4, #0]
 8004cfc:	2000      	movs	r0, #0
 8004cfe:	e7db      	b.n	8004cb8 <__ssputs_r+0x58>
 8004d00:	462a      	mov	r2, r5
 8004d02:	f000 fb97 	bl	8005434 <_realloc_r>
 8004d06:	4606      	mov	r6, r0
 8004d08:	2800      	cmp	r0, #0
 8004d0a:	d1e1      	bne.n	8004cd0 <__ssputs_r+0x70>
 8004d0c:	6921      	ldr	r1, [r4, #16]
 8004d0e:	4650      	mov	r0, sl
 8004d10:	f000 fab0 	bl	8005274 <_free_r>
 8004d14:	e7c7      	b.n	8004ca6 <__ssputs_r+0x46>
	...

08004d18 <_svfiprintf_r>:
 8004d18:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004d1c:	4698      	mov	r8, r3
 8004d1e:	898b      	ldrh	r3, [r1, #12]
 8004d20:	061b      	lsls	r3, r3, #24
 8004d22:	b09d      	sub	sp, #116	; 0x74
 8004d24:	4607      	mov	r7, r0
 8004d26:	460d      	mov	r5, r1
 8004d28:	4614      	mov	r4, r2
 8004d2a:	d50e      	bpl.n	8004d4a <_svfiprintf_r+0x32>
 8004d2c:	690b      	ldr	r3, [r1, #16]
 8004d2e:	b963      	cbnz	r3, 8004d4a <_svfiprintf_r+0x32>
 8004d30:	2140      	movs	r1, #64	; 0x40
 8004d32:	f000 fb0b 	bl	800534c <_malloc_r>
 8004d36:	6028      	str	r0, [r5, #0]
 8004d38:	6128      	str	r0, [r5, #16]
 8004d3a:	b920      	cbnz	r0, 8004d46 <_svfiprintf_r+0x2e>
 8004d3c:	230c      	movs	r3, #12
 8004d3e:	603b      	str	r3, [r7, #0]
 8004d40:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004d44:	e0d1      	b.n	8004eea <_svfiprintf_r+0x1d2>
 8004d46:	2340      	movs	r3, #64	; 0x40
 8004d48:	616b      	str	r3, [r5, #20]
 8004d4a:	2300      	movs	r3, #0
 8004d4c:	9309      	str	r3, [sp, #36]	; 0x24
 8004d4e:	2320      	movs	r3, #32
 8004d50:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8004d54:	f8cd 800c 	str.w	r8, [sp, #12]
 8004d58:	2330      	movs	r3, #48	; 0x30
 8004d5a:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8004f04 <_svfiprintf_r+0x1ec>
 8004d5e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8004d62:	f04f 0901 	mov.w	r9, #1
 8004d66:	4623      	mov	r3, r4
 8004d68:	469a      	mov	sl, r3
 8004d6a:	f813 2b01 	ldrb.w	r2, [r3], #1
 8004d6e:	b10a      	cbz	r2, 8004d74 <_svfiprintf_r+0x5c>
 8004d70:	2a25      	cmp	r2, #37	; 0x25
 8004d72:	d1f9      	bne.n	8004d68 <_svfiprintf_r+0x50>
 8004d74:	ebba 0b04 	subs.w	fp, sl, r4
 8004d78:	d00b      	beq.n	8004d92 <_svfiprintf_r+0x7a>
 8004d7a:	465b      	mov	r3, fp
 8004d7c:	4622      	mov	r2, r4
 8004d7e:	4629      	mov	r1, r5
 8004d80:	4638      	mov	r0, r7
 8004d82:	f7ff ff6d 	bl	8004c60 <__ssputs_r>
 8004d86:	3001      	adds	r0, #1
 8004d88:	f000 80aa 	beq.w	8004ee0 <_svfiprintf_r+0x1c8>
 8004d8c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8004d8e:	445a      	add	r2, fp
 8004d90:	9209      	str	r2, [sp, #36]	; 0x24
 8004d92:	f89a 3000 	ldrb.w	r3, [sl]
 8004d96:	2b00      	cmp	r3, #0
 8004d98:	f000 80a2 	beq.w	8004ee0 <_svfiprintf_r+0x1c8>
 8004d9c:	2300      	movs	r3, #0
 8004d9e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8004da2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8004da6:	f10a 0a01 	add.w	sl, sl, #1
 8004daa:	9304      	str	r3, [sp, #16]
 8004dac:	9307      	str	r3, [sp, #28]
 8004dae:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8004db2:	931a      	str	r3, [sp, #104]	; 0x68
 8004db4:	4654      	mov	r4, sl
 8004db6:	2205      	movs	r2, #5
 8004db8:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004dbc:	4851      	ldr	r0, [pc, #324]	; (8004f04 <_svfiprintf_r+0x1ec>)
 8004dbe:	f7fb fa17 	bl	80001f0 <memchr>
 8004dc2:	9a04      	ldr	r2, [sp, #16]
 8004dc4:	b9d8      	cbnz	r0, 8004dfe <_svfiprintf_r+0xe6>
 8004dc6:	06d0      	lsls	r0, r2, #27
 8004dc8:	bf44      	itt	mi
 8004dca:	2320      	movmi	r3, #32
 8004dcc:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004dd0:	0711      	lsls	r1, r2, #28
 8004dd2:	bf44      	itt	mi
 8004dd4:	232b      	movmi	r3, #43	; 0x2b
 8004dd6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004dda:	f89a 3000 	ldrb.w	r3, [sl]
 8004dde:	2b2a      	cmp	r3, #42	; 0x2a
 8004de0:	d015      	beq.n	8004e0e <_svfiprintf_r+0xf6>
 8004de2:	9a07      	ldr	r2, [sp, #28]
 8004de4:	4654      	mov	r4, sl
 8004de6:	2000      	movs	r0, #0
 8004de8:	f04f 0c0a 	mov.w	ip, #10
 8004dec:	4621      	mov	r1, r4
 8004dee:	f811 3b01 	ldrb.w	r3, [r1], #1
 8004df2:	3b30      	subs	r3, #48	; 0x30
 8004df4:	2b09      	cmp	r3, #9
 8004df6:	d94e      	bls.n	8004e96 <_svfiprintf_r+0x17e>
 8004df8:	b1b0      	cbz	r0, 8004e28 <_svfiprintf_r+0x110>
 8004dfa:	9207      	str	r2, [sp, #28]
 8004dfc:	e014      	b.n	8004e28 <_svfiprintf_r+0x110>
 8004dfe:	eba0 0308 	sub.w	r3, r0, r8
 8004e02:	fa09 f303 	lsl.w	r3, r9, r3
 8004e06:	4313      	orrs	r3, r2
 8004e08:	9304      	str	r3, [sp, #16]
 8004e0a:	46a2      	mov	sl, r4
 8004e0c:	e7d2      	b.n	8004db4 <_svfiprintf_r+0x9c>
 8004e0e:	9b03      	ldr	r3, [sp, #12]
 8004e10:	1d19      	adds	r1, r3, #4
 8004e12:	681b      	ldr	r3, [r3, #0]
 8004e14:	9103      	str	r1, [sp, #12]
 8004e16:	2b00      	cmp	r3, #0
 8004e18:	bfbb      	ittet	lt
 8004e1a:	425b      	neglt	r3, r3
 8004e1c:	f042 0202 	orrlt.w	r2, r2, #2
 8004e20:	9307      	strge	r3, [sp, #28]
 8004e22:	9307      	strlt	r3, [sp, #28]
 8004e24:	bfb8      	it	lt
 8004e26:	9204      	strlt	r2, [sp, #16]
 8004e28:	7823      	ldrb	r3, [r4, #0]
 8004e2a:	2b2e      	cmp	r3, #46	; 0x2e
 8004e2c:	d10c      	bne.n	8004e48 <_svfiprintf_r+0x130>
 8004e2e:	7863      	ldrb	r3, [r4, #1]
 8004e30:	2b2a      	cmp	r3, #42	; 0x2a
 8004e32:	d135      	bne.n	8004ea0 <_svfiprintf_r+0x188>
 8004e34:	9b03      	ldr	r3, [sp, #12]
 8004e36:	1d1a      	adds	r2, r3, #4
 8004e38:	681b      	ldr	r3, [r3, #0]
 8004e3a:	9203      	str	r2, [sp, #12]
 8004e3c:	2b00      	cmp	r3, #0
 8004e3e:	bfb8      	it	lt
 8004e40:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8004e44:	3402      	adds	r4, #2
 8004e46:	9305      	str	r3, [sp, #20]
 8004e48:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8004f14 <_svfiprintf_r+0x1fc>
 8004e4c:	7821      	ldrb	r1, [r4, #0]
 8004e4e:	2203      	movs	r2, #3
 8004e50:	4650      	mov	r0, sl
 8004e52:	f7fb f9cd 	bl	80001f0 <memchr>
 8004e56:	b140      	cbz	r0, 8004e6a <_svfiprintf_r+0x152>
 8004e58:	2340      	movs	r3, #64	; 0x40
 8004e5a:	eba0 000a 	sub.w	r0, r0, sl
 8004e5e:	fa03 f000 	lsl.w	r0, r3, r0
 8004e62:	9b04      	ldr	r3, [sp, #16]
 8004e64:	4303      	orrs	r3, r0
 8004e66:	3401      	adds	r4, #1
 8004e68:	9304      	str	r3, [sp, #16]
 8004e6a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004e6e:	4826      	ldr	r0, [pc, #152]	; (8004f08 <_svfiprintf_r+0x1f0>)
 8004e70:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8004e74:	2206      	movs	r2, #6
 8004e76:	f7fb f9bb 	bl	80001f0 <memchr>
 8004e7a:	2800      	cmp	r0, #0
 8004e7c:	d038      	beq.n	8004ef0 <_svfiprintf_r+0x1d8>
 8004e7e:	4b23      	ldr	r3, [pc, #140]	; (8004f0c <_svfiprintf_r+0x1f4>)
 8004e80:	bb1b      	cbnz	r3, 8004eca <_svfiprintf_r+0x1b2>
 8004e82:	9b03      	ldr	r3, [sp, #12]
 8004e84:	3307      	adds	r3, #7
 8004e86:	f023 0307 	bic.w	r3, r3, #7
 8004e8a:	3308      	adds	r3, #8
 8004e8c:	9303      	str	r3, [sp, #12]
 8004e8e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004e90:	4433      	add	r3, r6
 8004e92:	9309      	str	r3, [sp, #36]	; 0x24
 8004e94:	e767      	b.n	8004d66 <_svfiprintf_r+0x4e>
 8004e96:	fb0c 3202 	mla	r2, ip, r2, r3
 8004e9a:	460c      	mov	r4, r1
 8004e9c:	2001      	movs	r0, #1
 8004e9e:	e7a5      	b.n	8004dec <_svfiprintf_r+0xd4>
 8004ea0:	2300      	movs	r3, #0
 8004ea2:	3401      	adds	r4, #1
 8004ea4:	9305      	str	r3, [sp, #20]
 8004ea6:	4619      	mov	r1, r3
 8004ea8:	f04f 0c0a 	mov.w	ip, #10
 8004eac:	4620      	mov	r0, r4
 8004eae:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004eb2:	3a30      	subs	r2, #48	; 0x30
 8004eb4:	2a09      	cmp	r2, #9
 8004eb6:	d903      	bls.n	8004ec0 <_svfiprintf_r+0x1a8>
 8004eb8:	2b00      	cmp	r3, #0
 8004eba:	d0c5      	beq.n	8004e48 <_svfiprintf_r+0x130>
 8004ebc:	9105      	str	r1, [sp, #20]
 8004ebe:	e7c3      	b.n	8004e48 <_svfiprintf_r+0x130>
 8004ec0:	fb0c 2101 	mla	r1, ip, r1, r2
 8004ec4:	4604      	mov	r4, r0
 8004ec6:	2301      	movs	r3, #1
 8004ec8:	e7f0      	b.n	8004eac <_svfiprintf_r+0x194>
 8004eca:	ab03      	add	r3, sp, #12
 8004ecc:	9300      	str	r3, [sp, #0]
 8004ece:	462a      	mov	r2, r5
 8004ed0:	4b0f      	ldr	r3, [pc, #60]	; (8004f10 <_svfiprintf_r+0x1f8>)
 8004ed2:	a904      	add	r1, sp, #16
 8004ed4:	4638      	mov	r0, r7
 8004ed6:	f3af 8000 	nop.w
 8004eda:	1c42      	adds	r2, r0, #1
 8004edc:	4606      	mov	r6, r0
 8004ede:	d1d6      	bne.n	8004e8e <_svfiprintf_r+0x176>
 8004ee0:	89ab      	ldrh	r3, [r5, #12]
 8004ee2:	065b      	lsls	r3, r3, #25
 8004ee4:	f53f af2c 	bmi.w	8004d40 <_svfiprintf_r+0x28>
 8004ee8:	9809      	ldr	r0, [sp, #36]	; 0x24
 8004eea:	b01d      	add	sp, #116	; 0x74
 8004eec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004ef0:	ab03      	add	r3, sp, #12
 8004ef2:	9300      	str	r3, [sp, #0]
 8004ef4:	462a      	mov	r2, r5
 8004ef6:	4b06      	ldr	r3, [pc, #24]	; (8004f10 <_svfiprintf_r+0x1f8>)
 8004ef8:	a904      	add	r1, sp, #16
 8004efa:	4638      	mov	r0, r7
 8004efc:	f000 f87a 	bl	8004ff4 <_printf_i>
 8004f00:	e7eb      	b.n	8004eda <_svfiprintf_r+0x1c2>
 8004f02:	bf00      	nop
 8004f04:	0800d5bc 	.word	0x0800d5bc
 8004f08:	0800d5c6 	.word	0x0800d5c6
 8004f0c:	00000000 	.word	0x00000000
 8004f10:	08004c61 	.word	0x08004c61
 8004f14:	0800d5c2 	.word	0x0800d5c2

08004f18 <_printf_common>:
 8004f18:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004f1c:	4616      	mov	r6, r2
 8004f1e:	4699      	mov	r9, r3
 8004f20:	688a      	ldr	r2, [r1, #8]
 8004f22:	690b      	ldr	r3, [r1, #16]
 8004f24:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8004f28:	4293      	cmp	r3, r2
 8004f2a:	bfb8      	it	lt
 8004f2c:	4613      	movlt	r3, r2
 8004f2e:	6033      	str	r3, [r6, #0]
 8004f30:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8004f34:	4607      	mov	r7, r0
 8004f36:	460c      	mov	r4, r1
 8004f38:	b10a      	cbz	r2, 8004f3e <_printf_common+0x26>
 8004f3a:	3301      	adds	r3, #1
 8004f3c:	6033      	str	r3, [r6, #0]
 8004f3e:	6823      	ldr	r3, [r4, #0]
 8004f40:	0699      	lsls	r1, r3, #26
 8004f42:	bf42      	ittt	mi
 8004f44:	6833      	ldrmi	r3, [r6, #0]
 8004f46:	3302      	addmi	r3, #2
 8004f48:	6033      	strmi	r3, [r6, #0]
 8004f4a:	6825      	ldr	r5, [r4, #0]
 8004f4c:	f015 0506 	ands.w	r5, r5, #6
 8004f50:	d106      	bne.n	8004f60 <_printf_common+0x48>
 8004f52:	f104 0a19 	add.w	sl, r4, #25
 8004f56:	68e3      	ldr	r3, [r4, #12]
 8004f58:	6832      	ldr	r2, [r6, #0]
 8004f5a:	1a9b      	subs	r3, r3, r2
 8004f5c:	42ab      	cmp	r3, r5
 8004f5e:	dc26      	bgt.n	8004fae <_printf_common+0x96>
 8004f60:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8004f64:	1e13      	subs	r3, r2, #0
 8004f66:	6822      	ldr	r2, [r4, #0]
 8004f68:	bf18      	it	ne
 8004f6a:	2301      	movne	r3, #1
 8004f6c:	0692      	lsls	r2, r2, #26
 8004f6e:	d42b      	bmi.n	8004fc8 <_printf_common+0xb0>
 8004f70:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004f74:	4649      	mov	r1, r9
 8004f76:	4638      	mov	r0, r7
 8004f78:	47c0      	blx	r8
 8004f7a:	3001      	adds	r0, #1
 8004f7c:	d01e      	beq.n	8004fbc <_printf_common+0xa4>
 8004f7e:	6823      	ldr	r3, [r4, #0]
 8004f80:	68e5      	ldr	r5, [r4, #12]
 8004f82:	6832      	ldr	r2, [r6, #0]
 8004f84:	f003 0306 	and.w	r3, r3, #6
 8004f88:	2b04      	cmp	r3, #4
 8004f8a:	bf08      	it	eq
 8004f8c:	1aad      	subeq	r5, r5, r2
 8004f8e:	68a3      	ldr	r3, [r4, #8]
 8004f90:	6922      	ldr	r2, [r4, #16]
 8004f92:	bf0c      	ite	eq
 8004f94:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004f98:	2500      	movne	r5, #0
 8004f9a:	4293      	cmp	r3, r2
 8004f9c:	bfc4      	itt	gt
 8004f9e:	1a9b      	subgt	r3, r3, r2
 8004fa0:	18ed      	addgt	r5, r5, r3
 8004fa2:	2600      	movs	r6, #0
 8004fa4:	341a      	adds	r4, #26
 8004fa6:	42b5      	cmp	r5, r6
 8004fa8:	d11a      	bne.n	8004fe0 <_printf_common+0xc8>
 8004faa:	2000      	movs	r0, #0
 8004fac:	e008      	b.n	8004fc0 <_printf_common+0xa8>
 8004fae:	2301      	movs	r3, #1
 8004fb0:	4652      	mov	r2, sl
 8004fb2:	4649      	mov	r1, r9
 8004fb4:	4638      	mov	r0, r7
 8004fb6:	47c0      	blx	r8
 8004fb8:	3001      	adds	r0, #1
 8004fba:	d103      	bne.n	8004fc4 <_printf_common+0xac>
 8004fbc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004fc0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004fc4:	3501      	adds	r5, #1
 8004fc6:	e7c6      	b.n	8004f56 <_printf_common+0x3e>
 8004fc8:	18e1      	adds	r1, r4, r3
 8004fca:	1c5a      	adds	r2, r3, #1
 8004fcc:	2030      	movs	r0, #48	; 0x30
 8004fce:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8004fd2:	4422      	add	r2, r4
 8004fd4:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8004fd8:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8004fdc:	3302      	adds	r3, #2
 8004fde:	e7c7      	b.n	8004f70 <_printf_common+0x58>
 8004fe0:	2301      	movs	r3, #1
 8004fe2:	4622      	mov	r2, r4
 8004fe4:	4649      	mov	r1, r9
 8004fe6:	4638      	mov	r0, r7
 8004fe8:	47c0      	blx	r8
 8004fea:	3001      	adds	r0, #1
 8004fec:	d0e6      	beq.n	8004fbc <_printf_common+0xa4>
 8004fee:	3601      	adds	r6, #1
 8004ff0:	e7d9      	b.n	8004fa6 <_printf_common+0x8e>
	...

08004ff4 <_printf_i>:
 8004ff4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004ff8:	7e0f      	ldrb	r7, [r1, #24]
 8004ffa:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8004ffc:	2f78      	cmp	r7, #120	; 0x78
 8004ffe:	4691      	mov	r9, r2
 8005000:	4680      	mov	r8, r0
 8005002:	460c      	mov	r4, r1
 8005004:	469a      	mov	sl, r3
 8005006:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800500a:	d807      	bhi.n	800501c <_printf_i+0x28>
 800500c:	2f62      	cmp	r7, #98	; 0x62
 800500e:	d80a      	bhi.n	8005026 <_printf_i+0x32>
 8005010:	2f00      	cmp	r7, #0
 8005012:	f000 80d8 	beq.w	80051c6 <_printf_i+0x1d2>
 8005016:	2f58      	cmp	r7, #88	; 0x58
 8005018:	f000 80a3 	beq.w	8005162 <_printf_i+0x16e>
 800501c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005020:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8005024:	e03a      	b.n	800509c <_printf_i+0xa8>
 8005026:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800502a:	2b15      	cmp	r3, #21
 800502c:	d8f6      	bhi.n	800501c <_printf_i+0x28>
 800502e:	a101      	add	r1, pc, #4	; (adr r1, 8005034 <_printf_i+0x40>)
 8005030:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8005034:	0800508d 	.word	0x0800508d
 8005038:	080050a1 	.word	0x080050a1
 800503c:	0800501d 	.word	0x0800501d
 8005040:	0800501d 	.word	0x0800501d
 8005044:	0800501d 	.word	0x0800501d
 8005048:	0800501d 	.word	0x0800501d
 800504c:	080050a1 	.word	0x080050a1
 8005050:	0800501d 	.word	0x0800501d
 8005054:	0800501d 	.word	0x0800501d
 8005058:	0800501d 	.word	0x0800501d
 800505c:	0800501d 	.word	0x0800501d
 8005060:	080051ad 	.word	0x080051ad
 8005064:	080050d1 	.word	0x080050d1
 8005068:	0800518f 	.word	0x0800518f
 800506c:	0800501d 	.word	0x0800501d
 8005070:	0800501d 	.word	0x0800501d
 8005074:	080051cf 	.word	0x080051cf
 8005078:	0800501d 	.word	0x0800501d
 800507c:	080050d1 	.word	0x080050d1
 8005080:	0800501d 	.word	0x0800501d
 8005084:	0800501d 	.word	0x0800501d
 8005088:	08005197 	.word	0x08005197
 800508c:	682b      	ldr	r3, [r5, #0]
 800508e:	1d1a      	adds	r2, r3, #4
 8005090:	681b      	ldr	r3, [r3, #0]
 8005092:	602a      	str	r2, [r5, #0]
 8005094:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005098:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800509c:	2301      	movs	r3, #1
 800509e:	e0a3      	b.n	80051e8 <_printf_i+0x1f4>
 80050a0:	6820      	ldr	r0, [r4, #0]
 80050a2:	6829      	ldr	r1, [r5, #0]
 80050a4:	0606      	lsls	r6, r0, #24
 80050a6:	f101 0304 	add.w	r3, r1, #4
 80050aa:	d50a      	bpl.n	80050c2 <_printf_i+0xce>
 80050ac:	680e      	ldr	r6, [r1, #0]
 80050ae:	602b      	str	r3, [r5, #0]
 80050b0:	2e00      	cmp	r6, #0
 80050b2:	da03      	bge.n	80050bc <_printf_i+0xc8>
 80050b4:	232d      	movs	r3, #45	; 0x2d
 80050b6:	4276      	negs	r6, r6
 80050b8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80050bc:	485e      	ldr	r0, [pc, #376]	; (8005238 <_printf_i+0x244>)
 80050be:	230a      	movs	r3, #10
 80050c0:	e019      	b.n	80050f6 <_printf_i+0x102>
 80050c2:	680e      	ldr	r6, [r1, #0]
 80050c4:	602b      	str	r3, [r5, #0]
 80050c6:	f010 0f40 	tst.w	r0, #64	; 0x40
 80050ca:	bf18      	it	ne
 80050cc:	b236      	sxthne	r6, r6
 80050ce:	e7ef      	b.n	80050b0 <_printf_i+0xbc>
 80050d0:	682b      	ldr	r3, [r5, #0]
 80050d2:	6820      	ldr	r0, [r4, #0]
 80050d4:	1d19      	adds	r1, r3, #4
 80050d6:	6029      	str	r1, [r5, #0]
 80050d8:	0601      	lsls	r1, r0, #24
 80050da:	d501      	bpl.n	80050e0 <_printf_i+0xec>
 80050dc:	681e      	ldr	r6, [r3, #0]
 80050de:	e002      	b.n	80050e6 <_printf_i+0xf2>
 80050e0:	0646      	lsls	r6, r0, #25
 80050e2:	d5fb      	bpl.n	80050dc <_printf_i+0xe8>
 80050e4:	881e      	ldrh	r6, [r3, #0]
 80050e6:	4854      	ldr	r0, [pc, #336]	; (8005238 <_printf_i+0x244>)
 80050e8:	2f6f      	cmp	r7, #111	; 0x6f
 80050ea:	bf0c      	ite	eq
 80050ec:	2308      	moveq	r3, #8
 80050ee:	230a      	movne	r3, #10
 80050f0:	2100      	movs	r1, #0
 80050f2:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80050f6:	6865      	ldr	r5, [r4, #4]
 80050f8:	60a5      	str	r5, [r4, #8]
 80050fa:	2d00      	cmp	r5, #0
 80050fc:	bfa2      	ittt	ge
 80050fe:	6821      	ldrge	r1, [r4, #0]
 8005100:	f021 0104 	bicge.w	r1, r1, #4
 8005104:	6021      	strge	r1, [r4, #0]
 8005106:	b90e      	cbnz	r6, 800510c <_printf_i+0x118>
 8005108:	2d00      	cmp	r5, #0
 800510a:	d04d      	beq.n	80051a8 <_printf_i+0x1b4>
 800510c:	4615      	mov	r5, r2
 800510e:	fbb6 f1f3 	udiv	r1, r6, r3
 8005112:	fb03 6711 	mls	r7, r3, r1, r6
 8005116:	5dc7      	ldrb	r7, [r0, r7]
 8005118:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800511c:	4637      	mov	r7, r6
 800511e:	42bb      	cmp	r3, r7
 8005120:	460e      	mov	r6, r1
 8005122:	d9f4      	bls.n	800510e <_printf_i+0x11a>
 8005124:	2b08      	cmp	r3, #8
 8005126:	d10b      	bne.n	8005140 <_printf_i+0x14c>
 8005128:	6823      	ldr	r3, [r4, #0]
 800512a:	07de      	lsls	r6, r3, #31
 800512c:	d508      	bpl.n	8005140 <_printf_i+0x14c>
 800512e:	6923      	ldr	r3, [r4, #16]
 8005130:	6861      	ldr	r1, [r4, #4]
 8005132:	4299      	cmp	r1, r3
 8005134:	bfde      	ittt	le
 8005136:	2330      	movle	r3, #48	; 0x30
 8005138:	f805 3c01 	strble.w	r3, [r5, #-1]
 800513c:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8005140:	1b52      	subs	r2, r2, r5
 8005142:	6122      	str	r2, [r4, #16]
 8005144:	f8cd a000 	str.w	sl, [sp]
 8005148:	464b      	mov	r3, r9
 800514a:	aa03      	add	r2, sp, #12
 800514c:	4621      	mov	r1, r4
 800514e:	4640      	mov	r0, r8
 8005150:	f7ff fee2 	bl	8004f18 <_printf_common>
 8005154:	3001      	adds	r0, #1
 8005156:	d14c      	bne.n	80051f2 <_printf_i+0x1fe>
 8005158:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800515c:	b004      	add	sp, #16
 800515e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005162:	4835      	ldr	r0, [pc, #212]	; (8005238 <_printf_i+0x244>)
 8005164:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8005168:	6829      	ldr	r1, [r5, #0]
 800516a:	6823      	ldr	r3, [r4, #0]
 800516c:	f851 6b04 	ldr.w	r6, [r1], #4
 8005170:	6029      	str	r1, [r5, #0]
 8005172:	061d      	lsls	r5, r3, #24
 8005174:	d514      	bpl.n	80051a0 <_printf_i+0x1ac>
 8005176:	07df      	lsls	r7, r3, #31
 8005178:	bf44      	itt	mi
 800517a:	f043 0320 	orrmi.w	r3, r3, #32
 800517e:	6023      	strmi	r3, [r4, #0]
 8005180:	b91e      	cbnz	r6, 800518a <_printf_i+0x196>
 8005182:	6823      	ldr	r3, [r4, #0]
 8005184:	f023 0320 	bic.w	r3, r3, #32
 8005188:	6023      	str	r3, [r4, #0]
 800518a:	2310      	movs	r3, #16
 800518c:	e7b0      	b.n	80050f0 <_printf_i+0xfc>
 800518e:	6823      	ldr	r3, [r4, #0]
 8005190:	f043 0320 	orr.w	r3, r3, #32
 8005194:	6023      	str	r3, [r4, #0]
 8005196:	2378      	movs	r3, #120	; 0x78
 8005198:	4828      	ldr	r0, [pc, #160]	; (800523c <_printf_i+0x248>)
 800519a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800519e:	e7e3      	b.n	8005168 <_printf_i+0x174>
 80051a0:	0659      	lsls	r1, r3, #25
 80051a2:	bf48      	it	mi
 80051a4:	b2b6      	uxthmi	r6, r6
 80051a6:	e7e6      	b.n	8005176 <_printf_i+0x182>
 80051a8:	4615      	mov	r5, r2
 80051aa:	e7bb      	b.n	8005124 <_printf_i+0x130>
 80051ac:	682b      	ldr	r3, [r5, #0]
 80051ae:	6826      	ldr	r6, [r4, #0]
 80051b0:	6961      	ldr	r1, [r4, #20]
 80051b2:	1d18      	adds	r0, r3, #4
 80051b4:	6028      	str	r0, [r5, #0]
 80051b6:	0635      	lsls	r5, r6, #24
 80051b8:	681b      	ldr	r3, [r3, #0]
 80051ba:	d501      	bpl.n	80051c0 <_printf_i+0x1cc>
 80051bc:	6019      	str	r1, [r3, #0]
 80051be:	e002      	b.n	80051c6 <_printf_i+0x1d2>
 80051c0:	0670      	lsls	r0, r6, #25
 80051c2:	d5fb      	bpl.n	80051bc <_printf_i+0x1c8>
 80051c4:	8019      	strh	r1, [r3, #0]
 80051c6:	2300      	movs	r3, #0
 80051c8:	6123      	str	r3, [r4, #16]
 80051ca:	4615      	mov	r5, r2
 80051cc:	e7ba      	b.n	8005144 <_printf_i+0x150>
 80051ce:	682b      	ldr	r3, [r5, #0]
 80051d0:	1d1a      	adds	r2, r3, #4
 80051d2:	602a      	str	r2, [r5, #0]
 80051d4:	681d      	ldr	r5, [r3, #0]
 80051d6:	6862      	ldr	r2, [r4, #4]
 80051d8:	2100      	movs	r1, #0
 80051da:	4628      	mov	r0, r5
 80051dc:	f7fb f808 	bl	80001f0 <memchr>
 80051e0:	b108      	cbz	r0, 80051e6 <_printf_i+0x1f2>
 80051e2:	1b40      	subs	r0, r0, r5
 80051e4:	6060      	str	r0, [r4, #4]
 80051e6:	6863      	ldr	r3, [r4, #4]
 80051e8:	6123      	str	r3, [r4, #16]
 80051ea:	2300      	movs	r3, #0
 80051ec:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80051f0:	e7a8      	b.n	8005144 <_printf_i+0x150>
 80051f2:	6923      	ldr	r3, [r4, #16]
 80051f4:	462a      	mov	r2, r5
 80051f6:	4649      	mov	r1, r9
 80051f8:	4640      	mov	r0, r8
 80051fa:	47d0      	blx	sl
 80051fc:	3001      	adds	r0, #1
 80051fe:	d0ab      	beq.n	8005158 <_printf_i+0x164>
 8005200:	6823      	ldr	r3, [r4, #0]
 8005202:	079b      	lsls	r3, r3, #30
 8005204:	d413      	bmi.n	800522e <_printf_i+0x23a>
 8005206:	68e0      	ldr	r0, [r4, #12]
 8005208:	9b03      	ldr	r3, [sp, #12]
 800520a:	4298      	cmp	r0, r3
 800520c:	bfb8      	it	lt
 800520e:	4618      	movlt	r0, r3
 8005210:	e7a4      	b.n	800515c <_printf_i+0x168>
 8005212:	2301      	movs	r3, #1
 8005214:	4632      	mov	r2, r6
 8005216:	4649      	mov	r1, r9
 8005218:	4640      	mov	r0, r8
 800521a:	47d0      	blx	sl
 800521c:	3001      	adds	r0, #1
 800521e:	d09b      	beq.n	8005158 <_printf_i+0x164>
 8005220:	3501      	adds	r5, #1
 8005222:	68e3      	ldr	r3, [r4, #12]
 8005224:	9903      	ldr	r1, [sp, #12]
 8005226:	1a5b      	subs	r3, r3, r1
 8005228:	42ab      	cmp	r3, r5
 800522a:	dcf2      	bgt.n	8005212 <_printf_i+0x21e>
 800522c:	e7eb      	b.n	8005206 <_printf_i+0x212>
 800522e:	2500      	movs	r5, #0
 8005230:	f104 0619 	add.w	r6, r4, #25
 8005234:	e7f5      	b.n	8005222 <_printf_i+0x22e>
 8005236:	bf00      	nop
 8005238:	0800d5cd 	.word	0x0800d5cd
 800523c:	0800d5de 	.word	0x0800d5de

08005240 <memmove>:
 8005240:	4288      	cmp	r0, r1
 8005242:	b510      	push	{r4, lr}
 8005244:	eb01 0402 	add.w	r4, r1, r2
 8005248:	d902      	bls.n	8005250 <memmove+0x10>
 800524a:	4284      	cmp	r4, r0
 800524c:	4623      	mov	r3, r4
 800524e:	d807      	bhi.n	8005260 <memmove+0x20>
 8005250:	1e43      	subs	r3, r0, #1
 8005252:	42a1      	cmp	r1, r4
 8005254:	d008      	beq.n	8005268 <memmove+0x28>
 8005256:	f811 2b01 	ldrb.w	r2, [r1], #1
 800525a:	f803 2f01 	strb.w	r2, [r3, #1]!
 800525e:	e7f8      	b.n	8005252 <memmove+0x12>
 8005260:	4402      	add	r2, r0
 8005262:	4601      	mov	r1, r0
 8005264:	428a      	cmp	r2, r1
 8005266:	d100      	bne.n	800526a <memmove+0x2a>
 8005268:	bd10      	pop	{r4, pc}
 800526a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800526e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8005272:	e7f7      	b.n	8005264 <memmove+0x24>

08005274 <_free_r>:
 8005274:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8005276:	2900      	cmp	r1, #0
 8005278:	d044      	beq.n	8005304 <_free_r+0x90>
 800527a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800527e:	9001      	str	r0, [sp, #4]
 8005280:	2b00      	cmp	r3, #0
 8005282:	f1a1 0404 	sub.w	r4, r1, #4
 8005286:	bfb8      	it	lt
 8005288:	18e4      	addlt	r4, r4, r3
 800528a:	f000 f913 	bl	80054b4 <__malloc_lock>
 800528e:	4a1e      	ldr	r2, [pc, #120]	; (8005308 <_free_r+0x94>)
 8005290:	9801      	ldr	r0, [sp, #4]
 8005292:	6813      	ldr	r3, [r2, #0]
 8005294:	b933      	cbnz	r3, 80052a4 <_free_r+0x30>
 8005296:	6063      	str	r3, [r4, #4]
 8005298:	6014      	str	r4, [r2, #0]
 800529a:	b003      	add	sp, #12
 800529c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80052a0:	f000 b90e 	b.w	80054c0 <__malloc_unlock>
 80052a4:	42a3      	cmp	r3, r4
 80052a6:	d908      	bls.n	80052ba <_free_r+0x46>
 80052a8:	6825      	ldr	r5, [r4, #0]
 80052aa:	1961      	adds	r1, r4, r5
 80052ac:	428b      	cmp	r3, r1
 80052ae:	bf01      	itttt	eq
 80052b0:	6819      	ldreq	r1, [r3, #0]
 80052b2:	685b      	ldreq	r3, [r3, #4]
 80052b4:	1949      	addeq	r1, r1, r5
 80052b6:	6021      	streq	r1, [r4, #0]
 80052b8:	e7ed      	b.n	8005296 <_free_r+0x22>
 80052ba:	461a      	mov	r2, r3
 80052bc:	685b      	ldr	r3, [r3, #4]
 80052be:	b10b      	cbz	r3, 80052c4 <_free_r+0x50>
 80052c0:	42a3      	cmp	r3, r4
 80052c2:	d9fa      	bls.n	80052ba <_free_r+0x46>
 80052c4:	6811      	ldr	r1, [r2, #0]
 80052c6:	1855      	adds	r5, r2, r1
 80052c8:	42a5      	cmp	r5, r4
 80052ca:	d10b      	bne.n	80052e4 <_free_r+0x70>
 80052cc:	6824      	ldr	r4, [r4, #0]
 80052ce:	4421      	add	r1, r4
 80052d0:	1854      	adds	r4, r2, r1
 80052d2:	42a3      	cmp	r3, r4
 80052d4:	6011      	str	r1, [r2, #0]
 80052d6:	d1e0      	bne.n	800529a <_free_r+0x26>
 80052d8:	681c      	ldr	r4, [r3, #0]
 80052da:	685b      	ldr	r3, [r3, #4]
 80052dc:	6053      	str	r3, [r2, #4]
 80052de:	4421      	add	r1, r4
 80052e0:	6011      	str	r1, [r2, #0]
 80052e2:	e7da      	b.n	800529a <_free_r+0x26>
 80052e4:	d902      	bls.n	80052ec <_free_r+0x78>
 80052e6:	230c      	movs	r3, #12
 80052e8:	6003      	str	r3, [r0, #0]
 80052ea:	e7d6      	b.n	800529a <_free_r+0x26>
 80052ec:	6825      	ldr	r5, [r4, #0]
 80052ee:	1961      	adds	r1, r4, r5
 80052f0:	428b      	cmp	r3, r1
 80052f2:	bf04      	itt	eq
 80052f4:	6819      	ldreq	r1, [r3, #0]
 80052f6:	685b      	ldreq	r3, [r3, #4]
 80052f8:	6063      	str	r3, [r4, #4]
 80052fa:	bf04      	itt	eq
 80052fc:	1949      	addeq	r1, r1, r5
 80052fe:	6021      	streq	r1, [r4, #0]
 8005300:	6054      	str	r4, [r2, #4]
 8005302:	e7ca      	b.n	800529a <_free_r+0x26>
 8005304:	b003      	add	sp, #12
 8005306:	bd30      	pop	{r4, r5, pc}
 8005308:	2000078c 	.word	0x2000078c

0800530c <sbrk_aligned>:
 800530c:	b570      	push	{r4, r5, r6, lr}
 800530e:	4e0e      	ldr	r6, [pc, #56]	; (8005348 <sbrk_aligned+0x3c>)
 8005310:	460c      	mov	r4, r1
 8005312:	6831      	ldr	r1, [r6, #0]
 8005314:	4605      	mov	r5, r0
 8005316:	b911      	cbnz	r1, 800531e <sbrk_aligned+0x12>
 8005318:	f000 f8bc 	bl	8005494 <_sbrk_r>
 800531c:	6030      	str	r0, [r6, #0]
 800531e:	4621      	mov	r1, r4
 8005320:	4628      	mov	r0, r5
 8005322:	f000 f8b7 	bl	8005494 <_sbrk_r>
 8005326:	1c43      	adds	r3, r0, #1
 8005328:	d00a      	beq.n	8005340 <sbrk_aligned+0x34>
 800532a:	1cc4      	adds	r4, r0, #3
 800532c:	f024 0403 	bic.w	r4, r4, #3
 8005330:	42a0      	cmp	r0, r4
 8005332:	d007      	beq.n	8005344 <sbrk_aligned+0x38>
 8005334:	1a21      	subs	r1, r4, r0
 8005336:	4628      	mov	r0, r5
 8005338:	f000 f8ac 	bl	8005494 <_sbrk_r>
 800533c:	3001      	adds	r0, #1
 800533e:	d101      	bne.n	8005344 <sbrk_aligned+0x38>
 8005340:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8005344:	4620      	mov	r0, r4
 8005346:	bd70      	pop	{r4, r5, r6, pc}
 8005348:	20000790 	.word	0x20000790

0800534c <_malloc_r>:
 800534c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005350:	1ccd      	adds	r5, r1, #3
 8005352:	f025 0503 	bic.w	r5, r5, #3
 8005356:	3508      	adds	r5, #8
 8005358:	2d0c      	cmp	r5, #12
 800535a:	bf38      	it	cc
 800535c:	250c      	movcc	r5, #12
 800535e:	2d00      	cmp	r5, #0
 8005360:	4607      	mov	r7, r0
 8005362:	db01      	blt.n	8005368 <_malloc_r+0x1c>
 8005364:	42a9      	cmp	r1, r5
 8005366:	d905      	bls.n	8005374 <_malloc_r+0x28>
 8005368:	230c      	movs	r3, #12
 800536a:	603b      	str	r3, [r7, #0]
 800536c:	2600      	movs	r6, #0
 800536e:	4630      	mov	r0, r6
 8005370:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005374:	4e2e      	ldr	r6, [pc, #184]	; (8005430 <_malloc_r+0xe4>)
 8005376:	f000 f89d 	bl	80054b4 <__malloc_lock>
 800537a:	6833      	ldr	r3, [r6, #0]
 800537c:	461c      	mov	r4, r3
 800537e:	bb34      	cbnz	r4, 80053ce <_malloc_r+0x82>
 8005380:	4629      	mov	r1, r5
 8005382:	4638      	mov	r0, r7
 8005384:	f7ff ffc2 	bl	800530c <sbrk_aligned>
 8005388:	1c43      	adds	r3, r0, #1
 800538a:	4604      	mov	r4, r0
 800538c:	d14d      	bne.n	800542a <_malloc_r+0xde>
 800538e:	6834      	ldr	r4, [r6, #0]
 8005390:	4626      	mov	r6, r4
 8005392:	2e00      	cmp	r6, #0
 8005394:	d140      	bne.n	8005418 <_malloc_r+0xcc>
 8005396:	6823      	ldr	r3, [r4, #0]
 8005398:	4631      	mov	r1, r6
 800539a:	4638      	mov	r0, r7
 800539c:	eb04 0803 	add.w	r8, r4, r3
 80053a0:	f000 f878 	bl	8005494 <_sbrk_r>
 80053a4:	4580      	cmp	r8, r0
 80053a6:	d13a      	bne.n	800541e <_malloc_r+0xd2>
 80053a8:	6821      	ldr	r1, [r4, #0]
 80053aa:	3503      	adds	r5, #3
 80053ac:	1a6d      	subs	r5, r5, r1
 80053ae:	f025 0503 	bic.w	r5, r5, #3
 80053b2:	3508      	adds	r5, #8
 80053b4:	2d0c      	cmp	r5, #12
 80053b6:	bf38      	it	cc
 80053b8:	250c      	movcc	r5, #12
 80053ba:	4629      	mov	r1, r5
 80053bc:	4638      	mov	r0, r7
 80053be:	f7ff ffa5 	bl	800530c <sbrk_aligned>
 80053c2:	3001      	adds	r0, #1
 80053c4:	d02b      	beq.n	800541e <_malloc_r+0xd2>
 80053c6:	6823      	ldr	r3, [r4, #0]
 80053c8:	442b      	add	r3, r5
 80053ca:	6023      	str	r3, [r4, #0]
 80053cc:	e00e      	b.n	80053ec <_malloc_r+0xa0>
 80053ce:	6822      	ldr	r2, [r4, #0]
 80053d0:	1b52      	subs	r2, r2, r5
 80053d2:	d41e      	bmi.n	8005412 <_malloc_r+0xc6>
 80053d4:	2a0b      	cmp	r2, #11
 80053d6:	d916      	bls.n	8005406 <_malloc_r+0xba>
 80053d8:	1961      	adds	r1, r4, r5
 80053da:	42a3      	cmp	r3, r4
 80053dc:	6025      	str	r5, [r4, #0]
 80053de:	bf18      	it	ne
 80053e0:	6059      	strne	r1, [r3, #4]
 80053e2:	6863      	ldr	r3, [r4, #4]
 80053e4:	bf08      	it	eq
 80053e6:	6031      	streq	r1, [r6, #0]
 80053e8:	5162      	str	r2, [r4, r5]
 80053ea:	604b      	str	r3, [r1, #4]
 80053ec:	4638      	mov	r0, r7
 80053ee:	f104 060b 	add.w	r6, r4, #11
 80053f2:	f000 f865 	bl	80054c0 <__malloc_unlock>
 80053f6:	f026 0607 	bic.w	r6, r6, #7
 80053fa:	1d23      	adds	r3, r4, #4
 80053fc:	1af2      	subs	r2, r6, r3
 80053fe:	d0b6      	beq.n	800536e <_malloc_r+0x22>
 8005400:	1b9b      	subs	r3, r3, r6
 8005402:	50a3      	str	r3, [r4, r2]
 8005404:	e7b3      	b.n	800536e <_malloc_r+0x22>
 8005406:	6862      	ldr	r2, [r4, #4]
 8005408:	42a3      	cmp	r3, r4
 800540a:	bf0c      	ite	eq
 800540c:	6032      	streq	r2, [r6, #0]
 800540e:	605a      	strne	r2, [r3, #4]
 8005410:	e7ec      	b.n	80053ec <_malloc_r+0xa0>
 8005412:	4623      	mov	r3, r4
 8005414:	6864      	ldr	r4, [r4, #4]
 8005416:	e7b2      	b.n	800537e <_malloc_r+0x32>
 8005418:	4634      	mov	r4, r6
 800541a:	6876      	ldr	r6, [r6, #4]
 800541c:	e7b9      	b.n	8005392 <_malloc_r+0x46>
 800541e:	230c      	movs	r3, #12
 8005420:	603b      	str	r3, [r7, #0]
 8005422:	4638      	mov	r0, r7
 8005424:	f000 f84c 	bl	80054c0 <__malloc_unlock>
 8005428:	e7a1      	b.n	800536e <_malloc_r+0x22>
 800542a:	6025      	str	r5, [r4, #0]
 800542c:	e7de      	b.n	80053ec <_malloc_r+0xa0>
 800542e:	bf00      	nop
 8005430:	2000078c 	.word	0x2000078c

08005434 <_realloc_r>:
 8005434:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005438:	4680      	mov	r8, r0
 800543a:	4614      	mov	r4, r2
 800543c:	460e      	mov	r6, r1
 800543e:	b921      	cbnz	r1, 800544a <_realloc_r+0x16>
 8005440:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005444:	4611      	mov	r1, r2
 8005446:	f7ff bf81 	b.w	800534c <_malloc_r>
 800544a:	b92a      	cbnz	r2, 8005458 <_realloc_r+0x24>
 800544c:	f7ff ff12 	bl	8005274 <_free_r>
 8005450:	4625      	mov	r5, r4
 8005452:	4628      	mov	r0, r5
 8005454:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005458:	f000 f838 	bl	80054cc <_malloc_usable_size_r>
 800545c:	4284      	cmp	r4, r0
 800545e:	4607      	mov	r7, r0
 8005460:	d802      	bhi.n	8005468 <_realloc_r+0x34>
 8005462:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8005466:	d812      	bhi.n	800548e <_realloc_r+0x5a>
 8005468:	4621      	mov	r1, r4
 800546a:	4640      	mov	r0, r8
 800546c:	f7ff ff6e 	bl	800534c <_malloc_r>
 8005470:	4605      	mov	r5, r0
 8005472:	2800      	cmp	r0, #0
 8005474:	d0ed      	beq.n	8005452 <_realloc_r+0x1e>
 8005476:	42bc      	cmp	r4, r7
 8005478:	4622      	mov	r2, r4
 800547a:	4631      	mov	r1, r6
 800547c:	bf28      	it	cs
 800547e:	463a      	movcs	r2, r7
 8005480:	f7ff fbb8 	bl	8004bf4 <memcpy>
 8005484:	4631      	mov	r1, r6
 8005486:	4640      	mov	r0, r8
 8005488:	f7ff fef4 	bl	8005274 <_free_r>
 800548c:	e7e1      	b.n	8005452 <_realloc_r+0x1e>
 800548e:	4635      	mov	r5, r6
 8005490:	e7df      	b.n	8005452 <_realloc_r+0x1e>
	...

08005494 <_sbrk_r>:
 8005494:	b538      	push	{r3, r4, r5, lr}
 8005496:	4d06      	ldr	r5, [pc, #24]	; (80054b0 <_sbrk_r+0x1c>)
 8005498:	2300      	movs	r3, #0
 800549a:	4604      	mov	r4, r0
 800549c:	4608      	mov	r0, r1
 800549e:	602b      	str	r3, [r5, #0]
 80054a0:	f000 f81e 	bl	80054e0 <_sbrk>
 80054a4:	1c43      	adds	r3, r0, #1
 80054a6:	d102      	bne.n	80054ae <_sbrk_r+0x1a>
 80054a8:	682b      	ldr	r3, [r5, #0]
 80054aa:	b103      	cbz	r3, 80054ae <_sbrk_r+0x1a>
 80054ac:	6023      	str	r3, [r4, #0]
 80054ae:	bd38      	pop	{r3, r4, r5, pc}
 80054b0:	20000794 	.word	0x20000794

080054b4 <__malloc_lock>:
 80054b4:	4801      	ldr	r0, [pc, #4]	; (80054bc <__malloc_lock+0x8>)
 80054b6:	f000 b811 	b.w	80054dc <__retarget_lock_acquire_recursive>
 80054ba:	bf00      	nop
 80054bc:	20000798 	.word	0x20000798

080054c0 <__malloc_unlock>:
 80054c0:	4801      	ldr	r0, [pc, #4]	; (80054c8 <__malloc_unlock+0x8>)
 80054c2:	f000 b80c 	b.w	80054de <__retarget_lock_release_recursive>
 80054c6:	bf00      	nop
 80054c8:	20000798 	.word	0x20000798

080054cc <_malloc_usable_size_r>:
 80054cc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80054d0:	1f18      	subs	r0, r3, #4
 80054d2:	2b00      	cmp	r3, #0
 80054d4:	bfbc      	itt	lt
 80054d6:	580b      	ldrlt	r3, [r1, r0]
 80054d8:	18c0      	addlt	r0, r0, r3
 80054da:	4770      	bx	lr

080054dc <__retarget_lock_acquire_recursive>:
 80054dc:	4770      	bx	lr

080054de <__retarget_lock_release_recursive>:
 80054de:	4770      	bx	lr

080054e0 <_sbrk>:
 80054e0:	4a04      	ldr	r2, [pc, #16]	; (80054f4 <_sbrk+0x14>)
 80054e2:	6811      	ldr	r1, [r2, #0]
 80054e4:	4603      	mov	r3, r0
 80054e6:	b909      	cbnz	r1, 80054ec <_sbrk+0xc>
 80054e8:	4903      	ldr	r1, [pc, #12]	; (80054f8 <_sbrk+0x18>)
 80054ea:	6011      	str	r1, [r2, #0]
 80054ec:	6810      	ldr	r0, [r2, #0]
 80054ee:	4403      	add	r3, r0
 80054f0:	6013      	str	r3, [r2, #0]
 80054f2:	4770      	bx	lr
 80054f4:	2000079c 	.word	0x2000079c
 80054f8:	200007a0 	.word	0x200007a0

080054fc <_init>:
 80054fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80054fe:	bf00      	nop
 8005500:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005502:	bc08      	pop	{r3}
 8005504:	469e      	mov	lr, r3
 8005506:	4770      	bx	lr

08005508 <_fini>:
 8005508:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800550a:	bf00      	nop
 800550c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800550e:	bc08      	pop	{r3}
 8005510:	469e      	mov	lr, r3
 8005512:	4770      	bx	lr
